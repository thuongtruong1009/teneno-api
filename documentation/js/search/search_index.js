var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.264,1,3.416]],["body/classes/AllExceptionsFilter.html",[0,0.222,1,4.147,2,0.544,3,0.104,4,0.094,5,0.085,6,3.169,7,2.028,8,5.344,9,0.333,10,1.158,11,5.846,12,4.535,13,5.192,14,4.205,15,6.082,16,1.146,17,3.169,18,4.11,19,0.439,20,3.607,21,1.127,22,0.011,23,0.836,24,0.378,25,1.004,26,3.383,27,4.562,28,6.542,29,3.557,30,5.344,31,5.846,32,3.607,33,3.737,34,1.32,35,4.785,36,5.192,37,3.607,38,3.607,39,2.846,40,4.496,41,3.607,42,0.207,43,2.121,44,0.561,45,5.192,46,3.607,47,3.607,48,1.939,49,0.104,50,1.663,51,2.17,52,3.169,53,3.169,54,3.169,55,3.169,56,3.607,57,3.607,58,3.791,59,5.192,60,2.311,61,6.653,62,3.607,63,3.607,64,3.607,65,6.082,66,5.846,67,3.607,68,3.607,69,3.169,70,3.169,71,1.552,72,3.169,73,3.607,74,2.493,75,3.169,76,3.607,77,0.006,78,0.006]],["title/controllers/AppController.html",[79,2.045,80,3.161]],["body/controllers/AppController.html",[0,0.31,3,0.145,4,0.131,5,0.118,9,0.464,10,1.455,19,0.332,22,0.011,34,1.093,42,0.261,43,2.96,44,0.782,49,0.145,50,2.321,58,3.507,77,0.008,78,0.008,79,3.118,80,4.82,81,2.321,82,4.423,83,2.827,84,6.725,85,1.6,86,5.034,87,4.509,88,5.034,89,5.731,90,2.503,91,5.731,92,3.366,93,3.507,94,4.82,95,5.21,96,5.034,97,6.522,98,2.471,99,5.034,100,0.794,101,3.28,102,4.25,103,6.358,104,3.28,105,1.472,106,4.715,107,4.423,108,3.507,109,5.034,110,5.034,111,4.021,112,3.28,113,3.28,114,4.423,115,5.731,116,1.32,117,5.034]],["title/modules/AppModule.html",[118,1.671,119,3.161]],["body/modules/AppModule.html",[0,0.205,3,0.095,4,0.087,5,0.078,7,1.297,10,0.74,14,2.294,19,0.219,21,0.562,22,0.011,23,0.417,24,0.189,25,0.501,34,0.72,35,3.184,39,1.22,42,0.286,44,0.516,49,0.095,74,4.01,77,0.006,78,0.007,80,4.286,81,2.253,106,4.648,107,2.916,108,2.628,118,1.909,119,6.329,120,1.586,121,2.425,122,2.916,123,2.916,124,2.916,125,4.648,126,4.931,127,4.931,128,4.931,129,4.931,130,4.931,131,4.005,132,4.406,133,2.744,134,1.864,135,1.713,136,3.319,137,2.522,138,3.184,139,2.916,140,4.293,141,5.621,142,3.319,143,2.916,144,4.886,145,4.886,146,2.294,147,3.319,148,3.319,149,3.611,150,3.319,151,3.319,152,3.319,153,3.319,154,2.916,155,2.163,156,3.319,157,2.453,158,3.319,159,3.319,160,3.319,161,3.319,162,3.319,163,2.453,164,3.319,165,3.319,166,2.916,167,3.319,168,3.319,169,1.478,170,3.319,171,2.916,172,3.319,173,3.319,174,3.319,175,3.319,176,3.319,177,2.651,178,3.319,179,4.886,180,2.453,181,3.319,182,3.319,183,3.319,184,2.651,185,3.319,186,2.916,187,2.916,188,3.319,189,3.378,190,4.632,191,4.293,192,3.319,193,3.319,194,4.293,195,3.903,196,4.886,197,4.293,198,3.319,199,4.886,200,3.319,201,3.319,202,2.05]],["title/injectables/AppService.html",[106,2.787,203,0.904]],["body/injectables/AppService.html",[0,0.345,3,0.161,4,0.146,5,0.131,9,0.516,10,1.555,12,3.453,16,1.777,17,4.912,18,4.914,19,0.46,21,0.947,22,0.01,23,0.703,24,0.318,25,0.844,26,4.952,34,1.214,42,0.259,44,0.869,49,0.161,77,0.008,78,0.008,84,6.99,87,3.865,89,4.912,94,4.132,95,5.569,100,0.849,106,4.544,116,1.466,203,1.473,204,2.118,205,4.912,206,5.591,207,5.591,208,5.591,209,5.591,210,5.591,211,5.591]],["title/injectables/AtGuard.html",[149,3.161,203,0.904]],["body/injectables/AtGuard.html",[0,0.312,3,0.145,4,0.132,5,0.119,9,0.467,10,1.46,16,1.609,19,0.432,21,1.109,22,0.011,23,0.823,24,0.372,25,0.988,34,1.099,42,0.247,44,0.787,49,0.145,50,2.334,51,1.805,77,0.008,78,0.008,108,3.901,116,1.716,146,3.499,149,4.837,169,2.914,184,6.498,203,1.383,204,1.917,212,4.447,213,5.751,214,4.447,215,5.061,216,5.751,217,4.51,218,5.061,219,2.976,220,4.447,221,3.499,222,1.363,223,4.447,224,3.499,225,5.061,226,5.061,227,5.061,228,5.061,229,5.061,230,5.061,231,5.061,232,4.042,233,4.042,234,5.061,235,5.061,236,5.061,237,6.545,238,5.061,239,4.447,240,4.447,241,5.061]],["title/injectables/AtStrategy.html",[203,0.904,242,2.957]],["body/injectables/AtStrategy.html",[0,0.321,3,0.149,4,0.136,5,0.122,9,0.48,10,1.486,16,1.653,19,0.44,21,1.129,22,0.011,23,0.837,24,0.379,25,1.006,34,1.129,42,0.273,44,0.809,49,0.149,77,0.008,78,0.008,116,1.364,155,3.39,203,1.408,204,1.971,221,3.596,222,1.401,224,3.596,242,4.606,243,4.571,244,3.438,245,5.853,246,5.727,247,5.202,248,3.844,249,6.662,250,8.195,251,5.202,252,5.853,253,4.155,254,4.571,255,4.571,256,4.571,257,3.844,258,4.606,259,3.058,260,4.571,261,4.571,262,4.571,263,4.571,264,5.202]],["title/controllers/AuthController.html",[79,2.045,265,3.161]],["body/controllers/AuthController.html",[0,0.179,3,0.083,4,0.076,5,0.068,9,0.267,10,0.984,19,0.425,21,1.09,22,0.011,23,0.809,24,0.413,25,0.971,29,1.247,34,1.397,42,0.24,43,1.703,44,0.45,49,0.083,50,1.336,71,2.573,77,0.005,78,0.005,79,1.385,81,1.336,83,1.627,85,2.155,90,2.56,98,1.097,100,0.906,101,1.888,102,4.418,104,1.888,105,0.847,108,2.875,112,3.896,113,4.193,116,1.687,195,2.314,259,1.703,265,3.262,266,2.546,267,2.969,268,5.957,269,5.63,270,3.878,271,3.878,272,3.878,273,2.546,274,2.897,275,5.346,276,3.128,277,6.541,278,2.897,279,2.489,280,5.25,281,2.546,282,2.897,283,2.897,284,4.414,285,2.897,286,2.546,287,3.693,288,2.897,289,4.414,290,2.897,291,3.791,292,2.546,293,4.687,294,2.897,295,2.11,296,2.897,297,2.897,298,3.878,299,2.897,300,2.546,301,4.133,302,2.897,303,2.876,304,2.726,305,2.897,306,2.141,307,1.627,308,2.314,309,2.897,310,4.133,311,4.414,312,3.525,313,3.051,314,3.051,315,3.051,316,4.873,317,3.525,318,3.896,319,2.546,320,2.314,321,3.525,322,2.141,323,2.546,324,2.546,325,2.897,326,4.687,327,2.314,328,2.003,329,2.897,330,2.897,331,1.888,332,2.546,333,2.003,334,1.888,335,2.897,336,2.897,337,2.897,338,2.314,339,2.897,340,2.897,341,2.897,342,2.897,343,2.897,344,2.897,345,2.897,346,2.897,347,2.897,348,2.897,349,2.897,350,2.897,351,2.897,352,2.897,353,2.897]],["title/modules/AuthModule.html",[118,1.671,125,2.787]],["body/modules/AuthModule.html",[0,0.317,3,0.148,4,0.134,5,0.121,22,0.01,42,0.279,44,0.8,49,0.148,77,0.008,78,0.008,81,3.05,118,2.584,120,2.459,121,3.283,125,5.658,131,4.588,133,3.714,134,2.889,135,2.655,137,3.414,138,4.311,242,5.649,265,5.403,318,5.325,319,4.52,354,4.52,355,4.52,356,5.145,357,5.649,358,5.145,359,4.52,360,5.145,361,5.145,362,6.615,363,4.109]],["title/injectables/AuthService.html",[203,0.904,318,2.787]],["body/injectables/AuthService.html",[0,0.142,3,0.066,4,0.06,5,0.054,9,0.213,10,0.825,12,2.856,16,1.175,19,0.444,21,1.14,22,0.011,23,0.846,24,0.383,25,1.016,34,1.406,42,0.221,44,0.359,49,0.066,51,2.752,71,2.896,77,0.004,78,0.004,93,2.842,100,0.986,116,1.516,155,1.505,203,0.781,204,0.875,246,4.558,253,1.845,259,1.358,267,2.977,268,3.249,269,5.173,270,3.249,271,3.249,272,3.249,273,3.249,276,2.259,279,2.89,280,5.119,281,3.249,286,3.249,287,3.265,291,2.842,292,3.249,293,3.654,300,3.249,301,3.654,304,3.265,318,2.41,324,2.03,363,1.845,364,2.03,365,3.698,366,3.698,367,2.31,368,3.483,369,6.477,370,2.31,371,3.698,372,4.353,373,2.31,374,2.31,375,2.31,376,2.31,377,2.31,378,2.31,379,3.698,380,5.782,381,2.31,382,1.104,383,1.646,384,1.845,385,3.417,386,1.845,387,2.03,388,2.03,389,4.599,390,2.31,391,3.698,392,3.698,393,3.698,394,2.31,395,3.698,396,2.31,397,2.31,398,2.31,399,2.31,400,4.222,401,2.31,402,3.249,403,1.602,404,4.624,405,2.31,406,2.03,407,1.845,408,5.08,409,2.284,410,3.249,411,2.31,412,1.358,413,4.478,414,2.31,415,2.03,416,2.31,417,2.31,418,2.31,419,5.913,420,2.31,421,2.31,422,2.31,423,5.285,424,3.417,425,5.08,426,5.08,427,5.782,428,2.03,429,3.249,430,4.624,431,4.624,432,4.624,433,2.31,434,2.733,435,3.698,436,3.698,437,3.698,438,2.31,439,2.31,440,2.03,441,2.31]],["title/classes/CommentEntity.html",[0,0.264,442,2.787]],["body/classes/CommentEntity.html",[0,0.4,2,0.754,3,0.143,4,0.13,5,0.117,9,0.461,19,0.535,22,0.01,24,0.461,42,0.17,49,0.143,77,0.008,78,0.008,85,2.577,100,1.019,279,3.001,403,2.497,442,4.228,443,4.388,444,1.748,445,4.238,446,6.333,447,7.208,448,3.876,449,4.993,450,4.993,451,4.983,452,4.993,453,3.349,454,6.488,455,4.993,456,4.993,457,4.993,458,4.993,459,4.983,460,3.988,461,3.552,462,4.993,463,2.996,464,1.501]],["title/classes/ConversationEntity.html",[0,0.264,465,3.161]],["body/classes/ConversationEntity.html",[0,0.277,2,0.678,3,0.129,4,0.117,5,0.105,9,0.414,19,0.547,22,0.011,23,0.86,24,0.471,42,0.153,49,0.129,77,0.007,78,0.007,85,2.633,90,2.236,100,1.048,105,1.313,169,2.693,403,2.369,434,4.469,444,1.629,465,4.469,466,3.945,467,4.224,468,3.53,469,5.462,470,3.84,471,3.678,472,6.009,473,3.894,474,4.49,475,4.49,476,5.408,477,4.49,478,4.49,479,4.49,480,3.252,481,5.314,482,4.49,483,4.49,484,4.49,485,4.49,486,4.49,487,2.773]],["title/controllers/ConversationsController.html",[79,2.045,488,3.161]],["body/controllers/ConversationsController.html",[0,0.135,3,0.063,4,0.057,5,0.051,9,0.201,10,0.788,19,0.435,21,1.117,22,0.011,23,0.828,24,0.407,25,0.995,34,1.431,42,0.192,43,1.284,44,0.339,49,0.063,50,1.007,71,2.202,77,0.004,78,0.004,79,1.044,81,1.007,83,1.226,85,2.095,90,2.49,98,0.827,100,0.955,101,1.423,102,4.437,103,1.918,104,1.423,105,0.638,112,4.125,113,4.295,116,1.728,169,1.573,267,2.948,276,2.938,291,4.48,295,1.689,298,3.105,303,3.334,306,4.678,307,1.984,310,2.443,312,2.822,313,2.443,314,2.443,315,2.443,316,4.707,326,5.265,328,1.509,331,1.423,333,1.509,334,1.423,338,1.744,389,1.226,403,2.083,459,2.443,465,4.678,470,3.376,471,1.9,488,2.611,489,1.918,490,3.555,491,3.105,492,3.911,493,3.911,494,3.105,495,3.911,496,3.911,497,3.911,498,3.911,499,1.918,500,2.872,501,2.183,502,6.447,503,5.283,504,2.183,505,2.183,506,3.404,507,1.918,508,3.537,509,2.183,510,4.152,511,4.871,512,2.183,513,1.918,514,3.008,515,2.183,516,2.443,517,5.041,518,2.183,519,4.707,520,1.918,521,3.16,522,2.183,523,3.534,524,2.183,525,1.918,526,3.334,527,2.183,528,4.495,529,2.183,530,1.918,531,3.008,532,2.183,533,2.183,534,1.918,535,3.008,536,2.183,537,2.303,538,2.183,539,1.918,540,3.008,541,2.183,542,3.105,543,2.303,544,3.534,545,2.183,546,1.744,547,1.744,548,3.334,549,1.918,550,2.183,551,2.183,552,1.509,553,2.183,554,2.183,555,2.183,556,2.183,557,2.183,558,2.183,559,2.183,560,2.183,561,4.451,562,2.183,563,2.183,564,2.183,565,2.183,566,2.183,567,2.183,568,4.451,569,2.183,570,2.183,571,2.183,572,2.183,573,2.183]],["title/modules/ConversationsModule.html",[118,1.671,126,2.957]],["body/modules/ConversationsModule.html",[0,0.331,3,0.154,4,0.14,5,0.126,22,0.01,42,0.276,44,0.834,49,0.154,77,0.008,78,0.008,81,3.133,118,2.655,120,2.565,121,3.373,126,5.969,131,4.639,132,5.103,133,3.816,134,3.013,135,2.77,137,3.507,138,4.428,488,5.511,548,5.384,549,4.715,574,4.715,575,5.366,576,4.715,577,5.366,578,5.366,579,4.715,580,4.715]],["title/injectables/ConversationsService.html",[203,0.904,548,2.787]],["body/injectables/ConversationsService.html",[0,0.144,3,0.067,4,0.061,5,0.055,9,0.215,10,0.831,16,0.742,19,0.46,21,1.18,22,0.011,23,0.933,24,0.396,25,1.051,34,1.466,42,0.181,44,0.363,49,0.067,50,1.076,51,2.547,77,0.004,78,0.004,90,1.219,93,3.125,100,0.968,116,1.912,169,2.072,203,0.788,204,0.884,267,2.982,291,4.363,368,3.332,389,4.01,403,2.754,412,2.191,467,3.589,468,2.402,470,3.651,471,3.332,480,1.255,491,3.275,492,3.275,493,4.09,494,3.275,495,3.275,496,3.275,497,4.09,498,4.09,499,3.275,500,2.985,502,2.977,506,3.497,507,3.275,508,3.675,513,2.05,514,3.125,516,1.613,519,5.042,520,3.275,521,3.283,525,3.275,526,3.464,530,3.275,531,3.125,534,2.05,535,3.125,537,4.238,539,2.05,540,3.125,548,2.429,581,2.05,582,1.724,583,2.333,584,2.333,585,2.333,586,2.333,587,2.333,588,2.333,589,2.333,590,2.333,591,2.333,592,2.05,593,2.05,594,3.44,595,3.727,596,2.333,597,3.727,598,3.275,599,5.315,600,3.727,601,4.654,602,5.315,603,5.935,604,1.724,605,6.119,606,5.315,607,2.333,608,2.333,609,2.333,610,2.333,611,3.275,612,2.333]],["title/classes/CreateCommentDto.html",[0,0.264,613,2.957]],["body/classes/CreateCommentDto.html",[0,0.389,2,0.952,3,0.181,4,0.164,5,0.148,22,0.01,42,0.256,49,0.181,77,0.009,78,0.009,105,1.844,222,1.699,279,2.626,442,4.11,445,3.708,448,3.392,613,5.188,614,5.542,615,4.661,616,5.038,617,5.038,618,5.038]],["title/classes/CreateConversationDto.html",[0,0.264,500,2.402]],["body/classes/CreateConversationDto.html",[0,0.32,2,0.544,3,0.104,4,0.094,5,0.085,9,0.333,19,0.465,22,0.01,23,0.991,24,0.455,25,0.784,42,0.207,49,0.104,58,4.405,77,0.006,78,0.006,85,2.241,90,2.579,100,1.045,105,1.054,169,1.606,244,1.862,444,1.398,453,3.434,459,4.205,461,2.618,463,2.52,464,1.084,467,3.757,470,3.415,471,3.271,473,3.269,480,2.792,481,4.562,487,3.207,500,2.915,619,6.452,620,2.025,621,3.959,622,3.446,623,4.562,624,3.607,625,3.607,626,3.607,627,6.082,628,3.607,629,3.607,630,5.314,631,4.917,632,3.607,633,5.314,634,6.082,635,4.562,636,5.314,637,3.607,638,3.607,639,3.607,640,3.169,641,3.169,642,5.344,643,3.607,644,3.169,645,2.881,646,2.665,647,2.881,648,2.881,649,2.881,650,2.493,651,2.493,652,3.169,653,4.147,654,4.147,655,5.314,656,3.169,657,4.562,658,3.607,659,3.607,660,3.607,661,3.607,662,3.607,663,3.607]],["title/classes/CreateMessageDto.html",[0,0.264,664,2.787]],["body/classes/CreateMessageDto.html",[0,0.361,2,0.884,3,0.168,4,0.153,5,0.137,9,0.54,19,0.512,22,0.01,24,0.441,42,0.199,49,0.168,77,0.008,78,0.008,100,1.028,105,1.711,403,2.686,444,1.932,448,4.171,664,4.674,665,7.103,666,4.675,667,6.195,668,5.853,669,5.853,670,5.143,671,7.173]],["title/classes/CreatePostDto.html",[0,0.264,672,2.642]],["body/classes/CreatePostDto.html",[0,0.419,2,0.812,3,0.155,4,0.14,5,0.126,9,0.496,19,0.518,22,0.01,24,0.446,42,0.183,49,0.155,77,0.008,78,0.008,85,2.494,90,2.441,100,1.034,444,1.834,459,5.162,461,2.316,463,3.181,464,1.617,672,4.205,673,7.112,674,3.507,675,5.162,676,4.39,677,5.518,678,5.381,679,4.728,680,5.381,681,5.381]],["title/classes/DeleteCommentDto.html",[0,0.264,682,2.957]],["body/classes/DeleteCommentDto.html",[0,0.39,2,0.955,3,0.182,4,0.165,5,0.149,22,0.01,42,0.256,49,0.182,77,0.009,78,0.009,105,1.85,222,1.705,403,2.192,442,4.124,445,3.721,615,4.677,616,5.055,617,5.055,618,5.055,682,5.198,683,5.561]],["title/classes/DeleteConversationDto.html",[0,0.264,508,2.957]],["body/classes/DeleteConversationDto.html",[0,0.371,2,0.909,3,0.173,4,0.157,5,0.141,9,0.556,19,0.397,22,0.01,24,0.342,42,0.205,49,0.173,77,0.009,78,0.009,85,1.914,100,0.889,222,1.966,276,2.353,279,3.039,403,2.086,444,1.966,508,5.046,521,5.043,620,3.382,621,3.382,622,2.592,684,5.292,685,3.541,686,3.72,687,4.451,688,5.292,689,5.292,690,4.164]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.264,514,2.515]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.482,2,0.728,3,0.139,4,0.126,5,0.113,9,0.445,19,0.419,22,0.01,23,0.607,24,0.403,42,0.242,49,0.216,77,0.007,78,0.007,85,1.534,90,1.578,100,1.053,105,1.411,222,2.028,276,2.479,279,2.952,295,2.307,403,2.198,444,1.709,461,2.731,463,2.404,464,1.45,467,2.981,468,2.491,470,4.229,471,3.412,473,2.825,500,4.229,514,3.731,531,2.837,535,2.837,540,2.837,620,2.71,621,2.71,622,2.731,685,3.731,686,3.919,687,3.567,690,3.336,691,4.901,692,4.826,693,4.826,694,4.428,695,3.567,696,3.145]],["title/classes/DeleteOnePost.html",[0,0.264,697,2.957]],["body/classes/DeleteOnePost.html",[0,0.441,2,0.881,3,0.168,4,0.152,5,0.137,9,0.538,19,0.472,22,0.01,24,0.407,42,0.199,49,0.168,77,0.008,78,0.008,85,2.275,100,0.983,444,1.928,445,4.554,451,4.95,461,3.333,463,2.934,464,1.754,674,3.802,675,5.355,697,4.95,698,6.805,699,5.835,700,4.66]],["title/classes/ErrorAcceptableException.html",[0,0.264,701,1.972]],["body/classes/ErrorAcceptableException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,2.374,702,1.704,703,2.999,704,4.094,705,3.565,706,1.704,707,2.555,708,2.292,709,2.555,710,2.555,711,2.555,712,2.292,713,2.555,714,2.555,715,2.555,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77]],["title/classes/ErrorBadGatewayException.html",[0,0.264,741,1.972]],["body/classes/ErrorBadGatewayException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.999,708,2.292,709,2.555,710,2.555,711,2.555,712,2.292,713,2.555,714,2.555,715,2.555,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,2.374,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,756,3.565]],["title/classes/ErrorBadRequestException.html",[0,0.264,723,1.972]],["body/classes/ErrorBadRequestException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.691,709,2.555,710,2.555,711,2.555,712,2.292,713,2.555,714,2.555,715,2.555,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,2.374,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,757,3.565]],["title/classes/ErrorForbiddenException.html",[0,0.264,721,1.972]],["body/classes/ErrorForbiddenException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.947,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.292,709,2.555,710,2.555,711,2.555,712,2.292,713,2.555,714,2.555,715,2.555,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,2.374,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,758,3.565]],["title/classes/ErrorGatewayTimeoutException.html",[0,0.264,742,1.972]],["body/classes/ErrorGatewayTimeoutException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.292,709,2.999,710,2.555,711,2.555,712,2.292,713,2.555,714,2.555,715,2.555,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,2.374,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,759,3.565]],["title/classes/ErrorInternalServerException.html",[0,0.264,732,1.972]],["body/classes/ErrorInternalServerException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.292,709,2.555,710,2.999,711,2.555,712,2.292,713,2.555,714,2.555,715,2.555,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,2.374,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,760,3.565]],["title/classes/ErrorMethodNotAllowedException.html",[0,0.264,734,1.972]],["body/classes/ErrorMethodNotAllowedException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.292,709,2.555,710,2.555,711,2.999,712,2.292,713,2.555,714,2.555,715,2.555,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,2.374,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,761,3.565]],["title/classes/ErrorNotFoundException.html",[0,0.264,717,1.972]],["body/classes/ErrorNotFoundException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.292,709,2.555,710,2.555,711,2.555,712,2.691,713,2.555,714,2.555,715,2.555,716,1.587,717,2.374,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,762,3.565]],["title/classes/ErrorRequestTimeoutException.html",[0,0.264,726,1.972]],["body/classes/ErrorRequestTimeoutException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.292,709,2.555,710,2.555,711,2.555,712,2.292,713,2.999,714,2.555,715,2.555,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,2.374,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,763,3.565]],["title/classes/ErrorServiceUnavailableException.html",[0,0.264,737,1.972]],["body/classes/ErrorServiceUnavailableException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.292,709,2.555,710,2.555,711,2.555,712,2.292,713,2.555,714,2.999,715,2.555,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,2.374,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,764,3.565]],["title/classes/ErrorUnauthorizedException.html",[0,0.264,719,1.972]],["body/classes/ErrorUnauthorizedException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.947,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.292,709,2.555,710,2.555,711,2.555,712,2.292,713,2.555,714,2.555,715,2.555,716,1.587,717,1.644,718,2.555,719,2.374,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,1.644,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,765,3.565]],["title/classes/ErrorUnsupportedMediaTypeException.html",[0,0.264,729,1.972]],["body/classes/ErrorUnsupportedMediaTypeException.html",[0,0.504,2,0.538,3,0.102,4,0.093,5,0.084,16,1.133,19,0.235,21,0.604,22,0.011,23,0.448,24,0.293,25,0.538,29,3.771,33,1.644,39,1.31,42,0.122,44,0.554,49,0.235,60,1.587,77,0.006,78,0.006,98,1.351,100,1.012,222,2.222,382,1.704,383,2.691,701,1.644,702,1.704,703,2.555,704,4.094,706,1.704,707,2.555,708,2.292,709,2.555,710,2.555,711,2.555,712,2.292,713,2.555,714,2.555,715,2.999,716,1.587,717,1.644,718,2.555,719,1.644,720,1.77,721,1.644,722,1.77,723,1.644,724,2.555,725,1.77,726,1.644,727,1.77,728,2.461,729,2.374,730,1.77,731,1.77,732,1.644,733,1.77,734,1.644,735,1.77,736,1.77,737,1.644,738,1.77,739,1.77,740,2.555,741,1.644,742,1.644,743,1.77,744,1.77,745,1.77,746,1.77,747,1.77,748,1.77,749,1.77,750,1.704,751,1.77,752,1.77,753,1.644,754,1.77,755,1.77,766,3.565]],["title/injectables/ErrorsIntereptor.html",[203,0.904,767,3.416]],["body/injectables/ErrorsIntereptor.html",[0,0.334,3,0.155,4,0.141,5,0.127,7,2.115,9,0.499,10,1.524,19,0.357,21,0.917,22,0.011,23,0.68,24,0.308,25,0.817,28,4.323,34,1.175,42,0.233,43,3.182,44,0.841,49,0.155,58,2.911,71,2.329,77,0.008,78,0.008,116,1.419,203,1.444,204,2.05,217,4.623,219,3.182,767,5.457,768,4.756,769,4.723,770,5.049,771,4.857,772,5.436,773,5.413,774,5.176,775,4.723,776,5.413,777,6.832,778,3.527,779,4.756,780,5.413,781,5.413,782,5.413,783,5.413]],["title/injectables/ExistedUserMiddleware.html",[203,0.904,784,3.161]],["body/injectables/ExistedUserMiddleware.html",[0,0.292,3,0.136,4,0.124,5,0.111,7,1.852,9,0.437,10,1.399,16,1.507,19,0.414,21,1.062,22,0.011,23,0.788,24,0.357,25,0.947,34,1.029,39,2.748,40,4.199,42,0.24,44,0.737,48,2.549,49,0.136,50,2.186,51,2.237,71,2.04,77,0.007,78,0.007,98,1.796,169,2.111,203,1.325,204,1.796,267,2.583,279,2.611,368,4.297,384,3.786,389,2.662,403,2.172,406,6.175,413,3.277,424,3.503,434,3.503,582,3.503,604,3.503,712,2.111,771,4.619,784,4.634,785,5.613,786,4.165,787,4.634,788,4.74,789,5.51,790,6.175,791,7.478,792,4.74,793,3.503,794,5.51,795,4.74,796,3.503,797,4.74,798,4.165]],["title/controllers/FileController.html",[79,2.045,799,3.161]],["body/controllers/FileController.html",[0,0.184,3,0.086,4,0.078,5,0.176,9,0.276,10,1.008,19,0.401,21,1.029,22,0.011,23,0.944,24,0.371,25,0.917,29,1.287,34,1.319,42,0.243,43,1.758,44,0.465,48,2.931,49,0.086,50,1.378,77,0.005,78,0.005,79,1.429,81,1.378,83,1.679,85,2.074,90,2.399,92,3.367,93,3.69,98,1.133,101,1.948,102,4.252,104,1.948,105,0.874,111,2.388,112,3.959,113,3.959,116,1.593,169,2.013,259,1.758,267,2.897,276,1.766,280,5.073,307,3.06,310,3.125,313,3.125,314,3.125,315,3.125,316,4.51,317,3.61,326,4.2,327,2.388,328,2.067,331,1.948,332,3.972,333,2.067,334,4.644,468,2.333,487,1.847,552,2.067,676,3.836,796,4.821,799,3.341,800,2.627,801,4.789,802,4.789,803,4.789,804,4.789,805,2.627,806,6.599,807,2.99,808,6.447,809,2.627,810,2.99,811,2.99,812,2.627,813,2.99,814,3.125,815,2.627,816,2.99,817,2.99,818,2.627,819,2.99,820,5.338,821,3.972,822,2.99,823,4.52,824,2.99,825,2.627,826,3.552,827,2.99,828,4.52,829,2.99,830,3.61,831,4.52,832,2.99,833,5.45,834,5.45,835,2.627,836,2.388,837,2.388,838,3.61,839,2.946,840,2.627,841,2.627,842,2.627,843,2.99,844,2.99,845,2.99,846,2.99,847,2.99,848,2.99,849,2.99,850,2.99,851,2.99,852,2.99,853,2.99,854,2.99,855,2.99,856,2.99,857,5.732,858,2.99,859,2.99,860,2.99,861,2.99,862,2.99]],["title/modules/FilesModule.html",[118,1.671,127,2.957]],["body/modules/FilesModule.html",[0,0.358,3,0.167,4,0.152,5,0.136,22,0.01,42,0.264,44,0.904,49,0.167,77,0.008,78,0.008,81,3.295,118,2.792,120,2.781,121,3.547,127,5.828,133,4.012,134,3.266,135,3.002,137,3.002,138,4.657,799,5.716,839,5.565,840,5.111,863,5.111,864,5.111,865,5.817,866,5.817]],["title/classes/FilesService.html",[0,0.264,839,2.787]],["body/classes/FilesService.html",[0,0.271,2,0.665,3,0.127,4,0.115,5,0.159,9,0.406,10,1.332,19,0.479,21,1.23,22,0.011,23,0.913,24,0.413,25,1.096,34,1.576,42,0.15,49,0.127,77,0.007,78,0.007,116,1.989,259,2.59,267,3.117,280,5.627,676,4.462,801,5.246,802,5.246,803,5.246,804,5.246,805,5.246,806,7.25,812,5.246,818,5.246,825,5.246,826,4.414,839,3.891,841,3.871,842,3.871,867,3.871,868,4.405,869,4.405,870,4.405,871,4.405,872,6.773,873,6.773,874,6.773,875,6.773,876,6.773,877,6.773,878,4.405]],["title/classes/GetAllConversationDto.html",[0,0.264,521,2.642]],["body/classes/GetAllConversationDto.html",[0,0.469,2,0.846,3,0.161,4,0.146,5,0.132,9,0.517,19,0.37,22,0.01,24,0.397,42,0.238,49,0.201,77,0.008,78,0.008,85,1.782,100,0.97,105,1.639,222,1.51,276,2.729,279,3.168,403,2.42,444,1.882,461,3.006,463,2.646,464,1.685,473,3.11,521,4.7,526,3.654,620,3.149,621,3.149,622,3.006,685,4.107,686,4.315,687,4.144,696,3.654,879,5.579,880,5.607]],["title/classes/GetAllPostOfUserDto.html",[0,0.264,881,2.957]],["body/classes/GetAllPostOfUserDto.html",[0,0.454,2,0.924,3,0.176,4,0.16,5,0.144,9,0.565,19,0.404,22,0.01,24,0.348,42,0.209,49,0.176,77,0.009,78,0.009,85,1.946,100,0.897,279,3.293,444,1.985,451,4.232,461,3.172,463,2.792,464,1.84,674,3.989,700,4.889,881,5.096,882,6.476]],["title/classes/GetOneConversationDto.html",[0,0.264,526,2.787]],["body/classes/GetOneConversationDto.html",[0,0.467,2,0.839,3,0.16,4,0.145,5,0.13,9,0.513,19,0.367,22,0.01,24,0.395,42,0.237,49,0.199,77,0.008,78,0.008,85,1.766,100,0.966,105,1.625,222,1.871,276,2.714,279,3.155,403,2.406,444,1.871,461,2.99,463,2.631,464,1.67,473,3.093,521,4.903,526,4.527,620,3.121,621,3.121,622,2.99,685,4.084,686,4.291,687,4.107,688,4.883,689,4.883,696,3.622,879,4.439]],["title/classes/GetUserProfileByEmailNameDto.html",[0,0.264,883,2.957]],["body/classes/GetUserProfileByEmailNameDto.html",[0,0.365,2,0.895,3,0.17,4,0.155,5,0.139,9,0.547,19,0.477,22,0.01,24,0.411,42,0.246,49,0.17,77,0.009,78,0.009,100,0.988,105,1.733,222,1.597,372,4.585,409,4.817,444,1.947,694,3.485,883,4.997,884,6.853,885,5.208,886,5.927,887,5.927,888,3.863,889,5.927]],["title/classes/HttpExceptionFilter.html",[0,0.264,890,3.416]],["body/classes/HttpExceptionFilter.html",[0,0.327,2,0.801,3,0.152,4,0.138,5,0.124,7,2.636,8,6.517,9,0.489,10,1.504,11,6.517,19,0.35,21,0.899,22,0.01,23,0.667,24,0.302,25,0.801,27,5.927,28,6.235,30,6.517,31,6.859,33,2.446,34,1.152,35,3.457,39,2.479,40,3.788,42,0.23,44,0.825,48,2.853,49,0.152,51,2.784,52,4.661,53,4.661,54,4.661,55,4.661,66,4.661,69,4.661,70,4.661,71,2.283,72,4.661,74,3.668,75,4.661,77,0.008,78,0.008,115,5.927,890,5.388,891,4.661,892,5.305,893,5.305,894,5.305]],["title/interfaces/ISwaggerOptions.html",[895,2.787,896,3.161]],["body/interfaces/ISwaggerOptions.html",[3,0.122,4,0.111,5,0.1,9,0.392,22,0.011,24,0.426,25,1.251,49,0.122,77,0.007,78,0.007,83,3.274,100,0.81,120,3.701,169,3.186,190,4.657,259,2.502,444,1.571,537,3.8,895,2.773,896,4.309,897,3.739,898,7.156,899,7.156,900,7.156,901,8.074,902,6.803,903,4.164,904,6.288,905,5.831,906,5.831,907,5.831,908,5.967,909,5.831,910,5.831,911,5.831,912,5.831,913,5.123,914,7.156,915,5.831,916,5.123,917,5.831,918,5.123,919,5.831,920,4.309,921,2.628,922,5.831,923,5.831,924,5.123,925,5.123,926,5.831,927,5.123,928,5.845,929,5.845]],["title/modules/InterceptorModule.html",[118,1.671,128,2.957]],["body/modules/InterceptorModule.html",[0,0.365,3,0.17,4,0.155,5,0.139,22,0.011,42,0.277,44,0.921,49,0.17,77,0.009,78,0.009,118,2.824,120,2.834,128,4.997,137,3.059,146,4.098,186,6.351,187,6.351,930,5.927,931,7.799,932,5.342,933,5.927,934,4.997,935,5.927]],["title/injectables/LoggerContextMiddleware.html",[157,3.161,203,0.904]],["body/injectables/LoggerContextMiddleware.html",[0,0.335,3,0.156,4,0.142,5,0.128,7,2.127,9,0.502,10,1.529,19,0.359,21,0.922,22,0.01,23,0.684,24,0.39,25,0.822,34,1.182,35,5.135,39,2.896,40,4.425,42,0.234,44,0.846,48,2.928,49,0.156,77,0.008,78,0.008,116,1.427,157,5.068,203,1.449,204,2.062,771,4.867,787,5.068,789,6.025,790,6.924,793,5.068,794,6.025,908,4.023,936,6.025,937,4.784,938,5.444,939,5.444,940,5.444]],["title/classes/LoggerModule.html",[0,0.264,163,3.161]],["body/classes/LoggerModule.html",[0,0.352,2,0.862,3,0.164,4,0.149,5,0.134,9,0.527,10,1.575,14,5.303,18,4.738,19,0.377,22,0.011,34,1.24,42,0.261,44,0.888,49,0.164,51,2.037,77,0.008,78,0.008,116,1.497,118,2.231,137,2.947,163,5.669,941,5.017,942,8.015,943,5.71,944,7.671,945,5.643,946,5.71,947,5.71,948,7.671,949,5.017]],["title/injectables/LoggerService.html",[18,2.642,203,0.904]],["body/injectables/LoggerService.html",[0,0.236,3,0.11,4,0.1,5,0.09,9,0.354,10,1.21,12,3.888,18,3.351,19,0.508,21,1.27,22,0.011,23,0.942,24,0.438,25,1.188,26,4.102,29,2.335,34,1.627,35,4.884,42,0.131,44,0.596,49,0.11,58,4.143,77,0.006,78,0.006,83,4.922,100,1.069,203,1.146,204,1.453,222,1.461,444,1.461,706,3.583,950,3.371,951,5.425,952,5.425,953,5.425,954,5.425,955,5.425,956,5.425,957,3.836,958,5.425,959,6.842,960,3.836,961,5.425,962,3.836,963,5.425,964,3.836,965,5.425,966,3.836,967,5.425,968,3.836,969,3.836,970,5.425,971,3.836,972,6.294,973,5.425,974,3.836,975,3.836,976,3.836,977,3.836,978,3.836]],["title/injectables/LoggingInterceptor.html",[203,0.904,932,3.161]],["body/injectables/LoggingInterceptor.html",[0,0.332,3,0.155,4,0.14,5,0.126,7,2.103,9,0.496,10,1.518,19,0.355,21,0.912,22,0.01,23,0.676,24,0.306,25,0.812,34,1.168,42,0.254,44,0.836,49,0.155,51,1.92,77,0.008,78,0.008,116,1.411,203,1.438,204,2.039,217,4.614,219,3.164,769,4.706,770,5.031,771,4.847,772,5.425,774,5.162,775,4.706,778,3.507,779,4.728,932,5.031,979,4.728,980,5.381,981,5.381,982,3.977,983,5.381,984,5.381,985,5.381,986,5.381,987,5.981,988,5.381,989,5.381,990,5.381]],["title/classes/LoginDto.html",[0,0.264,287,2.642]],["body/classes/LoginDto.html",[0,0.415,2,0.799,3,0.152,4,0.138,5,0.124,9,0.488,19,0.444,22,0.01,24,0.443,42,0.23,49,0.152,77,0.008,78,0.008,85,2.14,90,2.55,100,1.031,105,1.547,287,4.159,304,4.576,372,4.355,444,1.814,461,3.188,463,2.551,464,1.59,473,3.298,487,4.817,622,3.356,646,4.976,991,4.648,992,4.225,993,6.228,994,5.378,995,5.29,996,4.648,997,5.378,998,5.29]],["title/classes/MessagesGateway.html",[0,0.264,999,3.161]],["body/classes/MessagesGateway.html",[0,0.19,2,0.465,3,0.089,4,0.08,5,0.072,9,0.284,10,1.032,16,0.98,19,0.489,21,1.22,22,0.011,23,0.952,24,0.421,25,1.087,34,1.507,42,0.225,49,0.089,50,1.422,51,2.201,58,3.555,60,3.091,77,0.005,78,0.005,85,2.289,100,1.015,111,2.463,116,1.733,177,6.05,267,2.784,291,1.658,389,3.118,444,1.246,506,2.488,519,5.416,664,4.826,667,5.281,716,1.373,903,2.986,999,3.419,1000,2.709,1001,4.879,1002,4.065,1003,4.879,1004,4.065,1005,5.553,1006,4.065,1007,3.083,1008,4.524,1009,4.626,1010,5.553,1011,2.709,1012,7.715,1013,4.626,1014,3.083,1015,2.709,1016,4.626,1017,3.083,1018,2.709,1019,4.626,1020,3.083,1021,2.709,1022,4.626,1023,3.083,1024,3.083,1025,6.17,1026,4.626,1027,3.083,1028,2.709,1029,4.8,1030,4.626,1031,3.083,1032,4.626,1033,3.083,1034,4.626,1035,6.17,1036,2.709,1037,2.709,1038,2.709,1039,2.463,1040,2.709,1041,5.553,1042,3.083,1043,3.083,1044,5.553,1045,3.083,1046,3.083,1047,3.083,1048,3.083,1049,3.083,1050,3.083,1051,3.083,1052,3.083,1053,5.131,1054,3.083,1055,4.626,1056,3.083,1057,3.083]],["title/modules/MessagesModule.html",[118,1.671,129,2.957]],["body/modules/MessagesModule.html",[0,0.364,3,0.17,4,0.154,5,0.139,22,0.01,42,0.265,44,0.918,49,0.17,77,0.009,78,0.009,118,2.819,120,2.825,121,3.581,129,5.85,133,4.051,134,3.318,135,3.05,137,3.724,999,5.332,1008,5.514,1037,5.192,1058,5.192,1059,5.192,1060,5.909,1061,5.909]],["title/injectables/MessagesService.html",[203,0.904,1008,2.787]],["body/injectables/MessagesService.html",[0,0.173,3,0.08,4,0.073,5,0.066,9,0.258,10,0.959,19,0.46,21,1.133,22,0.011,23,0.946,24,0.396,25,1.01,34,1.452,42,0.178,44,0.435,49,0.08,51,0.999,58,2.816,77,0.005,78,0.005,92,3.596,94,3.179,95,3.436,100,1.039,116,1.754,203,0.909,204,1.061,267,1.924,291,1.507,403,2.607,444,1.159,448,3.598,471,3.408,490,4.183,506,1.507,519,5.097,593,2.462,594,3.87,664,4.54,667,5.344,920,2.07,921,1.73,1001,4.601,1002,3.78,1003,3.78,1004,3.78,1006,3.78,1008,2.803,1011,2.462,1015,3.78,1018,3.78,1021,3.78,1028,3.78,1029,4.382,1062,2.462,1063,4.302,1064,7.656,1065,2.802,1066,2.802,1067,4.302,1068,2.802,1069,2.802,1070,2.802,1071,2.802,1072,5.569,1073,4.302,1074,4.302,1075,3.436,1076,3.78,1077,4.302,1078,4.302,1079,4.302,1080,2.802,1081,5.875,1082,6.967,1083,2.802,1084,2.802,1085,2.802,1086,2.802,1087,2.802,1088,2.802,1089,2.802,1090,2.802,1091,4.302,1092,2.802,1093,4.302,1094,4.302,1095,2.802,1096,2.802,1097,2.802,1098,2.802,1099,2.802,1100,2.802,1101,2.802,1102,2.802]],["title/classes/PaginationDto.html",[0,0.264,1103,2.957]],["body/classes/PaginationDto.html",[0,0.406,2,0.772,3,0.147,4,0.133,5,0.12,9,0.472,19,0.481,22,0.01,24,0.464,42,0.225,49,0.147,77,0.008,78,0.008,85,2.318,90,2.155,92,3.402,100,1.024,105,1.496,444,1.775,453,3.975,463,2.917,464,1.538,473,3.429,517,5.041,622,3.512,631,4.871,1103,4.557,1104,4.496,1105,7.292,1106,7.292,1107,7.292,1108,5.116,1109,5.116,1110,7.702,1111,6.591,1112,5.116]],["title/injectables/ParseIntPipe.html",[203,0.904,1113,3.416]],["body/injectables/ParseIntPipe.html",[0,0.34,3,0.159,4,0.144,5,0.13,7,2.158,9,0.51,10,1.543,19,0.365,21,0.936,22,0.01,23,0.694,24,0.314,25,0.834,34,1.199,42,0.188,44,0.859,49,0.159,51,1.971,71,2.378,77,0.008,78,0.008,100,0.92,116,1.448,203,1.462,204,2.093,267,2.777,413,3.819,506,2.971,708,2.46,830,4.413,921,3.412,1113,5.528,1114,6.081,1115,4.854,1116,5.528,1117,6.081,1118,6.036,1119,6.96,1120,5.525,1121,6.081,1122,6.921,1123,5.525,1124,5.525,1125,4.854,1126,4.854]],["title/classes/Post.html",[0,0.264,307,2.402]],["body/classes/Post.html",[0,0.414,2,1.014,3,0.193,4,0.175,5,0.158,22,0.01,49,0.193,77,0.009,78,0.009,307,4.372,1127,5.9]],["title/controllers/PostsController.html",[79,2.045,1128,3.161]],["body/controllers/PostsController.html",[0,0.128,3,0.06,4,0.054,5,0.049,9,0.191,10,0.755,12,2.092,19,0.465,21,1.193,22,0.011,23,0.885,24,0.4,25,1.063,34,1.528,42,0.2,43,1.218,44,0.322,49,0.06,50,0.955,71,2.525,77,0.004,78,0.004,79,0.991,81,0.955,83,1.164,85,2.238,90,2.459,98,0.785,100,0.814,101,1.35,102,4.682,104,1.35,105,0.606,108,3.474,112,2.207,113,4.588,116,1.846,267,3.08,276,3.192,279,1.41,291,4.136,295,1.619,303,3.232,306,1.531,307,4.432,308,1.655,310,4.621,312,2.705,313,2.341,314,2.341,315,2.341,316,4.967,326,5.495,328,1.433,331,1.35,333,1.433,334,1.35,338,1.655,403,1.718,445,2.916,503,5.156,506,3.786,510,4.041,511,4.337,546,1.655,547,1.655,552,1.433,613,3.429,672,3.063,682,3.429,697,3.429,809,4.804,881,3.429,1128,2.503,1129,1.821,1130,5.441,1131,2.976,1132,2.976,1133,2.976,1134,2.976,1135,2.976,1136,2.976,1137,2.976,1138,2.976,1139,2.976,1140,2.976,1141,2.976,1142,1.821,1143,2.072,1144,3.386,1145,5.868,1146,2.072,1147,1.821,1148,2.072,1149,2.072,1150,3.386,1151,2.072,1152,1.821,1153,2.072,1154,2.072,1155,1.821,1156,2.072,1157,2.072,1158,1.821,1159,2.072,1160,2.976,1161,2.072,1162,1.821,1163,2.072,1164,2.072,1165,1.821,1166,2.072,1167,2.072,1168,1.821,1169,2.072,1170,2.072,1171,1.821,1172,3.232,1173,2.072,1174,3.386,1175,2.072,1176,1.821,1177,3.429,1178,2.072,1179,2.072,1180,1.821,1181,3.232,1182,2.072,1183,2.072,1184,3.773,1185,2.799,1186,1.821,1187,2.072,1188,1.821,1189,2.072,1190,2.072,1191,2.072,1192,2.072,1193,2.072,1194,2.072,1195,2.072,1196,2.072,1197,2.072,1198,2.072,1199,2.072,1200,2.072,1201,2.072,1202,2.072,1203,2.072,1204,2.072,1205,2.072,1206,2.072,1207,2.072,1208,2.072,1209,2.072,1210,2.072,1211,2.072,1212,2.072,1213,1.821,1214,2.072,1215,2.072,1216,2.072,1217,2.072,1218,2.072,1219,2.072,1220,2.072,1221,2.072,1222,2.072,1223,2.072]],["title/modules/PostsModule.html",[118,1.671,130,2.957]],["body/modules/PostsModule.html",[0,0.331,3,0.154,4,0.14,5,0.126,22,0.01,42,0.276,44,0.834,49,0.154,77,0.008,78,0.008,81,3.133,118,2.655,120,2.565,121,3.373,130,5.969,131,4.639,132,5.103,133,3.816,134,3.013,135,2.77,137,3.507,138,4.428,579,4.715,580,4.715,1128,5.511,1185,5.384,1186,4.715,1224,4.715,1225,5.366,1226,4.715,1227,5.366,1228,5.366]],["title/injectables/PostsService.html",[203,0.904,1185,2.787]],["body/injectables/PostsService.html",[0,0.119,3,0.055,4,0.05,5,0.045,9,0.178,10,0.711,16,0.612,19,0.464,21,1.191,22,0.011,23,0.9,24,0.407,25,1.061,34,1.493,42,0.162,44,0.299,49,0.055,50,0.888,51,2.321,71,3.025,77,0.004,78,0.004,90,1.551,93,2.826,98,2.145,100,0.792,116,2.055,169,3.434,203,0.673,204,0.729,267,3.051,279,2.188,291,3.499,295,1.524,307,3.18,368,3.046,383,0.857,389,4.248,403,2.62,407,2.546,412,2.398,415,1.691,424,2.356,445,3.526,446,2.801,448,1.714,469,2.546,476,1.423,506,3.699,537,3.908,582,1.423,592,1.691,594,1.423,598,2.801,603,3.584,604,4.808,611,2.801,613,3.279,672,2.929,675,3.916,676,2.788,677,3.505,682,3.279,697,3.279,708,0.857,712,0.857,798,4.618,881,3.279,1131,2.801,1132,2.801,1133,2.801,1134,2.801,1135,2.801,1136,2.801,1137,2.801,1138,2.801,1139,2.801,1140,2.801,1141,2.801,1142,2.801,1147,2.801,1152,2.801,1155,2.801,1158,2.801,1160,1.691,1162,2.801,1165,2.801,1168,2.801,1171,2.801,1172,3.091,1176,2.801,1177,3.279,1180,2.801,1181,3.091,1185,2.077,1188,1.691,1213,1.691,1229,1.691,1230,1.925,1231,1.925,1232,1.925,1233,1.925,1234,1.925,1235,1.925,1236,1.925,1237,1.925,1238,1.925,1239,1.925,1240,1.925,1241,1.925,1242,3.187,1243,4.743,1244,1.925,1245,3.187,1246,3.187,1247,1.925,1248,1.925,1249,2.801,1250,4.079,1251,3.187,1252,1.925,1253,4.079,1254,1.925,1255,4.079,1256,1.925,1257,1.925,1258,1.691,1259,1.925,1260,5.996,1261,3.187,1262,1.925,1263,1.925,1264,1.925,1265,1.925,1266,1.925,1267,3.187,1268,1.925,1269,1.925,1270,1.925,1271,1.925,1272,1.925,1273,3.187,1274,1.925,1275,3.187,1276,1.925,1277,3.187,1278,1.925]],["title/modules/PrismaModule.html",[118,1.671,131,2.402]],["body/modules/PrismaModule.html",[0,0.35,3,0.163,4,0.148,5,0.133,22,0.01,42,0.261,44,0.882,49,0.163,77,0.008,78,0.008,118,2.75,120,2.713,121,3.493,131,4.77,133,3.952,134,3.187,135,2.929,137,3.633,154,6.184,155,3.699,368,4.731,916,6.184,949,6.184,1279,4.987,1280,4.987,1281,4.987,1282,5.675,1283,5.675]],["title/injectables/PrismaService.html",[203,0.904,368,2.3]],["body/injectables/PrismaService.html",[0,0.3,3,0.14,4,0.127,5,0.114,7,1.905,9,0.45,10,1.425,16,2.265,19,0.499,21,0.826,22,0.011,23,0.613,24,0.277,25,0.736,34,1.547,42,0.218,44,0.758,49,0.14,77,0.008,78,0.008,203,1.35,204,1.847,222,1.721,224,3.371,267,3.123,368,3.436,389,4.001,1284,4.285,1285,7.125,1286,6.389,1287,8.054,1288,8.054,1289,4.876,1290,6.389,1291,6.039,1292,4.876,1293,3.895,1294,4.876,1295,4.876,1296,3.895,1297,4.876,1298,4.285,1299,4.721,1300,4.876,1301,4.876,1302,4.876,1303,4.876,1304,4.876,1305,4.876]],["title/classes/ReactionsPost.html",[0,0.264,1172,2.787]],["body/classes/ReactionsPost.html",[0,0.448,2,0.768,3,0.146,4,0.133,5,0.119,9,0.469,19,0.48,22,0.01,24,0.414,42,0.248,49,0.189,77,0.008,78,0.008,85,2.312,90,1.664,100,1.033,105,1.488,222,1.371,295,2.433,444,1.769,445,4.519,451,4.541,453,3.39,460,4.064,461,3.424,463,2.911,464,1.529,672,3.143,674,3.316,675,3.518,676,2.992,677,3.761,694,2.992,1172,4.28,1181,3.316,1306,6.139,1307,6.391,1308,6.391,1309,5.089,1310,5.089,1311,5.089,1312,5.089,1313,5.246,1314,4.471,1315,4.471]],["title/interfaces/Response.html",[40,2.402,895,2.787]],["body/interfaces/Response.html",[0,0.347,3,0.162,4,0.147,5,0.132,7,2.197,9,0.519,22,0.011,24,0.32,40,3.93,42,0.26,44,0.874,49,0.201,77,0.008,78,0.008,93,4.41,116,1.474,203,1.479,217,4.115,219,3.307,259,3.307,444,1.885,769,3.888,771,3.474,772,4.838,774,4.838,775,4.838,778,3.665,895,3.665,934,3.888,982,4.156,1316,4.492,1317,6.694,1318,4.942,1319,4.942]],["title/guards/RolesGuard.html",[1320,3.416,1321,3.416]],["body/guards/RolesGuard.html",[0,0.302,3,0.141,4,0.128,5,0.115,7,1.915,9,0.452,10,1.43,16,1.558,19,0.423,21,1.086,22,0.011,23,0.806,24,0.365,25,0.968,34,1.064,39,1.801,42,0.243,44,0.762,49,0.141,50,2.26,51,2.703,77,0.008,78,0.008,116,1.873,146,3.389,169,2.182,184,6.442,203,1.354,213,6.657,214,4.307,216,5.633,217,4.455,219,2.882,239,4.307,240,4.307,276,2.505,323,4.307,480,2.636,543,4.178,903,3.447,1321,5.12,1322,4.307,1323,4.902,1324,4.902,1325,4.902,1326,6.411,1327,4.902,1328,4.307,1329,4.307,1330,6.411,1331,4.902,1332,4.902,1333,4.902,1334,4.902]],["title/classes/RtGuard.html",[0,0.264,322,3.161]],["body/classes/RtGuard.html",[0,0.39,2,0.955,3,0.182,4,0.165,5,0.149,16,2.55,19,0.418,22,0.01,42,0.216,49,0.182,77,0.009,78,0.009,220,5.561,221,4.375,222,1.705,223,5.561,224,4.375,322,5.557,1053,4.677,1335,5.561,1336,6.328]],["title/injectables/RtStrategy.html",[203,0.904,357,2.957]],["body/injectables/RtStrategy.html",[0,0.307,3,0.143,4,0.13,5,0.117,9,0.459,10,1.445,12,3.076,16,2.059,19,0.427,21,1.097,22,0.011,23,0.814,24,0.368,25,0.978,34,1.081,39,2.801,42,0.269,44,0.774,48,2.678,49,0.143,51,1.776,77,0.008,78,0.008,116,1.306,155,3.245,169,2.217,203,1.369,204,1.887,221,3.443,222,1.341,224,3.443,244,3.343,245,4.376,246,5.634,248,4.787,252,6.698,253,3.978,254,4.376,255,4.376,256,4.376,257,3.68,258,4.478,260,4.376,261,4.376,262,4.376,263,4.376,269,5.174,357,4.478,388,4.376,793,3.68,1053,3.68,1337,4.376,1338,4.98,1339,6.477,1340,4.98,1341,4.98,1342,4.98,1343,4.98,1344,4.98]],["title/classes/SignupDto.html",[0,0.264,293,2.957]],["body/classes/SignupDto.html",[0,0.337,2,0.585,3,0.111,4,0.101,5,0.091,9,0.357,19,0.418,22,0.01,23,0.864,24,0.428,42,0.216,49,0.111,58,4.463,77,0.006,78,0.006,85,2.012,90,2.247,100,1.01,105,1.133,244,2,293,3.778,304,4.955,372,3.721,409,4.476,444,1.472,453,3.548,461,2.958,463,2.07,464,1.165,473,3.06,487,4.246,511,5.557,621,2.176,622,3.236,630,5.49,631,4.038,633,5.49,635,3.405,636,4.365,640,3.405,641,4.802,642,6.368,644,3.405,645,4.365,646,4.038,647,3.096,648,3.096,649,3.096,650,2.68,651,2.68,652,3.405,653,3.096,654,3.096,655,5.49,656,4.802,657,3.405,992,3.096,993,5.49,994,4.365,997,3.096,1345,3.405,1346,3.876,1347,3.876,1348,3.876,1349,3.876,1350,5.465,1351,3.876,1352,5.465,1353,5.465,1354,5.465,1355,5.465,1356,5.465,1357,3.876,1358,3.876,1359,3.876,1360,3.876,1361,3.876,1362,3.876,1363,3.876,1364,3.876]],["title/injectables/TimeoutInterceptor.html",[203,0.904,1365,3.416]],["body/injectables/TimeoutInterceptor.html",[0,0.347,3,0.162,4,0.147,5,0.132,7,2.197,9,0.519,10,1.561,19,0.371,21,0.953,22,0.01,23,0.707,24,0.32,25,0.849,34,1.221,42,0.26,44,0.874,49,0.162,77,0.008,78,0.008,116,1.474,203,1.479,204,2.131,217,4.687,219,3.307,728,2.689,769,4.838,770,5.172,771,4.706,772,5.512,774,5.267,775,4.838,778,3.665,982,4.156,1365,5.59,1366,4.942,1367,5.624,1368,5.624]],["title/injectables/TransformInterceptor.html",[203,0.904,934,2.957]],["body/injectables/TransformInterceptor.html",[0,0.334,3,0.155,4,0.141,5,0.127,7,2.115,9,0.499,10,1.524,19,0.357,21,0.917,22,0.011,23,0.68,24,0.308,25,0.817,34,1.175,40,3.039,42,0.255,44,0.841,49,0.196,77,0.008,78,0.008,93,3.674,116,1.419,203,1.444,204,2.05,217,4.623,219,4.017,769,5.176,770,4,771,4.624,772,5.436,774,5.176,775,4.723,778,3.527,895,3.527,934,4.723,982,4,1316,4.323,1317,4.756,1318,4.756,1319,4.756,1369,5.413]],["title/classes/UpdateCommentTextDto.html",[0,0.264,1177,2.957]],["body/classes/UpdateCommentTextDto.html",[0,0.39,2,0.955,3,0.182,4,0.165,5,0.149,22,0.01,42,0.256,49,0.182,77,0.009,78,0.009,105,1.85,222,1.705,403,2.192,442,4.124,448,3.403,615,4.677,616,5.055,617,5.055,618,5.055,1177,5.198,1370,5.561]],["title/classes/UpdateConversationDto.html",[0,0.264,531,2.515]],["body/classes/UpdateConversationDto.html",[0,0.48,2,0.721,3,0.137,4,0.125,5,0.112,9,0.441,19,0.466,22,0.01,23,0.887,24,0.426,25,1.209,42,0.24,49,0.215,77,0.007,78,0.007,90,2.306,100,1.052,105,1.396,222,2.02,276,1.866,279,1.989,295,2.283,403,1.655,444,1.698,461,2.713,463,2.388,464,1.436,467,2.95,468,3.641,470,3.539,471,3.389,473,2.806,500,4.212,514,2.808,531,3.706,535,2.808,540,2.808,620,2.682,622,2.056,685,2.808,686,2.95,690,3.302,691,5.186,694,4.41,695,3.53,696,3.113,1371,4.777,1372,4.777,1373,4.777]],["title/classes/UpdateMembersConversationDto.html",[0,0.264,535,2.515]],["body/classes/UpdateMembersConversationDto.html",[0,0.489,2,0.764,3,0.145,4,0.132,5,0.119,9,0.467,19,0.334,22,0.011,23,0.636,24,0.372,42,0.247,49,0.22,77,0.008,78,0.008,90,1.655,100,1.048,105,1.48,222,2.066,276,1.977,279,2.107,295,2.419,403,1.753,444,1.763,461,2.817,463,2.479,464,1.521,467,3.126,468,2.612,470,3.675,471,4.125,473,2.914,500,4.307,514,2.976,531,2.976,535,3.848,540,2.976,620,2.842,622,2.178,685,2.976,686,3.126,690,3.499,691,4.525,694,4.51,695,3.74,696,3.298,1374,5.061]],["title/classes/UpdateMessageDto.html",[0,0.264,1029,2.957]],["body/classes/UpdateMessageDto.html",[0,0.361,2,0.884,3,0.168,4,0.153,5,0.137,9,0.54,19,0.473,22,0.01,24,0.408,42,0.244,49,0.168,77,0.008,78,0.008,100,0.984,222,1.577,295,2.798,403,2.686,444,1.932,519,5.362,664,4.674,666,4.675,670,5.143,694,4.217,1029,4.959,1375,6.815,1376,5.853,1377,5.143,1378,4.326,1379,5.853]],["title/classes/UpdatePasswordDto.html",[0,0.264,301,2.957]],["body/classes/UpdatePasswordDto.html",[0,0.394,2,0.738,3,0.14,4,0.127,5,0.115,9,0.451,19,0.471,22,0.01,24,0.458,42,0.218,49,0.14,77,0.008,78,0.008,85,2.268,90,2.635,100,1.049,105,1.429,301,4.424,372,4.195,444,1.724,461,3.258,463,2.703,464,1.469,473,3.37,487,4.978,622,3.469,646,4.73,992,3.905,993,6.438,994,5.112,996,5.623,997,6.046,1380,4.296,1381,7.134,1382,7.134,1383,4.889,1384,4.889,1385,4.889]],["title/classes/UpdatePostDto.html",[0,0.264,1181,2.787]],["body/classes/UpdatePostDto.html",[0,0.439,2,0.736,3,0.14,4,0.127,5,0.114,9,0.45,19,0.518,22,0.01,24,0.446,25,1.216,42,0.243,49,0.183,77,0.008,78,0.008,85,1.55,90,2.33,100,1.049,105,1.426,222,1.313,295,2.331,444,1.721,445,4.446,451,3.371,453,2.517,460,3.895,461,3.378,463,2.864,464,1.466,672,3.012,674,3.178,675,4.926,676,4.189,677,5.266,679,4.285,694,2.867,700,3.895,1172,3.178,1181,4.163,1306,6.433,1307,4.285,1308,4.285,1313,5.103,1314,4.285,1315,4.285,1386,4.876,1387,4.876,1388,4.876]],["title/classes/UpdateRolesConversationDto.html",[0,0.264,540,2.515]],["body/classes/UpdateRolesConversationDto.html",[0,0.483,2,0.732,3,0.139,4,0.126,5,0.114,9,0.447,19,0.469,22,0.011,23,0.61,24,0.429,42,0.242,49,0.217,77,0.008,78,0.008,90,1.586,100,1.054,105,1.418,222,2.033,276,1.895,279,2.02,295,2.319,403,1.68,444,1.715,461,2.74,463,2.412,464,1.458,467,4.39,468,2.504,470,4.237,471,4.058,473,2.835,500,4.237,514,2.852,531,2.852,535,2.852,540,3.743,620,2.724,622,2.088,685,2.852,686,2.996,690,3.354,691,5.217,694,4.437,695,3.585,696,3.161,1389,4.851,1390,4.851,1391,4.851]],["title/classes/UserAvatarDto.html",[0,0.264,1392,2.957]],["body/classes/UserAvatarDto.html",[0,0.439,2,0.873,3,0.166,4,0.151,5,0.136,9,0.533,19,0.382,22,0.01,24,0.405,42,0.243,49,0.166,77,0.008,78,0.008,85,1.837,92,3.674,100,0.98,105,1.69,444,1.917,463,2.697,464,1.737,468,4.266,473,3.169,621,3.246,622,3.464,1299,4.272,1392,4.921,1393,5.686,1394,5.079,1395,5.079,1396,5.781]],["title/classes/UserCoverDto.html",[0,0.264,1397,2.957]],["body/classes/UserCoverDto.html",[0,0.439,2,0.873,3,0.166,4,0.151,5,0.136,9,0.533,19,0.382,22,0.01,24,0.405,42,0.243,49,0.166,77,0.008,78,0.008,85,1.837,92,3.674,100,0.98,105,1.69,444,1.917,463,2.697,464,1.737,473,3.169,621,3.246,622,3.464,814,5.715,1299,4.272,1393,5.686,1395,5.079,1397,4.921,1398,5.079,1399,5.781]],["title/classes/UserProfileDto.html",[0,0.264,888,2.787]],["body/classes/UserProfileDto.html",[0,0.301,2,0.379,3,0.072,4,0.065,5,0.059,9,0.232,19,0.491,22,0.011,23,0.804,24,0.472,42,0.189,49,0.072,58,4.39,77,0.005,78,0.005,85,2.366,90,1.292,92,3.454,94,4.094,100,1.029,105,0.734,244,1.296,277,2.207,412,2.323,440,4.293,444,1.064,453,3.906,459,2.732,463,2.626,464,0.755,468,3.454,473,3.369,476,3.61,621,4.099,622,3.599,623,2.207,630,3.156,631,2.921,633,5.109,636,3.156,645,2.006,647,2.006,648,2.006,649,2.006,653,2.006,654,2.006,655,5.109,685,2.323,796,1.856,814,4.627,888,2.575,1075,3.156,1076,2.207,1299,2.921,1313,3.902,1400,6.649,1401,2.207,1402,6.692,1403,4.885,1404,6.692,1405,4.293,1406,4.885,1407,4.885,1408,4.885,1409,4.885,1410,5.293,1411,3.952,1412,3.952,1413,3.952,1414,2.512,1415,5.54,1416,2.512,1417,2.512,1418,3.952,1419,5.54,1420,2.512,1421,2.512,1422,3.952,1423,4.868,1424,6.397,1425,2.512,1426,4.885,1427,2.512,1428,3.952,1429,2.512,1430,2.512,1431,3.952,1432,3.952,1433,2.512,1434,2.512,1435,2.512,1436,2.512,1437,2.512,1438,4.425,1439,2.512,1440,4.885,1441,2.512,1442,2.512,1443,3.952,1444,3.952,1445,2.512,1446,2.512,1447,2.512,1448,2.512,1449,2.512,1450,2.512,1451,2.512,1452,1.856,1453,3.952,1454,2.512,1455,1.856,1456,1.856,1457,1.856,1458,2.512,1459,2.512,1460,2.512,1461,3.952,1462,2.207,1463,2.207,1464,2.512,1465,2.512,1466,2.207,1467,2.512,1468,2.512,1469,2.512,1470,2.512,1471,2.207,1472,2.512,1473,2.512,1474,2.512,1475,2.512,1476,2.512]],["title/controllers/UsersController.html",[79,2.045,1477,3.161]],["body/controllers/UsersController.html",[0,0.139,3,0.065,4,0.059,5,0.053,9,0.208,10,0.809,19,0.44,21,1.13,22,0.011,23,0.838,24,0.379,25,1.007,34,1.448,42,0.227,43,1.325,44,0.35,49,0.065,50,1.039,71,0.97,77,0.004,78,0.004,79,1.078,81,1.039,83,1.266,85,2.12,90,2.405,98,0.854,100,0.961,101,1.469,102,4.486,104,1.469,105,0.659,108,3.281,112,4.347,113,4.347,116,1.749,189,1.559,267,3.013,276,3.307,279,3.063,287,3.219,291,4.338,303,3.976,304,2.24,306,4.221,308,1.801,310,4.611,313,2.507,314,2.507,315,2.507,316,4.759,317,2.896,326,5.361,327,1.801,328,1.559,331,1.469,333,1.559,334,1.469,372,3.064,403,2.447,409,2.24,468,1.872,506,3.587,510,4.221,516,2.507,537,2.363,543,1.469,546,1.801,547,1.801,552,1.559,814,2.507,815,1.981,821,5.018,883,3.603,888,3.396,1103,3.603,1184,3.186,1392,3.603,1397,3.603,1477,2.68,1478,1.981,1479,3.997,1480,3.186,1481,3.186,1482,3.186,1483,3.186,1484,3.997,1485,3.997,1486,3.997,1487,1.981,1488,2.254,1489,4.873,1490,2.254,1491,1.981,1492,2.254,1493,3.626,1494,2.254,1495,1.981,1496,2.254,1497,2.254,1498,1.981,1499,2.254,1500,2.254,1501,1.981,1502,2.254,1503,2.254,1504,1.981,1505,2.254,1506,4.163,1507,2.254,1508,1.981,1509,2.254,1510,2.254,1511,1.981,1512,2.254,1513,2.254,1514,1.981,1515,2.254,1516,1.981,1517,1.801,1518,2.254,1519,2.254,1520,3.396,1521,1.981,1522,2.254,1523,2.254,1524,2.254,1525,2.254,1526,3.626,1527,2.254,1528,2.254,1529,2.254,1530,2.254,1531,2.254,1532,2.254,1533,2.254,1534,2.254,1535,5.212,1536,2.254,1537,2.254,1538,2.254,1539,2.254,1540,2.254,1541,2.254,1542,2.254,1543,2.254,1544,2.254,1545,2.254]],["title/modules/UsersModule.html",[118,1.671,132,2.642]],["body/modules/UsersModule.html",[0,0.294,3,0.137,4,0.125,5,0.112,10,1.065,19,0.315,21,0.809,22,0.011,23,0.6,24,0.272,25,0.721,34,1.037,35,4.107,42,0.273,44,0.742,49,0.137,74,3.302,77,0.007,78,0.007,81,2.906,108,3.389,118,2.462,120,2.283,121,3.128,125,5.219,131,4.497,132,5.23,133,3.539,134,2.682,135,2.465,137,3.253,138,4.107,139,4.197,140,5.538,141,6.591,143,5.538,189,3.302,190,3.815,191,4.197,194,4.197,359,4.197,784,3.53,785,3.815,1477,5.213,1520,5.219,1521,4.197,1546,4.197,1547,4.777,1548,4.197,1549,4.777,1550,4.777,1551,4.777,1552,4.777,1553,4.777,1554,4.777,1555,4.777]],["title/injectables/UsersService.html",[203,0.904,1520,2.787]],["body/injectables/UsersService.html",[0,0.149,3,0.069,4,0.063,5,0.057,9,0.222,10,0.853,16,0.766,19,0.465,21,1.193,22,0.011,23,0.885,24,0.4,25,1.063,34,1.484,42,0.201,44,0.375,49,0.069,50,1.112,51,2.511,71,2.047,77,0.005,78,0.005,92,1.245,93,2.058,100,0.974,116,1.792,169,3.533,189,1.667,203,0.808,204,0.913,267,3.043,276,2.75,279,3.331,287,3.345,291,4.333,295,1.153,303,3.1,368,3.38,372,3.184,383,1.074,384,1.926,385,1.782,387,2.119,389,4.372,402,3.362,403,2.498,407,3.056,408,2.119,409,3.345,410,2.119,413,3.289,424,3.516,425,3.362,426,4.18,428,2.119,429,2.119,469,3.8,472,4.18,506,3.675,582,1.782,604,3.516,712,1.074,883,3.744,888,3.529,1103,3.744,1392,3.744,1397,3.744,1479,3.362,1480,3.362,1481,3.362,1482,3.362,1483,3.362,1484,3.362,1485,3.362,1486,3.362,1487,3.362,1489,4.325,1491,3.362,1495,3.362,1498,3.362,1501,3.362,1504,3.362,1508,3.362,1511,3.362,1516,2.119,1520,2.494,1556,2.119,1557,2.411,1558,2.411,1559,2.411,1560,2.411,1561,2.411,1562,2.411,1563,2.411,1564,2.411,1565,2.411,1566,3.826,1567,2.411,1568,2.411,1569,4.757,1570,3.826,1571,2.411,1572,3.826,1573,3.826,1574,2.411,1575,2.411,1576,2.411,1577,2.411,1578,2.411,1579,6.285,1580,4.757,1581,4.757,1582,2.411,1583,2.411,1584,2.411]],["title/injectables/ValidationPipe.html",[203,0.904,1585,3.416]],["body/injectables/ValidationPipe.html",[0,0.428,3,0.133,4,0.121,5,0.108,7,1.806,9,0.426,10,1.375,12,4.287,19,0.407,21,1.045,22,0.011,23,0.775,24,0.461,25,0.931,34,1.339,42,0.237,44,0.719,49,0.133,51,2.641,71,1.99,77,0.007,78,0.007,100,0.563,116,1.819,203,1.303,204,1.751,244,2.386,267,2.551,389,2.596,412,2.718,413,3.196,453,2.386,464,1.389,506,2.486,708,2.058,826,3.013,903,3.732,921,4.573,1116,4.926,1117,5.419,1118,5.914,1119,6.506,1121,5.419,1125,4.062,1126,4.062,1378,3.417,1452,3.417,1585,4.926,1586,4.062,1587,6.167,1588,6.167,1589,4.623,1590,7.404,1591,4.623,1592,4.623,1593,4.623,1594,5.419,1595,4.623,1596,4.623,1597,4.623,1598,4.623,1599,4.623]],["title/coverage.html",[1600,4.674]],["body/coverage.html",[0,0.533,1,1.578,5,0.046,6,1.736,18,1.22,22,0.011,24,0.112,26,1.288,40,1.109,71,0.85,77,0.004,78,0.004,79,2.742,80,1.46,82,1.736,106,1.288,108,1.062,149,1.46,157,1.46,163,1.46,202,2.977,203,1.639,205,1.736,212,1.736,242,1.366,243,1.736,265,1.46,266,1.736,276,0.772,287,1.22,293,1.366,301,1.366,307,1.109,318,1.288,320,1.578,321,1.578,322,1.46,357,1.366,364,1.736,368,1.062,385,1.46,386,1.578,412,5.26,442,1.288,443,1.736,465,1.46,466,1.736,488,1.46,489,1.736,500,1.109,508,1.366,514,1.162,517,2.252,521,1.22,526,1.288,531,1.162,535,1.162,540,1.162,548,1.288,581,1.736,613,1.366,614,1.736,615,3.07,619,1.736,620,3.56,650,1.366,651,1.366,664,1.288,665,1.736,666,2.601,672,1.22,673,1.736,674,3.474,682,1.366,683,1.736,684,1.736,691,3.332,697,1.366,698,1.736,701,0.911,702,3.387,717,0.911,719,0.911,721,0.911,723,0.911,726,0.911,729,0.911,732,0.911,734,0.911,737,0.911,741,0.911,742,0.911,767,1.578,768,1.736,784,1.46,785,1.578,786,1.736,799,1.46,800,1.736,836,1.578,837,1.578,838,1.578,839,1.288,867,1.736,879,2.601,881,1.366,882,1.736,883,1.366,884,1.736,885,1.736,888,1.288,890,1.578,891,1.736,895,2.122,896,1.46,897,1.736,908,4.855,932,1.46,934,1.366,936,1.736,937,1.736,941,1.736,945,1.578,950,1.736,979,1.736,991,1.736,999,1.46,1000,1.736,1008,1.288,1029,1.366,1062,1.736,1103,1.366,1104,1.736,1113,1.578,1114,1.736,1115,1.736,1127,1.736,1128,1.46,1129,1.736,1172,1.288,1177,1.366,1181,1.288,1185,1.288,1229,1.736,1284,1.736,1306,2.601,1316,2.601,1320,1.578,1321,1.578,1322,1.736,1335,1.736,1337,1.736,1345,1.736,1365,1.578,1366,1.736,1370,1.736,1375,1.736,1380,1.736,1392,1.366,1393,2.601,1394,1.736,1397,1.366,1398,1.736,1400,1.736,1401,1.736,1455,1.46,1456,1.46,1457,1.46,1477,1.46,1478,1.736,1517,1.578,1520,1.288,1556,1.736,1585,1.578,1586,1.736,1600,1.578,1601,1.46,1602,1.976,1603,1.976,1604,8.248,1605,7.61,1606,2.862,1607,7.61,1608,1.736,1609,8.248,1610,1.736,1611,1.976,1612,1.976,1613,1.736,1614,1.736,1615,5.33,1616,1.736,1617,1.736,1618,3.65,1619,1.736,1620,2.601,1621,1.736,1622,3.65,1623,1.736,1624,1.736,1625,3.257,1626,1.736,1627,1.736,1628,1.736,1629,2.601,1630,2.601,1631,1.578,1632,2.601,1633,2.601,1634,2.601,1635,4.155,1636,4.819,1637,2.862,1638,1.736,1639,1.736,1640,1.736,1641,6.066,1642,4.155,1643,1.736,1644,3.318,1645,1.578,1646,1.736,1647,1.976,1648,3.257,1649,1.976,1650,1.736,1651,1.736,1652,1.976,1653,1.976]],["title/dependencies.html",[121,2.555,1654,3.132]],["body/dependencies.html",[0,0.395,14,3.389,22,0.011,44,0.762,48,2.636,77,0.008,78,0.008,105,1.433,121,2.433,146,3.389,155,3.194,166,4.307,221,3.389,248,3.623,257,4.738,258,4.432,363,3.915,464,1.473,594,3.623,778,3.194,835,5.633,1036,4.307,1038,5.633,1039,3.915,1118,3.915,1296,3.915,1377,4.307,1378,3.623,1452,3.623,1655,4.902,1656,6.411,1657,4.902,1658,4.902,1659,7.863,1660,4.902,1661,6.411,1662,4.902,1663,4.902,1664,6.411,1665,4.902,1666,4.902,1667,4.307,1668,4.902,1669,4.902,1670,4.902,1671,4.307,1672,4.902,1673,4.307,1674,4.307,1675,4.902,1676,4.902,1677,4.307,1678,4.902,1679,4.307,1680,4.902,1681,4.902,1682,4.902,1683,3.915,1684,4.902,1685,4.902,1686,4.902,1687,4.902,1688,4.902,1689,4.902,1690,6.411,1691,4.902,1692,4.307,1693,4.902,1694,4.902]],["title/miscellaneous/enumerations.html",[1695,2.096,1696,4.523]],["body/miscellaneous/enumerations.html",[9,0.608,22,0.01,77,0.009,78,0.009,276,3.01,516,5.327,543,5.021,921,4.759,1695,3.878,1696,5.796,1697,6.596,1698,6.596]],["title/classes/fullNameValidator.html",[0,0.264,1455,3.161]],["body/classes/fullNameValidator.html",[0,0.41,2,0.783,3,0.149,4,0.135,5,0.122,7,2.598,9,0.478,10,1.483,19,0.439,21,1.127,22,0.01,23,0.973,24,0.378,25,1.004,34,1.444,42,0.177,49,0.149,51,1.85,77,0.008,78,0.008,100,0.942,116,1.743,202,3.204,244,3.432,267,1.906,448,2.79,464,1.559,480,2.79,903,3.576,1438,4.143,1455,4.915,1629,4.143,1699,5.074,1700,4.598,1701,4.598,1702,5.757,1703,5.187,1704,5.662,1705,4.915,1706,5.187,1707,4.598,1708,4.143,1709,3.834,1710,3.834,1711,3.586]],["title/miscellaneous/functions.html",[1695,2.096,1712,4.523]],["body/miscellaneous/functions.html",[9,0.424,18,3.797,21,1.371,22,0.01,23,1.017,24,0.46,25,1.221,26,4.512,34,1.503,74,5.324,77,0.007,78,0.007,83,4.149,100,1.051,453,3.173,487,3.797,826,2.998,836,4.91,837,4.91,838,4.91,857,5.401,903,3.306,920,3.4,921,2.842,945,5.53,1291,5.53,1293,3.674,1620,3.674,1622,4.042,1623,5.401,1624,5.401,1626,4.042,1627,5.401,1643,4.042,1644,6.329,1645,3.674,1646,4.042,1650,4.042,1651,6.083,1695,2.705,1712,4.042,1713,4.6,1714,4.6,1715,6.923,1716,4.6,1717,4.042,1718,4.042,1719,4.6,1720,4.6,1721,4.6,1722,4.6,1723,4.6,1724,4.6,1725,4.6,1726,4.6,1727,4.6,1728,4.042,1729,4.6]],["title/classes/imageValidator.html",[0,0.264,1456,3.161]],["body/classes/imageValidator.html",[0,0.397,2,0.746,3,0.142,4,0.129,5,0.116,7,2.518,9,0.456,10,1.437,19,0.425,21,1.092,22,0.011,23,0.901,24,0.366,25,0.973,34,1.399,42,0.168,49,0.142,51,2.299,77,0.008,78,0.008,100,0.96,116,1.689,169,2.2,244,3.701,267,1.816,280,4.455,434,3.651,464,1.485,480,3.465,903,3.465,1456,4.762,1506,5.728,1630,3.946,1631,3.946,1699,4.958,1700,4.455,1701,4.455,1702,5.692,1704,5.588,1707,4.455,1711,3.416,1730,4.941,1731,4.941,1732,4.941,1733,4.341,1734,4.941,1735,7.171,1736,4.941]],["title/index.html",[9,0.329,1737,3.132,1738,3.132]],["body/index.html",[0,0.263,4,0.053,5,0.116,10,0.458,14,2.322,22,0.01,23,0.258,26,1.337,34,0.445,39,0.754,40,1.152,48,1.103,58,2.294,60,0.913,71,2.654,77,0.004,78,0.004,81,0.946,87,3.76,90,1.098,91,3.748,92,1.059,93,1.806,108,1.103,121,1.667,135,1.059,137,1.059,171,1.803,177,1.639,180,2.482,189,2.949,195,1.639,197,3.748,232,2.683,233,1.639,257,1.516,258,2.322,276,2.892,295,2.792,303,3.544,304,2.075,307,3.613,334,1.337,372,1.975,400,1.639,403,2.307,409,1.267,419,1.803,464,0.617,468,1.734,470,1.886,471,1.103,490,2.683,502,5.474,510,4.316,511,1.516,516,2.322,517,3.408,528,2.951,537,2.189,542,2.951,543,1.337,552,1.418,605,1.803,622,1.446,676,2.508,716,0.913,750,2.948,787,1.516,808,5.132,814,1.418,820,1.803,826,1.337,904,1.803,918,2.951,924,1.803,925,4.779,927,1.803,1039,2.683,1053,1.516,1072,3.748,1116,1.639,1130,2.951,1249,1.803,1296,1.639,1298,4.332,1378,1.516,1423,1.803,1438,1.639,1452,1.516,1462,3.748,1463,1.803,1489,3.407,1506,1.639,1514,1.803,1594,3.748,1600,1.639,1601,1.516,1667,1.803,1671,1.803,1673,3.748,1674,2.951,1677,1.803,1679,1.803,1683,5.913,1692,1.803,1739,2.052,1740,1.803,1741,2.951,1742,2.052,1743,3.359,1744,3.359,1745,4.93,1746,2.052,1747,1.803,1748,1.803,1749,2.052,1750,2.052,1751,2.052,1752,2.052,1753,2.052,1754,2.052,1755,2.052,1756,2.052,1757,3.359,1758,2.052,1759,2.052,1760,2.052,1761,2.052,1762,3.359,1763,2.052,1764,3.359,1765,2.052,1766,2.052,1767,2.052,1768,2.052,1769,3.359,1770,2.052,1771,2.052,1772,2.052,1773,2.052,1774,2.052,1775,4.265,1776,2.052,1777,2.052,1778,3.359,1779,2.052,1780,3.359,1781,3.359,1782,2.052,1783,2.052,1784,2.052,1785,2.052,1786,2.052,1787,1.803,1788,2.052,1789,1.803,1790,2.052,1791,2.052,1792,2.052,1793,4.265,1794,2.052,1795,2.052,1796,3.359,1797,1.803,1798,2.052,1799,2.052,1800,2.052,1801,1.803,1802,2.052,1803,2.052,1804,2.052,1805,2.052,1806,2.052,1807,2.052,1808,2.052,1809,3.359,1810,2.052,1811,2.052,1812,2.052,1813,2.052,1814,2.052,1815,2.052,1816,2.052,1817,2.052,1818,2.052,1819,2.052,1820,2.052,1821,2.052,1822,2.052,1823,3.359,1824,2.052,1825,3.359,1826,2.052,1827,2.052,1828,1.803,1829,2.052,1830,3.748,1831,2.052,1832,2.052,1833,2.052,1834,2.052,1835,2.052,1836,2.052,1837,3.359,1838,2.052,1839,2.052,1840,2.052,1841,2.052,1842,2.052,1843,2.052,1844,2.052,1845,2.052,1846,2.052,1847,2.052,1848,2.052,1849,1.803,1850,2.052,1851,2.052,1852,2.052,1853,3.359,1854,2.052,1855,2.052,1856,2.052,1857,2.052,1858,4.332,1859,3.359,1860,2.052,1861,2.052,1862,2.052,1863,2.052,1864,2.052,1865,2.052,1866,2.052,1867,2.052,1868,2.052,1869,2.052,1870,2.052,1871,2.052,1872,5.439,1873,2.052,1874,2.052,1875,2.052,1876,2.052,1877,2.052,1878,2.052,1879,2.052,1880,1.803,1881,1.803,1882,1.803,1883,2.052,1884,2.052,1885,2.052,1886,2.052,1887,1.803,1888,2.052,1889,1.803,1890,2.052,1891,2.052,1892,2.052,1893,2.052,1894,2.052,1895,6.435,1896,3.359,1897,2.052,1898,3.359,1899,4.93,1900,2.052,1901,4.265,1902,4.265,1903,2.052,1904,3.359,1905,3.359,1906,2.052,1907,2.052,1908,2.052,1909,2.052,1910,2.052,1911,5.841,1912,3.359,1913,2.052,1914,3.359,1915,2.052,1916,2.052,1917,2.052,1918,3.748,1919,2.052,1920,2.052,1921,2.052,1922,2.052,1923,2.052,1924,2.052,1925,3.359,1926,3.359,1927,2.052,1928,2.052,1929,2.052,1930,2.683,1931,2.052,1932,2.052,1933,2.052,1934,3.359,1935,2.052,1936,2.052,1937,2.052,1938,2.052,1939,2.052,1940,1.803,1941,2.052,1942,2.052,1943,2.052,1944,2.052,1945,2.052,1946,2.052,1947,2.052,1948,2.052,1949,2.052,1950,2.052,1951,2.052,1952,2.052,1953,2.052,1954,2.052,1955,3.359,1956,3.359,1957,2.052,1958,2.052,1959,1.803,1960,2.052,1961,2.052,1962,2.052,1963,2.052,1964,2.052,1965,2.052,1966,2.052,1967,2.052,1968,3.359,1969,3.359,1970,2.052,1971,2.052,1972,2.052,1973,3.359,1974,2.052,1975,2.052,1976,3.359,1977,2.052,1978,2.052,1979,2.052,1980,2.052,1981,2.052,1982,2.052,1983,2.052,1984,3.359,1985,3.359,1986,3.359,1987,3.359,1988,2.052,1989,2.052,1990,2.052,1991,2.052,1992,2.052,1993,2.482,1994,2.052,1995,2.052,1996,1.803,1997,2.052,1998,1.803]],["title/license.html",[1737,3.132,1738,3.132,1993,2.634]],["body/license.html",[22,0.008,48,2.767,77,0.008,78,0.008,135,2.655,331,3.353,676,3.025,787,4.888,913,4.52,1466,4.52,1601,3.802,1747,4.52,1930,4.109,1993,3.802,1996,6.424,1998,4.52,1999,4.52,2000,4.52,2001,4.109,2002,4.109,2003,6.615,2004,5.145,2005,5.145,2006,5.145,2007,5.145,2008,5.145,2009,5.145,2010,6.615,2011,8.505,2012,5.145,2013,5.145,2014,7.311,2015,5.145,2016,6.615,2017,5.145,2018,5.145,2019,5.145,2020,5.145,2021,5.145,2022,5.145,2023,5.145,2024,5.145,2025,5.145,2026,6.615,2027,5.145,2028,5.145,2029,5.145,2030,5.145,2031,5.145,2032,5.145,2033,5.145,2034,6.615,2035,6.615,2036,5.145,2037,5.145,2038,5.145,2039,5.145,2040,5.145,2041,5.145,2042,5.145,2043,5.145,2044,5.145,2045,5.145,2046,5.145,2047,5.145,2048,5.145,2049,5.145,2050,5.145,2051,5.145,2052,5.145,2053,5.145,2054,5.145,2055,5.145,2056,5.145,2057,5.145,2058,5.145,2059,5.145,2060,5.145,2061,5.145]],["title/modules.html",[120,2.797]],["body/modules.html",[22,0.009,77,0.009,78,0.009,119,4.408,120,2.852,125,3.887,126,4.124,127,4.124,128,4.124,129,4.124,130,4.124,131,3.35,132,3.685,1830,7.612,1849,5.241,2062,8.663,2063,8.663,2064,8.726,2065,5.965]],["title/overview.html",[2066,5.142]],["body/overview.html",[2,0.628,22,0.01,77,0.007,78,0.007,81,1.918,92,2.147,106,4.284,119,6.449,120,1.989,121,2.85,122,3.655,123,3.655,124,3.655,125,5.476,126,5.635,127,5.142,128,4.545,129,5.142,130,5.635,131,4.632,132,5.147,133,3.224,134,2.336,135,2.147,204,1.576,242,4.545,259,2.446,318,4.284,354,3.655,355,3.655,357,4.545,368,4.238,548,4.284,574,3.655,576,3.655,839,4.284,863,3.655,864,3.655,1008,4.284,1058,3.655,1059,3.655,1075,3.323,1185,4.284,1224,3.655,1226,3.655,1279,3.655,1280,3.655,1281,3.655,1320,3.323,1471,3.655,1520,4.284,1546,3.655,1548,3.655,2066,3.655,2067,4.16,2068,4.16,2069,4.16]],["title/classes/passwordValidator.html",[0,0.264,650,2.957]],["body/classes/passwordValidator.html",[0,0.408,2,0.777,3,0.148,4,0.134,5,0.121,7,2.584,9,0.475,10,1.475,19,0.437,21,1.121,22,0.01,23,0.919,24,0.376,25,0.998,34,1.436,42,0.175,49,0.148,51,1.835,77,0.008,78,0.008,100,0.972,116,1.734,202,3.178,244,3.414,267,1.891,304,3.178,448,2.767,464,1.546,480,2.767,650,4.573,903,3.557,1632,4.109,1699,5.055,1700,4.573,1701,4.573,1702,5.746,1704,5.649,1705,4.888,1707,4.573,1709,3.802,1710,3.802,1711,3.557,2070,5.145,2071,5.145,2072,4.52,2073,4.52,2074,4.52,2075,4.52]],["title/classes/phoneNumberValidator.html",[0,0.264,1457,3.161]],["body/classes/phoneNumberValidator.html",[0,0.408,2,0.777,3,0.148,4,0.134,5,0.121,7,2.584,9,0.475,10,1.475,19,0.437,21,1.121,22,0.01,23,0.919,24,0.376,25,0.998,34,1.436,42,0.175,49,0.148,51,1.835,77,0.008,78,0.008,100,0.972,116,1.734,202,3.178,244,3.414,267,1.891,412,3.025,448,2.767,453,2.655,464,1.546,480,2.767,903,3.557,1410,4.52,1457,4.888,1633,4.109,1699,5.055,1700,4.573,1701,4.573,1702,5.746,1704,5.649,1705,4.888,1707,4.573,1709,3.802,1710,3.802,1711,3.557,2076,5.145,2077,5.145,2078,4.52,2079,4.52]],["title/properties.html",[444,1.387,1654,3.132]],["body/properties.html",[22,0.01,48,3.281,77,0.009,78,0.009,87,5.086,90,1.995,114,5.361,180,5.837,444,1.643,753,2.813,1258,5.361,1683,4.873,1740,5.361,1741,5.361,1787,5.361,1789,5.361,1889,5.361,1918,5.361,1930,4.873,1959,5.361,1993,4.509,1999,5.361,2000,5.361,2001,4.873,2002,4.873,2080,6.101,2081,6.101,2082,6.101,2083,7.356,2084,6.101]],["title/miscellaneous/typealiases.html",[1695,2.096,2085,5.148]],["body/miscellaneous/typealiases.html",[9,0.619,22,0.009,24,0.382,77,0.009,78,0.009,1644,6.218,1645,5.363,1695,3.948,1718,5.9,1728,6.84,2086,6.715]],["title/classes/usenameValidator.html",[0,0.264,651,2.957]],["body/classes/usenameValidator.html",[0,0.41,2,0.783,3,0.149,4,0.135,5,0.122,7,2.598,9,0.478,10,1.483,19,0.439,21,1.127,22,0.01,23,0.923,24,0.378,25,1.004,34,1.444,42,0.177,49,0.149,51,1.85,77,0.008,78,0.008,100,0.974,116,1.743,202,3.204,244,3.432,267,1.906,409,3.204,448,2.79,464,1.559,480,2.79,651,4.598,903,3.576,1634,4.143,1699,5.074,1700,4.598,1701,4.598,1702,5.757,1704,5.662,1705,4.915,1707,4.598,1708,4.143,1709,3.834,1710,3.834,1711,3.586,2087,5.187,2088,5.187]],["title/miscellaneous/variables.html",[1695,2.096,2089,4.523]],["body/miscellaneous/variables.html",[9,0.278,22,0.011,23,0.378,24,0.347,39,1.669,51,2.622,71,2.623,77,0.005,78,0.005,87,3.14,90,1.485,92,1.553,93,3.518,100,0.869,108,2.443,116,1.598,169,2.436,180,4.044,202,4.541,217,2.671,219,2.671,232,2.403,233,2.403,246,2.224,248,2.224,258,2.08,276,1.775,320,3.628,321,3.628,385,3.357,386,3.628,400,3.628,412,1.769,453,2.824,476,2.224,480,1.618,517,4.214,543,1.961,716,1.34,753,1.387,793,2.224,796,3.357,826,1.961,830,2.403,896,2.224,902,2.644,908,2.224,920,6.136,921,5.097,928,2.644,929,3.991,987,2.644,1040,3.991,1291,2.403,1293,3.628,1328,3.991,1329,2.644,1405,2.644,1517,3.628,1601,3.357,1606,2.644,1608,3.991,1610,3.991,1613,2.644,1614,3.991,1616,2.644,1617,3.991,1618,2.644,1619,4.808,1620,2.403,1621,3.991,1628,2.644,1629,2.403,1630,2.403,1631,3.628,1632,2.403,1633,2.403,1634,2.403,1637,3.991,1638,3.991,1639,3.991,1640,2.644,1695,1.769,1708,3.628,1717,2.644,1733,2.644,1748,2.644,1797,3.991,1801,3.991,1828,3.991,1858,2.644,1880,2.644,1881,2.644,1882,2.644,1887,3.991,1940,2.644,2001,2.403,2002,2.403,2072,2.644,2073,2.644,2074,2.644,2075,2.644,2078,2.644,2079,2.644,2089,2.644,2090,5.471,2091,4.542,2092,3.009,2093,4.542,2094,3.009,2095,3.009,2096,3.009,2097,3.009,2098,3.009,2099,3.009,2100,3.009,2101,3.009,2102,3.009,2103,3.009,2104,3.009,2105,6.095,2106,3.009,2107,3.009,2108,3.009,2109,3.009,2110,3.009,2111,3.009,2112,3.009,2113,3.009,2114,3.009,2115,4.542,2116,3.009,2117,3.009,2118,3.009,2119,4.542,2120,3.009,2121,3.009,2122,3.009,2123,3.009,2124,3.009,2125,3.009,2126,3.009,2127,3.009,2128,3.009,2129,3.009,2130,3.009,2131,3.009,2132,3.009,2133,3.009,2134,3.009,2135,3.009,2136,3.009,2137,3.009,2138,3.009,2139,3.009,2140,3.009,2141,3.009,2142,3.009,2143,3.009,2144,3.009,2145,3.009,2146,3.009,2147,3.009,2148,3.009,2149,3.009]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1609,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1642,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1648,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1649,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1604,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1605,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1641,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1615,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1625,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["02t05:01:03.938z",{"_index":1470,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["02t05:01:03.938z'})@type(undefined)@isdate",{"_index":1433,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["07",{"_index":1432,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["09999999999",{"_index":1468,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["09999999999'})@isstring()@validate(phonenumbervalidator",{"_index":1450,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["1",{"_index":92,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileController.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.18.0",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2081,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":830,"title":{},"body":{"controllers/FileController.html":{},"injectables/ParseIntPipe.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1415,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["120",{"_index":634,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["120)@minlength(2",{"_index":629,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["123",{"_index":685,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserProfileDto.html":{}}}],["150",{"_index":1428,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["17.0.3",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1418,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["19",{"_index":1471,"title":{},"body":{"classes/UserProfileDto.html":{},"overview.html":{}}}],["1970",{"_index":2114,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@min(17",{"_index":1417,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["1})@isnumber()@min(0)@max(2",{"_index":1445,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["2",{"_index":1075,"title":{},"body":{"injectables/MessagesService.html":{},"classes/UserProfileDto.html":{},"overview.html":{}}}],["2.2.0",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":642,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["20)@minlength(2",{"_index":640,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["200",{"_index":89,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":1431,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["2022",{"_index":1998,"title":{},"body":{"index.html":{},"license.html":{}}}],["21",{"_index":1361,"title":{},"body":{"classes/SignupDto.html":{}}}],["21)@minlength(7",{"_index":1349,"title":{},"body":{"classes/SignupDto.html":{}}}],["3",{"_index":631,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["3.0.0",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":1666,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":97,"title":{},"body":{"controllers/AppController.html":{}}}],["45",{"_index":1440,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1437,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["456",{"_index":686,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["5.0.1",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1612,"title":{},"body":{"coverage.html":{}}}],["52",{"_index":2069,"title":{},"body":{"overview.html":{}}}],["6",{"_index":2068,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["789",{"_index":696,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["789'})@isstring()@isnotempty",{"_index":687,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["8",{"_index":1350,"title":{},"body":{"classes/SignupDto.html":{}}}],["8.0.1",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1611,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":2067,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2079,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2078,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../documentation",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["ab*cd",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1426,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["abc'})@isstring()@length(3",{"_index":1436,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["above",{"_index":2033,"title":{},"body":{"license.html":{}}}],["acceptable",{"_index":725,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["access",{"_index":232,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserProfileDto.html":{}}}],["account'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["account'})@isstring()@maxlength(151",{"_index":1427,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["action",{"_index":2055,"title":{},"body":{"license.html":{}}}],["add",{"_index":1144,"title":{},"body":{"controllers/PostsController.html":{}}}],["addbasicauth",{"_index":2139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":2133,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1131,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(@body",{"_index":1216,"title":{},"body":{"controllers/PostsController.html":{}}}],["addcomment(dto",{"_index":1142,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["additional",{"_index":909,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["address",{"_index":1402,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2132,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":516,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1493,"title":{},"body":{"controllers/UsersController.html":{}}}],["admin01",{"_index":661,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admin02",{"_index":662,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admins",{"_index":467,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["age",{"_index":1403,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["agedate",{"_index":2111,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aliases",{"_index":2086,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":809,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":815,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allexceptionsfilter.handleresponse(request",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":736,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["already",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["amazing",{"_index":1935,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":1864,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2024,"title":{},"body":{"license.html":{}}}],["api",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2084,"title":{},"body":{"properties.html":{}}}],["api:latest",{"_index":1920,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":2142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":1739,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["apicreatedresponse",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":671,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apinotacceptableresponse",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":102,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":473,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["apiproperty({example",{"_index":1430,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["apiproperty({required",{"_index":479,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apiproperty({type",{"_index":621,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["apipropertyoptional",{"_index":644,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["apiresponse",{"_index":103,"title":{},"body":{"controllers/AppController.html":{},"controllers/ConversationsController.html":{}}}],["apiresponse({status",{"_index":96,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":1802,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":551,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":843,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('home",{"_index":110,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('posts",{"_index":1189,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1522,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":1293,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1305,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2118,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.service",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":931,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":80,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1741,"title":{},"body":{"index.html":{},"properties.html":{}}}],["applications",{"_index":1786,"title":{},"body":{"index.html":{}}}],["apply",{"_index":196,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":1555,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":119,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":1832,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":106,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":1987,"title":{},"body":{"index.html":{}}}],["args",{"_index":1704,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1119,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2059,"title":{},"body":{"license.html":{}}}],["array",{"_index":826,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":836,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":853,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":1720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":1110,"title":{},"body":{"classes/PaginationDto.html":{}}}],["associated",{"_index":2012,"title":{},"body":{"license.html":{}}}],["async",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["atguard",{"_index":149,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":242,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":195,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["auth.controller",{"_index":360,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/decorators",{"_index":1187,"title":{},"body":{"controllers/PostsController.html":{}}}],["authcontroller",{"_index":265,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":1820,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":220,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authguard('jwt",{"_index":223,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authmodule",{"_index":125,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1258,"title":{},"body":{"injectables/PostsService.html":{},"properties.html":{}}}],["authorid",{"_index":675,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authors",{"_index":2048,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":318,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1791,"title":{},"body":{"index.html":{}}}],["available",{"_index":2065,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":468,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["avatar.dto.ts",{"_index":1394,"title":{},"body":{"classes/UserAvatarDto.html":{},"coverage.html":{}}}],["avatar.dto.ts:10",{"_index":1396,"title":{},"body":{"classes/UserAvatarDto.html":{}}}],["await",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/MessagesGateway.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["awesome",{"_index":1888,"title":{},"body":{"index.html":{}}}],["b",{"_index":1412,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["backend",{"_index":1761,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1936,"title":{},"body":{"index.html":{}}}],["badgatewayexception",{"_index":707,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["badrequestexception",{"_index":708,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1125,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1269,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":1886,"title":{},"body":{"index.html":{}}}],["based",{"_index":927,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["bcrypt",{"_index":1667,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":2102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":2103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2135,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2136,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":1975,"title":{},"body":{"index.html":{}}}],["bee",{"_index":1945,"title":{},"body":{"index.html":{}}}],["begin",{"_index":636,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["begining",{"_index":1962,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":1977,"title":{},"body":{"index.html":{}}}],["better",{"_index":1989,"title":{},"body":{"index.html":{}}}],["bio",{"_index":1404,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["birthdate",{"_index":1405,"title":{},"body":{"classes/UserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["bodies",{"_index":1836,"title":{},"body":{"index.html":{}}}],["body",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":751,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["boolean",{"_index":903,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"classes/MessagesGateway.html":{},"guards/RolesGuard.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["bootstrap",{"_index":1651,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2064,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2062,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1880,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":1790,"title":{},"body":{"index.html":{}}}],["building",{"_index":1782,"title":{},"body":{"index.html":{}}}],["built",{"_index":1868,"title":{},"body":{"index.html":{}}}],["bwrzn7qrlxw",{"_index":755,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["bằng",{"_index":231,"title":{},"body":{"injectables/AtGuard.html":{}}}],["c",{"_index":1466,"title":{},"body":{"classes/UserProfileDto.html":{},"license.html":{}}}],["c'})@isstring()@maxlength(101",{"_index":1414,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["call",{"_index":1850,"title":{},"body":{"index.html":{}}}],["callback",{"_index":2104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callhandler",{"_index":772,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":213,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":216,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["card",{"_index":1985,"title":{},"body":{"index.html":{}}}],["catch",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":893,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":776,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["catcherror((err",{"_index":781,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["categories",{"_index":1247,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1249,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["change",{"_index":542,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["character",{"_index":1356,"title":{},"body":{"classes/SignupDto.html":{}}}],["characters",{"_index":655,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["characters!'})@maxlength(121",{"_index":632,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["characters!'})@maxlength(21",{"_index":641,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["characters!'})@maxlength(46",{"_index":1439,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1441,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":1351,"title":{},"body":{"classes/SignupDto.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":635,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["charge",{"_index":2007,"title":{},"body":{"license.html":{}}}],["chat",{"_index":1891,"title":{},"body":{"index.html":{}}}],["chats",{"_index":1774,"title":{},"body":{"index.html":{}}}],["checkexist",{"_index":1265,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1268,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1273,"title":{},"body":{"injectables/PostsService.html":{}}}],["cho",{"_index":227,"title":{},"body":{"injectables/AtGuard.html":{}}}],["city",{"_index":1411,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["claim",{"_index":2051,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/Post.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/Post.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":1876,"title":{},"body":{"index.html":{}}}],["client",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"classes/MessagesGateway.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1051,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.id",{"_index":1044,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["clientid",{"_index":1064,"title":{},"body":{"injectables/MessagesService.html":{}}}],["cluster_appmodule",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":354,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":356,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":355,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":574,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":575,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":576,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":863,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":864,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1058,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1059,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1224,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1225,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1226,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1279,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1281,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1280,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1546,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1547,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1548,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["comment",{"_index":1145,"title":{},"body":{"controllers/PostsController.html":{}}}],["comment.dto.ts",{"_index":615,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":442,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1160,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["commitlint",{"_index":1874,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":1990,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepassword(dto.password",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["compatible",{"_index":1819,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1857,"title":{},"body":{"index.html":{}}}],["compose",{"_index":1922,"title":{},"body":{"index.html":{}}}],["compress",{"_index":1835,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1671,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computer",{"_index":1986,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2032,"title":{},"body":{"license.html":{}}}],["config",{"_index":248,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('access_token_secret",{"_index":264,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["config.get('refresh_token_secret",{"_index":1341,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["configmodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":246,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["conflictexception",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["conflictexception('user",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1744,"title":{},"body":{"index.html":{}}}],["connectedsocket",{"_index":1035,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["connection",{"_index":2060,"title":{},"body":{"license.html":{}}}],["console.log('before",{"_index":983,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":984,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":989,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":939,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":940,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(postid",{"_index":1213,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["const",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/MessagesGateway.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@logger('appservice",{"_index":210,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(config",{"_index":245,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(error",{"_index":704,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["constructor(logger",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(messagesservice",{"_index":1007,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["constructor(prismaservice",{"_index":582,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":214,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":143,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":1352,"title":{},"body":{"classes/SignupDto.html":{}}}],["container",{"_index":1921,"title":{},"body":{"index.html":{}}}],["content",{"_index":1854,"title":{},"body":{"index.html":{}}}],["context",{"_index":219,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":240,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":985,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":239,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":937,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":938,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1328,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["continuous",{"_index":1869,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2056,"title":{},"body":{"license.html":{}}}],["controller",{"_index":79,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":553,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":844,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('posts",{"_index":1190,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":1523,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":928,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":922,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":81,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":1859,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":502,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"index.html":{}}}],["conversation.dto",{"_index":690,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":620,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:11",{"_index":880,"title":{},"body":{"classes/GetAllConversationDto.html":{}}}],["conversation.dto.ts:14",{"_index":1374,"title":{},"body":{"classes/UpdateMembersConversationDto.html":{}}}],["conversation.dto.ts:20",{"_index":692,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:27",{"_index":693,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:32",{"_index":643,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:33",{"_index":1390,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:34",{"_index":1389,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:35",{"_index":1391,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:52",{"_index":637,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:59",{"_index":638,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:6",{"_index":1373,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:66",{"_index":624,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":1372,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:73",{"_index":626,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":1371,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversationentity",{"_index":465,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"coverage.html":{}}}],["conversationid",{"_index":519,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{}}}],["conversationid).members",{"_index":1083,"title":{},"body":{"injectables/MessagesService.html":{}}}],["conversations",{"_index":490,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/MessagesService.html":{},"index.html":{}}}],["conversations.controller",{"_index":578,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":549,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":488,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":126,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":548,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":1673,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":1823,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2026,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2010,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1996,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/interceptors/interceptor.module",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":208,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":209,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["core/validators",{"_index":1458,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["correct",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["cors",{"_index":1039,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":1608,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1413,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["course",{"_index":1967,"title":{},"body":{"index.html":{}}}],["cover",{"_index":814,"title":{},"body":{"controllers/FileController.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["cover.dto.ts",{"_index":1398,"title":{},"body":{"classes/UserCoverDto.html":{},"coverage.html":{}}}],["cover.dto.ts:10",{"_index":1399,"title":{},"body":{"classes/UserCoverDto.html":{}}}],["coverage",{"_index":1600,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createat",{"_index":1248,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":613,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":491,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":556,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":499,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":500,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{}}}],["createdat",{"_index":469,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":1623,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":1722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":945,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1001,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(conversationid",{"_index":1011,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":664,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.text",{"_index":1087,"title":{},"body":{"injectables/MessagesService.html":{}}}],["createparamdecorator",{"_index":2115,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1132,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":1191,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(dto",{"_index":1147,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":672,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["creator",{"_index":470,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["creator01",{"_index":663,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["creator01'})@isstring",{"_index":625,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["criteria",{"_index":1818,"title":{},"body":{"index.html":{}}}],["crud",{"_index":1881,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":517,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":1617,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":923,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":2147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customeimage",{"_index":1734,"title":{},"body":{"classes/imageValidator.html":{}}}],["customtext",{"_index":1709,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["cập",{"_index":230,"title":{},"body":{"injectables/AtGuard.html":{}}}],["damages",{"_index":2052,"title":{},"body":{"license.html":{}}}],["data",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":1745,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1297,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":476,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"classes/UserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":72,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":2110,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":2112,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":987,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1298,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":2013,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2061,"title":{},"body":{"license.html":{}}}],["debug",{"_index":951,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":956,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":1807,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":1809,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":898,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":920,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1700,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":1701,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defined",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definition",{"_index":1799,"title":{},"body":{"index.html":{}}}],["delete",{"_index":510,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":565,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":509,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':userid",{"_index":1543,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('comments",{"_index":1221,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1153,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1205,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1156,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile/:userid",{"_index":1541,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile/:userid')@apibearerauth()@apioperation({summary",{"_index":1488,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecomment",{"_index":1133,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1222,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1152,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":682,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationbyid",{"_index":492,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":507,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":508,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleteoneadminconversation",{"_index":493,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":513,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":514,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":697,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deletepost",{"_index":1134,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@body",{"_index":1206,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(dto",{"_index":1155,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuserbyemail",{"_index":1479,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyemail(userid",{"_index":1487,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":1480,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":1544,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyid(userid",{"_index":1491,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":121,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1848,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1111,"title":{},"body":{"classes/PaginationDto.html":{}}}],["describe",{"_index":1798,"title":{},"body":{"index.html":{}}}],["description",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":1817,"title":{},"body":{"index.html":{}}}],["design",{"_index":1800,"title":{},"body":{"index.html":{}}}],["dev",{"_index":1903,"title":{},"body":{"index.html":{}}}],["development",{"_index":1910,"title":{},"body":{"index.html":{}}}],["devices",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":1746,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["directly",{"_index":1851,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":2022,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1994,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1918,"title":{},"body":{"index.html":{},"properties.html":{}}}],["document",{"_index":1801,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":1601,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":2120,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doe",{"_index":1074,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":600,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1243,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":607,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.creator",{"_index":601,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":598,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto.favouritorid",{"_index":1267,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1246,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1277,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.members",{"_index":599,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":597,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":1573,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1260,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1272,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.text",{"_index":1275,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.title",{"_index":1245,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.userid",{"_index":603,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.username",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto/comment",{"_index":1188,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dynamicmodule",{"_index":944,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":1952,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":1927,"title":{},"body":{"index.html":{}}}],["easily",{"_index":1758,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1783,"title":{},"body":{"index.html":{}}}],["element.id",{"_index":1082,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.foreach((item",{"_index":1093,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.splice(element.messages.indexof(item",{"_index":1101,"title":{},"body":{"injectables/MessagesService.html":{}}}],["email",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["enable",{"_index":1795,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1286,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1290,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":1956,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":1882,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["enhance",{"_index":1954,"title":{},"body":{"index.html":{}}}],["entities",{"_index":550,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["entities/comment.entity",{"_index":617,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["enumerations",{"_index":1696,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["envfilepath",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1846,"title":{},"body":{"index.html":{}}}],["error",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{}}}],["error(message",{"_index":958,"title":{},"body":{"injectables/LoggerService.html":{}}}],["erroracceptableexception",{"_index":701,"title":{"classes/ErrorAcceptableException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorbadgatewayexception",{"_index":741,"title":{"classes/ErrorBadGatewayException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorbadrequestexception",{"_index":723,"title":{"classes/ErrorBadRequestException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorforbiddenexception",{"_index":721,"title":{"classes/ErrorForbiddenException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorgatewaytimeoutexception",{"_index":742,"title":{"classes/ErrorGatewayTimeoutException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorinternalserverexception",{"_index":732,"title":{"classes/ErrorInternalServerException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errormethodnotallowedexception",{"_index":734,"title":{"classes/ErrorMethodNotAllowedException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errornotfoundexception",{"_index":717,"title":{"classes/ErrorNotFoundException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorrequesttimeoutexception",{"_index":726,"title":{"classes/ErrorRequestTimeoutException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errors",{"_index":1596,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":1598,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorserviceunavailableexception",{"_index":737,"title":{"classes/ErrorServiceUnavailableException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorsintereptor",{"_index":767,"title":{"injectables/ErrorsIntereptor.html":{}},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["errorunauthorizedexception",{"_index":719,"title":{"classes/ErrorUnauthorizedException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorunsupportedmediatypeexception",{"_index":729,"title":{"classes/ErrorUnsupportedMediaTypeException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["eslint",{"_index":1863,"title":{},"body":{"index.html":{}}}],["eval",{"_index":1838,"title":{},"body":{"index.html":{}}}],["event",{"_index":2047,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":1751,"title":{},"body":{"index.html":{}}}],["example",{"_index":622,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"index.html":{}}}],["example@gmail.com",{"_index":994,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["exception",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":73,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["executes",{"_index":1843,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":217,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["existed",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["existedusermiddleware",{"_index":784,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["exists",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["experiences",{"_index":1755,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":949,"title":{},"body":{"classes/LoggerModule.html":{},"modules/PrismaModule.html":{}}}],["express",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":806,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":1825,"title":{},"body":{"index.html":{}}}],["extends",{"_index":222,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"injectables/LoggerService.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["extra",{"_index":910,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extractjwt",{"_index":255,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":262,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":899,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["failed",{"_index":1126,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":480,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favouritorid",{"_index":1307,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":1766,"title":{},"body":{"index.html":{}}}],["feels",{"_index":1753,"title":{},"body":{"index.html":{}}}],["female",{"_index":1444,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["field",{"_index":1770,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":1644,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":1721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":875,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":873,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":877,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":799,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":874,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":676,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{}}}],["files.controller",{"_index":866,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":878,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":840,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":845,"title":{},"body":{"controllers/FileController.html":{}}}],["filesmodule",{"_index":127,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":839,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":1711,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["filters",{"_index":754,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["find",{"_index":1866,"title":{},"body":{"index.html":{}}}],["find((element",{"_index":1089,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findallmessages",{"_index":1002,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["findallmessages(@messagebody('conversationid",{"_index":1045,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["findallmessages(conversationid",{"_index":1015,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["finduser",{"_index":1242,"title":{},"body":{"injectables/PostsService.html":{}}}],["fitness",{"_index":2044,"title":{},"body":{"license.html":{}}}],["fix",{"_index":1884,"title":{},"body":{"index.html":{}}}],["flip",{"_index":1984,"title":{},"body":{"index.html":{}}}],["fo",{"_index":1982,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1946,"title":{},"body":{"index.html":{}}}],["following",{"_index":2031,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["forbiddenexception",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception('access",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception('you",{"_index":1257,"title":{},"body":{"injectables/PostsService.html":{}}}],["form",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["format",{"_index":1423,"title":{},"body":{"classes/UserProfileDto.html":{},"index.html":{}}}],["formattedmessage",{"_index":973,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":1862,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":942,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":194,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":1781,"title":{},"body":{"index.html":{}}}],["free",{"_index":2006,"title":{},"body":{"license.html":{}}}],["front",{"_index":1955,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1743,"title":{},"body":{"index.html":{}}}],["full",{"_index":1438,"title":{},"body":{"classes/UserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1406,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1455,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/UserProfileDto.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":908,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1712,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2029,"title":{},"body":{"license.html":{}}}],["game",{"_index":1973,"title":{},"body":{"index.html":{}}}],["gateway",{"_index":740,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["gatewaytimeoutexception",{"_index":709,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["gender",{"_index":1407,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["generate",{"_index":925,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["generated",{"_index":1792,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":560,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":527,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1199,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1169,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1211,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid",{"_index":1529,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid/all",{"_index":1196,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1166,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('all",{"_index":1525,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('all')@roledecorator(role.admin)@apibearerauth()@apioperation({summary",{"_index":1496,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":1499,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":522,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1135,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(@param('postid",{"_index":1212,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallcomments(postid",{"_index":1158,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":521,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversationdto:11",{"_index":689,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["getallconversations",{"_index":494,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@body",{"_index":558,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(dto",{"_index":520,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallpostofuserdto",{"_index":881,"title":{"classes/GetAllPostOfUserDto.html":{}},"body":{"classes/GetAllPostOfUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getallpostsofuser",{"_index":1136,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(@body",{"_index":1194,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallpostsofuser(dto",{"_index":1162,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1137,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(@param('userid",{"_index":1197,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallpublicposts(userid",{"_index":1165,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallusers",{"_index":1481,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":1527,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers(dto",{"_index":1495,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getconversationbyid",{"_index":495,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":525,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember",{"_index":1063,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmember(conversationid",{"_index":1067,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getoneconversationdto",{"_index":526,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1138,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(@param('postid",{"_index":1200,"title":{},"body":{"controllers/PostsController.html":{}}}],["getonepostbyid(postid",{"_index":1168,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getting",{"_index":1737,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserprofilebyemailnamedto",{"_index":883,"title":{"classes/GetUserProfileByEmailNameDto.html":{}},"body":{"classes/GetUserProfileByEmailNameDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getusersbyemailandname",{"_index":1482,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusersbyemailandname(@body",{"_index":1532,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbyemailandname(dto",{"_index":1498,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusersbyid",{"_index":1483,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusersbyid(@param('userid",{"_index":1530,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbyid(userid",{"_index":1501,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["gitbox",{"_index":1961,"title":{},"body":{"index.html":{}}}],["github",{"_index":1959,"title":{},"body":{"index.html":{},"properties.html":{}}}],["global",{"_index":916,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["goneexception",{"_index":744,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["granted",{"_index":2005,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1849,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group01",{"_index":627,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["group01'})@isstring()@isnotempty()@length(3",{"_index":639,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["grow",{"_index":1932,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1320,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":779,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessage",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessage(exception",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse(request",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hash",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":441,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1330,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":1828,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":1834,"title":{},"body":{"index.html":{}}}],["hello",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{},"classes/UserProfileDto.html":{}}}],["helmet",{"_index":1677,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helmetmiddleware",{"_index":1627,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["helmetmiddleware(app",{"_index":1725,"title":{},"body":{"miscellaneous/functions.html":{}}}],["help",{"_index":1805,"title":{},"body":{"index.html":{}}}],["here",{"_index":1940,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["hereby",{"_index":2004,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":1890,"title":{},"body":{"index.html":{}}}],["holders",{"_index":2049,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":114,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["host",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":716,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpargumentshost",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcode",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":112,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorsIntereptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception('new",{"_index":782,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpexceptionfilter",{"_index":890,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2083,"title":{},"body":{"properties.html":{}}}],["https://github.dev/narhakobyan/awesome",{"_index":749,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["https://viblo.asia/p/framework",{"_index":752,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":554,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":783,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpstatus.internal_server_error",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["husky",{"_index":1679,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iarrayfile",{"_index":841,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["id",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["id.decorator.ts",{"_index":1638,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":1943,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1602,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1261,"title":{},"body":{"injectables/PostsService.html":{}}}],["ignore",{"_index":915,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreglobalprefix",{"_index":900,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ijwtpayload",{"_index":250,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":1506,"title":{},"body":{"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image.match(parttern",{"_index":1736,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":828,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":1456,"title":{"classes/imageValidator.html":{}},"body":{"classes/UserProfileDto.html":{},"coverage.html":{},"classes/imageValidator.html":{}}}],["imateapotexception",{"_index":748,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["impact",{"_index":1992,"title":{},"body":{"index.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implied",{"_index":2040,"title":{},"body":{"license.html":{}}}],["import",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["imported",{"_index":907,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":138,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":1763,"title":{},"body":{"index.html":{}}}],["include",{"_index":901,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":913,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2016,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1291,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["information",{"_index":528,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["informations",{"_index":1960,"title":{},"body":{"index.html":{}}}],["infrastructure/auth/auth.module",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":109,"title":{},"body":{"controllers/AppController.html":{}}}],["infrastructure/auth/guards",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/prisma/prisma.module",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":688,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["init",{"_index":1898,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":1614,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":253,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["inject(configservice",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":203,"title":{"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":204,"title":{},"body":{"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputs",{"_index":552,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["inspect",{"_index":1847,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":912,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":1944,"title":{},"body":{"index.html":{}}}],["install",{"_index":1896,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1894,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1814,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["int.pipe.ts",{"_index":1115,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1120,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":1909,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1870,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":1845,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":769,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":770,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptormodule",{"_index":128,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1408,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["interface",{"_index":895,"title":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":259,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["internalservererrorexception",{"_index":710,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["invalid",{"_index":1424,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["isalphanumeric",{"_index":645,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["isarray",{"_index":459,"title":{},"body":{"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/UserProfileDto.html":{}}}],["isarray()@isnotempty",{"_index":454,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isdate",{"_index":1453,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["isemail",{"_index":646,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["isglobal",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":842,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isjson",{"_index":460,"title":{},"body":{"classes/CommentEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["ismatched",{"_index":1735,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1124,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":461,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1347,"title":{},"body":{"classes/SignupDto.html":{}}}],["isnotempty()@isemail()@apiproperty({type",{"_index":992,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["isnotempty()@isstring",{"_index":449,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":996,"title":{},"body":{"classes/LoginDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["isnumber",{"_index":1313,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"classes/UserProfileDto.html":{}}}],["isnumber()@isnotempty",{"_index":1311,"title":{},"body":{"classes/ReactionsPost.html":{}}}],["isobject",{"_index":462,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ispublic",{"_index":237,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":463,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["isstring()@apiproperty({type",{"_index":1107,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isstring()@isnotempty",{"_index":451,"title":{},"body":{"classes/CommentEntity.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["istyping",{"_index":1025,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["iswaggeroptions",{"_index":896,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":1333,"title":{},"body":{"guards/RolesGuard.html":{}}}],["item.id",{"_index":1094,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item.text",{"_index":1096,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item1item2",{"_index":1776,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":856,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":858,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":859,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":860,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":861,"title":{},"body":{"controllers/FileController.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["java",{"_index":1976,"title":{},"body":{"index.html":{}}}],["john",{"_index":1073,"title":{},"body":{"injectables/MessagesService.html":{}}}],["join",{"_index":1775,"title":{},"body":{"index.html":{}}}],["join(__dirname",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["joinconversation",{"_index":1003,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["joinconversation(conversationid",{"_index":1018,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["jpeg|jpg|gif|png",{"_index":1733,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["json.stringify(exception.getresponse",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":258,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":261,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":362,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["keywords",{"_index":2082,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2039,"title":{},"body":{"license.html":{}}}],["latest",{"_index":1948,"title":{},"body":{"index.html":{}}}],["league",{"_index":1981,"title":{},"body":{"index.html":{}}}],["learn",{"_index":1969,"title":{},"body":{"index.html":{}}}],["learning",{"_index":1965,"title":{},"body":{"index.html":{}}}],["legend",{"_index":1983,"title":{},"body":{"index.html":{}}}],["length",{"_index":647,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["length(3",{"_index":653,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["length(8",{"_index":1360,"title":{},"body":{"classes/SignupDto.html":{}}}],["letter",{"_index":1354,"title":{},"body":{"classes/SignupDto.html":{}}}],["liability",{"_index":2053,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2050,"title":{},"body":{"license.html":{}}}],["library",{"_index":1804,"title":{},"body":{"index.html":{}}}],["license",{"_index":1993,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1931,"title":{},"body":{"index.html":{}}}],["life",{"_index":1759,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1105,"title":{},"body":{"classes/PaginationDto.html":{}}}],["limitation",{"_index":2017,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2041,"title":{},"body":{"license.html":{}}}],["linter",{"_index":1875,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":1873,"title":{},"body":{"index.html":{}}}],["list",{"_index":537,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["list.authorid",{"_index":1256,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":611,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list.writtenposts.find((post",{"_index":1262,"title":{},"body":{"injectables/PostsService.html":{}}}],["list['creator",{"_index":609,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter((admin",{"_index":612,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["load",{"_index":905,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":1908,"title":{},"body":{"index.html":{}}}],["log",{"_index":952,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":961,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger(prefix",{"_index":1726,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":946,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":947,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":157,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":1624,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":1724,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":163,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":18,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":932,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":287,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuserid",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":633,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["looking",{"_index":1988,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1840,"title":{},"body":{"index.html":{}}}],["lại",{"_index":236,"title":{},"body":{"injectables/AtGuard.html":{}}}],["main.ts",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":1757,"title":{},"body":{"index.html":{}}}],["male",{"_index":1443,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["map",{"_index":1318,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marriagestatus",{"_index":1409,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["master",{"_index":1968,"title":{},"body":{"index.html":{}}}],["match",{"_index":1772,"title":{},"body":{"index.html":{}}}],["matching",{"_index":78,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":1581,"title":{},"body":{"injectables/UsersService.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":2113,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1076,"title":{},"body":{"injectables/MessagesService.html":{},"classes/UserProfileDto.html":{}}}],["max(101",{"_index":1473,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["max(2",{"_index":1476,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["maxcount",{"_index":857,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":648,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["maxlength(101",{"_index":1467,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["maxlength(121",{"_index":658,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["maxlength(151",{"_index":1474,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["maxlength(21",{"_index":656,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["maxlength(46",{"_index":1459,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["media",{"_index":731,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["meet",{"_index":1079,"title":{},"body":{"injectables/MessagesService.html":{}}}],["member",{"_index":544,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["members",{"_index":471,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["members[clientid",{"_index":1085,"title":{},"body":{"injectables/MessagesService.html":{}}}],["merchantability",{"_index":2043,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2020,"title":{},"body":{"license.html":{}}}],["message",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{},"index.html":{}}}],["message.dto",{"_index":1379,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":666,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:5",{"_index":668,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":669,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:7",{"_index":670,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1376,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message['conversationid",{"_index":1099,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message['messageid",{"_index":1100,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagebody",{"_index":1034,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1041,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1049,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1042,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messages",{"_index":1072,"title":{},"body":{"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1061,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.push(message",{"_index":1090,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages.service",{"_index":1037,"title":{},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":999,"title":{"classes/MessagesGateway.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":129,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1008,"title":{"injectables/MessagesService.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":1958,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1118,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":1590,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":190,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/UsersModule.html":{}}}],["methodkey",{"_index":929,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methodnotallowedexception",{"_index":711,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["methods",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["middleware",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":1902,"title":{},"body":{"index.html":{}}}],["min",{"_index":1454,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["min(0",{"_index":1475,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["min(17",{"_index":1472,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["minlength",{"_index":649,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["minlength(2",{"_index":654,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["minlength(7",{"_index":1362,"title":{},"body":{"classes/SignupDto.html":{}}}],["miscellaneous",{"_index":1695,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1930,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":1914,"title":{},"body":{"index.html":{}}}],["models",{"_index":911,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2019,"title":{},"body":{"license.html":{}}}],["module",{"_index":118,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":120,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1939,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1826,"title":{},"body":{"index.html":{}}}],["multi",{"_index":820,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":838,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":1727,"title":{},"body":{"miscellaneous/functions.html":{}}}],["music",{"_index":1463,"title":{},"body":{"classes/UserProfileDto.html":{},"index.html":{}}}],["mustermann",{"_index":1077,"title":{},"body":{"injectables/MessagesService.html":{}}}],["name",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":750,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"index.html":{}}}],["nestinterceptor",{"_index":775,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":753,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":363,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1377,"title":{},"body":{"classes/UpdateMessageDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":221,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":835,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":166,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1036,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":794,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":1749,"title":{},"body":{"index.html":{}}}],["new",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newconversation",{"_index":595,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newpassword",{"_index":1381,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["newprofile",{"_index":1579,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":771,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1319,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(timeout(1000",{"_index":1368,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["nextfunction",{"_index":791,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2000,"title":{},"body":{"license.html":{},"properties.html":{}}}],["ngược",{"_index":235,"title":{},"body":{"injectables/AtGuard.html":{}}}],["nice",{"_index":1078,"title":{},"body":{"injectables/MessagesService.html":{}}}],["node.js",{"_index":1822,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1780,"title":{},"body":{"index.html":{}}}],["non",{"_index":1810,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":2046,"title":{},"body":{"license.html":{}}}],["notacceptableexception",{"_index":703,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["notedev",{"_index":1964,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":712,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('access",{"_index":1583,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('post",{"_index":1255,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":798,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{}}}],["notice",{"_index":2034,"title":{},"body":{"license.html":{}}}],["notimplementedexception",{"_index":747,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["now",{"_index":986,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":990,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":1895,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1899,"title":{},"body":{"index.html":{}}}],["null",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/imageValidator.html":{}}}],["nullable",{"_index":481,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{}}}],["number",{"_index":453,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdatePostDto.html":{},"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number(dto.current",{"_index":1570,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":1569,"title":{},"body":{"injectables/UsersService.html":{}}}],["nếu",{"_index":225,"title":{},"body":{"injectables/AtGuard.html":{}}}],["object",{"_index":1594,"title":{},"body":{"injectables/ValidationPipe.html":{},"index.html":{}}}],["object.values",{"_index":1084,"title":{},"body":{"injectables/MessagesService.html":{}}}],["observable",{"_index":774,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2009,"title":{},"body":{"license.html":{}}}],["official",{"_index":1740,"title":{},"body":{"index.html":{},"properties.html":{}}}],["old",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["old!'})@max(101",{"_index":1420,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["oldpassword",{"_index":1382,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["one",{"_index":511,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/SignupDto.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":1287,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1288,"title":{},"body":{"injectables/PrismaService.html":{}}}],["oop",{"_index":1974,"title":{},"body":{"index.html":{}}}],["open",{"_index":1904,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":926,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":902,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":1861,"title":{},"body":{"index.html":{}}}],["option",{"_index":2105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePostDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["options",{"_index":1797,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1106,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":1572,"title":{},"body":{"injectables/UsersService.html":{}}}],["oriented",{"_index":1970,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1040,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":872,"title":{},"body":{"classes/FilesService.html":{}}}],["otherwise",{"_index":2058,"title":{},"body":{"license.html":{}}}],["out",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2066,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1654,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1855,"title":{},"body":{"index.html":{}}}],["pagecurrent",{"_index":1577,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":1574,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":1576,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":1103,"title":{"classes/PaginationDto.html":{}},"body":{"classes/PaginationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":547,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('conversationid",{"_index":568,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('id",{"_index":561,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('userid",{"_index":1535,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":1827,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1123,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1113,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parser",{"_index":1674,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1184,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["parsing",{"_index":1824,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":694,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createconversationdto",{"_index":695,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createpostdto",{"_index":1315,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["partialtype(userprofiledto",{"_index":889,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{}}}],["particular",{"_index":2045,"title":{},"body":{"license.html":{}}}],["parttern",{"_index":1631,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":257,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":254,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":260,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":1342,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["password",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"controllers/UsersController.html":{},"index.html":{},"classes/passwordValidator.html":{}}}],["password123",{"_index":997,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["password123'})@length(8",{"_index":1348,"title":{},"body":{"classes/SignupDto.html":{}}}],["passwordmatches",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":1806,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":650,"title":{"classes/passwordValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":546,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":570,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":515,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":567,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":536,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":572,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":541,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":563,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":532,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile/:userid",{"_index":1534,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile/:userid')@apibearerauth()@apioperation({summary",{"_index":1512,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1202,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1182,"title":{},"body":{"controllers/PostsController.html":{}}}],["path",{"_index":74,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":1710,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["payload",{"_index":252,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["payloadtoolargeexception",{"_index":745,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["perform",{"_index":1811,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2003,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2027,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":2146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2008,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2028,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1410,"title":{},"body":{"classes/UserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1457,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/UserProfileDto.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["phép",{"_index":228,"title":{},"body":{"injectables/AtGuard.html":{}}}],["picktype",{"_index":616,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(commententity",{"_index":618,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["pipe",{"_index":780,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["pipe(tap",{"_index":988,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":1871,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1121,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":1813,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":1592,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":1595,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":1750,"title":{},"body":{"index.html":{}}}],["playground",{"_index":1877,"title":{},"body":{"index.html":{}}}],["please",{"_index":1938,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":1779,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2037,"title":{},"body":{"license.html":{}}}],["post",{"_index":307,"title":{"classes/Post.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"index.html":{}}}],["post('avatar",{"_index":846,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":807,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1215,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1143,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":849,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":813,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":344,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":855,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":819,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":852,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":827,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1193,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1163,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1208,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1173,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1148,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":501,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto",{"_index":1314,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":674,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":699,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post.dto.ts:11",{"_index":680,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:13",{"_index":1388,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:14",{"_index":678,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:19",{"_index":1310,"title":{},"body":{"classes/ReactionsPost.html":{}}}],["post.dto.ts:23",{"_index":1309,"title":{},"body":{"classes/ReactionsPost.html":{}}}],["post.dto.ts:27",{"_index":1312,"title":{},"body":{"classes/ReactionsPost.html":{}}}],["post.dto.ts:5",{"_index":681,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:6",{"_index":700,"title":{},"body":{"classes/DeleteOnePost.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts:7",{"_index":1387,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:8",{"_index":679,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts:9",{"_index":1386,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.id",{"_index":1263,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgre",{"_index":1889,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1300,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":445,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":1885,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1130,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["posts.controller",{"_index":1228,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1186,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1128,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":130,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1185,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":1760,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":1979,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":948,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":1621,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":1692,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":1742,"title":{},"body":{"index.html":{}}}],["print",{"_index":1839,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":1683,"title":{},"body":{"dependencies.html":{},"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1283,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1296,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma/prisma.module",{"_index":580,"title":{},"body":{"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["prisma/prisma.service",{"_index":592,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["prisma@latest",{"_index":1897,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1285,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":131,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":368,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LoggerService.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":1867,"title":{},"body":{"index.html":{}}}],["process.env.database_url",{"_index":1301,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.white_list",{"_index":2108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1916,"title":{},"body":{"index.html":{}}}],["profile",{"_index":1489,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile.dto.ts",{"_index":1401,"title":{},"body":{"classes/UserProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:108",{"_index":1421,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:118",{"_index":1429,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:128",{"_index":1446,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:38",{"_index":1442,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:48",{"_index":1425,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:58",{"_index":1435,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:65",{"_index":1449,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:72",{"_index":1447,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:82",{"_index":1416,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:90",{"_index":1451,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:95",{"_index":1434,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["programming",{"_index":1764,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":1947,"title":{},"body":{"index.html":{}}}],["project",{"_index":1858,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":444,"title":{"properties.html":{}},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"properties.html":{}}}],["property",{"_index":993,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["provide",{"_index":186,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["provider",{"_index":1723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":137,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1159,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get(':userid')@apioperation({summary",{"_index":1502,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('signin')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":823,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":831,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":2021,"title":{},"body":{"license.html":{}}}],["published",{"_index":1252,"title":{},"body":{"injectables/PostsService.html":{}}}],["pull",{"_index":1901,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1747,"title":{},"body":{"index.html":{},"license.html":{}}}],["pushrunning",{"_index":1907,"title":{},"body":{"index.html":{}}}],["put",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1218,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1178,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar/:userid",{"_index":1537,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":1505,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover/:userid",{"_index":1539,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":1509,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":1514,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["quickly",{"_index":1865,"title":{},"body":{"index.html":{}}}],["rapidy",{"_index":1883,"title":{},"body":{"index.html":{}}}],["reach",{"_index":1991,"title":{},"body":{"index.html":{}}}],["react",{"_index":1174,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1270,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":1773,"title":{},"body":{"index.html":{}}}],["reactionpost",{"_index":1139,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1209,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1171,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":446,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1172,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1308,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":1837,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":111,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{}}}],["references",{"_index":1878,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":184,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":1053,"title":{},"body":{"classes/MessagesGateway.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{}}}],["refreshtoken",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["remove",{"_index":1004,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["remove(@messagebody",{"_index":1056,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["remove(message",{"_index":1021,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":1841,"title":{},"body":{"index.html":{}}}],["replies",{"_index":447,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repository",{"_index":1789,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":793,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.get('authorization').replace('bearer",{"_index":1343,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["req.params.userid",{"_index":795,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["request",{"_index":39,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":75,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1329,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2117,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2116,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":201,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod",{"_index":1551,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":200,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":1821,"title":{},"body":{"index.html":{}}}],["requesttimeoutexception",{"_index":713,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["required",{"_index":487,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/FileController.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"miscellaneous/functions.html":{}}}],["requiredroles",{"_index":1326,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.find((item",{"_index":1332,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":790,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["reset",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":40,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["response.status(status).json",{"_index":894,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":76,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["rest",{"_index":2123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":2015,"title":{},"body":{"license.html":{}}}],["result",{"_index":1844,"title":{},"body":{"index.html":{}}}],["results",{"_index":77,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":116,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2018,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":543,"title":{},"body":{"controllers/ConversationsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roledecorator",{"_index":1517,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(role.admin",{"_index":1526,"title":{},"body":{"controllers/UsersController.html":{}}}],["roledecorator(role.admin)@delete(':userid')@apibearerauth()@apioperation({summary",{"_index":1492,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles",{"_index":1887,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["roles.enum",{"_index":1325,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":1321,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":198,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":906,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["rt",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":322,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":357,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1911,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":778,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":982,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":1619,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["sample_image",{"_index":1771,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1784,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1803,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1793,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2134,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":970,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":971,"title":{},"body":{"injectables/LoggerService.html":{}}}],["secret",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":263,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":1831,"title":{},"body":{"index.html":{}}}],["see",{"_index":1777,"title":{},"body":{"index.html":{}}}],["select",{"_index":604,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2025,"title":{},"body":{"license.html":{}}}],["senderid",{"_index":667,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["serialize",{"_index":1816,"title":{},"body":{"index.html":{}}}],["serve",{"_index":1853,"title":{},"body":{"index.html":{}}}],["server",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/MessagesGateway.html":{},"index.html":{}}}],["servestaticmodule",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceunavailableexception",{"_index":714,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["set",{"_index":917,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setcontact",{"_index":2126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2122,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":919,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setmetadata('ispublic",{"_index":2148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":2149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":953,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":963,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setting",{"_index":1833,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2121,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":1893,"title":{},"body":{"index.html":{}}}],["setversion('1.4",{"_index":2131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2035,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":1752,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":1953,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":1950,"title":{},"body":{"index.html":{}}}],["short",{"_index":630,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["side",{"_index":1785,"title":{},"body":{"index.html":{}}}],["signed",{"_index":1829,"title":{},"body":{"index.html":{}}}],["signin",{"_index":1768,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signout",{"_index":1769,"title":{},"body":{"index.html":{}}}],["signup",{"_index":1767,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":293,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["single",{"_index":1462,"title":{},"body":{"classes/UserProfileDto.html":{},"index.html":{}}}],["single'})@isstring",{"_index":1448,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["singlefielddecorator",{"_index":837,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":847,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":850,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":1729,"title":{},"body":{"miscellaneous/functions.html":{}}}],["size",{"_index":876,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":1762,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1568,"title":{},"body":{"injectables/UsersService.html":{}}}],["snake",{"_index":1972,"title":{},"body":{"index.html":{}}}],["social",{"_index":1892,"title":{},"body":{"index.html":{}}}],["socket",{"_index":1012,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["socket.io",{"_index":1038,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2011,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["spa",{"_index":1856,"title":{},"body":{"index.html":{}}}],["special",{"_index":1355,"title":{},"body":{"classes/SignupDto.html":{}}}],["specification",{"_index":914,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":1934,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1464,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/.../age.ts",{"_index":2092,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":1713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../cors.config.ts",{"_index":2091,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../fullname.validator.ts",{"_index":2096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2093,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":2090,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helmet.middleware.ts",{"_index":1716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../image.validator.ts",{"_index":2095,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":1717,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":1715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multi",{"_index":1718,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../password.validator.ts",{"_index":2097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":2098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":2101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":1697,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../single",{"_index":1719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.ts",{"_index":2094,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":2099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":99,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:52",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":205,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":206,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":207,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/configs/cors.config.ts",{"_index":1606,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":897,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/swagger.ts",{"_index":1613,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/custom.filter.ts",{"_index":702,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["src/core/filters/custom.filter.ts:16",{"_index":762,"title":{},"body":{"classes/ErrorNotFoundException.html":{}}}],["src/core/filters/custom.filter.ts:22",{"_index":765,"title":{},"body":{"classes/ErrorUnauthorizedException.html":{}}}],["src/core/filters/custom.filter.ts:28",{"_index":758,"title":{},"body":{"classes/ErrorForbiddenException.html":{}}}],["src/core/filters/custom.filter.ts:34",{"_index":757,"title":{},"body":{"classes/ErrorBadRequestException.html":{}}}],["src/core/filters/custom.filter.ts:40",{"_index":705,"title":{},"body":{"classes/ErrorAcceptableException.html":{}}}],["src/core/filters/custom.filter.ts:46",{"_index":763,"title":{},"body":{"classes/ErrorRequestTimeoutException.html":{}}}],["src/core/filters/custom.filter.ts:52",{"_index":766,"title":{},"body":{"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["src/core/filters/custom.filter.ts:58",{"_index":760,"title":{},"body":{"classes/ErrorInternalServerException.html":{}}}],["src/core/filters/custom.filter.ts:64",{"_index":761,"title":{},"body":{"classes/ErrorMethodNotAllowedException.html":{}}}],["src/core/filters/custom.filter.ts:70",{"_index":764,"title":{},"body":{"classes/ErrorServiceUnavailableException.html":{}}}],["src/core/filters/custom.filter.ts:77",{"_index":756,"title":{},"body":{"classes/ErrorBadGatewayException.html":{}}}],["src/core/filters/custom.filter.ts:83",{"_index":759,"title":{},"body":{"classes/ErrorGatewayTimeoutException.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:13",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:16",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:26",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:38",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":891,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":892,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/helpers/age.ts",{"_index":1616,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":1618,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/exception.interceptor.ts",{"_index":768,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["src/core/interceptors/exception.interceptor.ts:13",{"_index":773,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":930,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":933,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":979,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":980,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":1366,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":1367,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":935,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":1316,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1369,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":1620,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":941,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":943,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":1622,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":950,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":962,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":960,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":968,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":957,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":966,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":969,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":964,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":785,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/helmet.middleware.ts",{"_index":1626,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/middlewares/logger",{"_index":936,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1114,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":1586,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":1591,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":1589,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":1518,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":1628,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.enum",{"_index":1519,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/roles/roles.enum.ts",{"_index":1698,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":1322,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:6",{"_index":1323,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:9",{"_index":1324,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/validators",{"_index":652,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":1629,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":1706,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":1703,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":1630,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":1732,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":1730,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":1632,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2071,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2070,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":1633,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2077,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2076,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":1634,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":2088,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":2087,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:55",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:64",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:73",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:83",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:95",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":1553,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":358,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:102",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:114",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:134",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:15",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:23",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:49",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:61",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:86",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1515,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":1637,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":1640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto",{"_index":1516,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/password.dto.ts",{"_index":1380,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/password.dto.ts:12",{"_index":1383,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/password.dto.ts:21",{"_index":1385,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/password.dto.ts:30",{"_index":1384,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/sigin.dto.ts",{"_index":991,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/sigin.dto.ts:12",{"_index":995,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/infrastructure/auth/dto/sigin.dto.ts:21",{"_index":998,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/infrastructure/auth/dto/signup.dto.ts",{"_index":1345,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/signup.dto.ts:22",{"_index":1346,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/infrastructure/auth/dto/signup.dto.ts:41",{"_index":1357,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/infrastructure/auth/dto/signup.dto.ts:60",{"_index":1359,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":212,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:12",{"_index":218,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:6",{"_index":215,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":1335,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:3",{"_index":1336,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":243,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:16",{"_index":251,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:8",{"_index":247,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":1337,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:20",{"_index":1340,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:8",{"_index":1338,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":489,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:102",{"_index":533,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:117",{"_index":512,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:132",{"_index":538,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:151",{"_index":518,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:170",{"_index":545,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:62",{"_index":505,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:74",{"_index":524,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:87",{"_index":529,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":577,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":581,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:103",{"_index":585,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:120",{"_index":590,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:135",{"_index":586,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:16",{"_index":583,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:168",{"_index":591,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:19",{"_index":584,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:34",{"_index":587,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:62",{"_index":588,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:88",{"_index":589,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":619,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":684,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":879,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":691,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":466,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:11",{"_index":482,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:14",{"_index":475,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:17",{"_index":477,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:20",{"_index":486,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:23",{"_index":484,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:26",{"_index":478,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:29",{"_index":474,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:5",{"_index":483,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:8",{"_index":485,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":1643,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":1645,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":1646,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":800,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:49",{"_index":811,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:60",{"_index":817,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:71",{"_index":832,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:91",{"_index":824,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":865,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":867,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":869,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":871,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":870,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":868,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/create",{"_index":665,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/update",{"_index":1375,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1000,"title":{},"body":{"classes/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:15",{"_index":1009,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:19",{"_index":1020,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1017,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:37",{"_index":1014,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:52",{"_index":1027,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:66",{"_index":1031,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:73",{"_index":1023,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1060,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1062,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:32",{"_index":1069,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:42",{"_index":1066,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:47",{"_index":1068,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:52",{"_index":1065,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:68",{"_index":1071,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1080,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:81",{"_index":1070,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/posts/dto/comment/create",{"_index":614,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/delete",{"_index":683,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/update",{"_index":1370,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/create",{"_index":673,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/delete",{"_index":698,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/get",{"_index":882,"title":{},"body":{"classes/GetAllPostOfUserDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/update",{"_index":1306,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":443,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:12",{"_index":450,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":457,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:20",{"_index":458,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:24",{"_index":452,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:28",{"_index":455,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:32",{"_index":456,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1127,"title":{},"body":{"classes/Post.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1129,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:101",{"_index":1183,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:111",{"_index":1157,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:121",{"_index":1175,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:131",{"_index":1161,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:142",{"_index":1146,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:152",{"_index":1179,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:162",{"_index":1154,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:57",{"_index":1151,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:70",{"_index":1164,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:81",{"_index":1167,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:91",{"_index":1170,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1227,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1229,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:130",{"_index":1238,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:138",{"_index":1241,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:161",{"_index":1234,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:187",{"_index":1239,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:207",{"_index":1235,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:22",{"_index":1230,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:220",{"_index":1231,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:239",{"_index":1240,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:24",{"_index":1232,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:250",{"_index":1233,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:59",{"_index":1236,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:94",{"_index":1237,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/prisma/prisma.module",{"_index":359,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/infrastructure/prisma/prisma.module.ts",{"_index":1282,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/infrastructure/prisma/prisma.service",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts",{"_index":1284,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:13",{"_index":1289,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:25",{"_index":1295,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:29",{"_index":1294,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:33",{"_index":1292,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/users/dto/get",{"_index":884,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/dto/pagination.dto.ts",{"_index":1104,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/dto/pagination.dto.ts:11",{"_index":1109,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/infrastructure/users/dto/pagination.dto.ts:15",{"_index":1112,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/infrastructure/users/dto/pagination.dto.ts:7",{"_index":1108,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/infrastructure/users/dto/user",{"_index":1393,"title":{},"body":{"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/dto/users",{"_index":1400,"title":{},"body":{"classes/UserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":1478,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:101",{"_index":1507,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:115",{"_index":1510,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:127",{"_index":1490,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:142",{"_index":1494,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:56",{"_index":1497,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:67",{"_index":1503,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:78",{"_index":1500,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:87",{"_index":1513,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":1549,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:14",{"_index":1550,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":1556,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:100",{"_index":1563,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:115",{"_index":1564,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:130",{"_index":1558,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:151",{"_index":1559,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:18",{"_index":1557,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:21",{"_index":1560,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:47",{"_index":1562,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:61",{"_index":1561,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:83",{"_index":1565,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":1650,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":1912,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1915,"title":{},"body":{"index.html":{}}}],["start:prodrunning",{"_index":1917,"title":{},"body":{"index.html":{}}}],["started",{"_index":1738,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1788,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1603,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":115,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":1941,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":361,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":256,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1778,"title":{},"body":{"index.html":{}}}],["studio",{"_index":1905,"title":{},"body":{"index.html":{}}}],["style",{"_index":1951,"title":{},"body":{"index.html":{}}}],["sub",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2030,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2023,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1033,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1013,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1016,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('joinconversation",{"_index":1019,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1022,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1026,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('updatemessage",{"_index":1030,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["substantial",{"_index":2036,"title":{},"body":{"license.html":{}}}],["success",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["success'})@apicreatedresponse({description",{"_index":1149,"title":{},"body":{"controllers/PostsController.html":{}}}],["success'})@arrayfielddecorator('files",{"_index":829,"title":{},"body":{"controllers/FileController.html":{}}}],["success'})@multifielddecorator(['undefined",{"_index":822,"title":{},"body":{"controllers/FileController.html":{}}}],["success'})@singlefielddecorator('./public/avatars",{"_index":810,"title":{},"body":{"controllers/FileController.html":{}}}],["success'})@singlefielddecorator('./public/covers",{"_index":816,"title":{},"body":{"controllers/FileController.html":{}}}],["success.'})@apicreatedresponse({description",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["success.'})@apicreatedresponse({type",{"_index":504,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["success.'})@apioperation({summary",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["success.'})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfuly",{"_index":1150,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":113,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":224,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super('bad",{"_index":724,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('forbidden",{"_index":722,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('gateway",{"_index":743,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('internal",{"_index":733,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('method",{"_index":735,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('not",{"_index":718,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('request",{"_index":727,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('service",{"_index":738,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('unauthorized",{"_index":720,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('unsupported",{"_index":730,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super.canactivate(context",{"_index":241,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":977,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":975,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":974,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":978,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":976,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":1830,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2063,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":904,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2119,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":2143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":2144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":1906,"title":{},"body":{"index.html":{}}}],["t",{"_index":1317,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1653,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1652,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":1794,"title":{},"body":{"index.html":{}}}],["take",{"_index":1571,"title":{},"body":{"injectables/UsersService.html":{}}}],["takes",{"_index":1842,"title":{},"body":{"index.html":{}}}],["tap",{"_index":981,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["teneno",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":1852,"title":{},"body":{"index.html":{}}}],["test",{"_index":1926,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1929,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1928,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1925,"title":{},"body":{"index.html":{}}}],["text",{"_index":448,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateMessageDto.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["th",{"_index":226,"title":{},"body":{"injectables/AtGuard.html":{}}}],["thanks",{"_index":1933,"title":{},"body":{"index.html":{}}}],["thinking",{"_index":1765,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":1754,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1302,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1303,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1304,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":117,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(dto",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword(dto",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('access_token_secret",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('refresh_token_secret",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversations",{"_index":1088,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.find((element",{"_index":1081,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.foreach((element",{"_index":1091,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversationsservice",{"_index":555,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":557,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":566,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":571,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(dto",{"_index":559,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":562,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":564,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":569,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":573,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":848,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":851,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":862,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":854,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findallmessages(message['conversationid",{"_index":1102,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.findallmessages(updatemessagedto['conversationid",{"_index":1098,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmember(conversationid",{"_index":1086,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1254,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.gettokens(newuser.id",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getusersbyid(userid",{"_index":1580,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.handlemessage(exception",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.signasync",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":211,"title":{},"body":{"injectables/AppService.html":{}}}],["this.messagesservice.createmessage",{"_index":1047,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.findallmessages(conversationid",{"_index":1046,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.getmember",{"_index":1050,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.joinconversation",{"_index":1043,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.remove(message",{"_index":1057,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.updatemessage(updatemessagedto",{"_index":1054,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.postsservice.addcomment(dto",{"_index":1217,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(dto",{"_index":1192,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1223,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(dto",{"_index":1207,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1214,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(dto",{"_index":1195,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1198,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1201,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1210,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1220,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1204,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":972,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1274,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1278,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1276,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":596,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":610,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":602,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":608,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.update",{"_index":606,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.post.create",{"_index":1244,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1264,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1251,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1253,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1259,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1271,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1266,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":1567,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":1584,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":1582,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":1578,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":238,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.reflector.getallandoverride('roles",{"_index":1327,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.server.emit('message",{"_index":1048,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.server.emit('refresh",{"_index":1055,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.tovalidate(metatype",{"_index":1593,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":1524,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyemail(userid",{"_index":1542,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":1545,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":1528,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getusersbyemailandname(dto",{"_index":1533,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getusersbyid(userid",{"_index":1531,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":1538,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":1540,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":1536,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":918,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":777,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["thuong",{"_index":2001,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":1997,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":1919,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":728,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1365,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["tips",{"_index":1879,"title":{},"body":{"index.html":{}}}],["title",{"_index":677,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":1756,"title":{},"body":{"index.html":{}}}],["token",{"_index":233,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["tools",{"_index":1860,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2057,"title":{},"body":{"license.html":{}}}],["total",{"_index":1566,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":1942,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1587,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1588,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":959,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trading",{"_index":1949,"title":{},"body":{"index.html":{}}}],["training",{"_index":1978,"title":{},"body":{"index.html":{}}}],["tran",{"_index":1999,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1116,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1117,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1452,"title":{},"body":{"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":934,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["travel",{"_index":1465,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["trim",{"_index":1344,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@isnotempty()@length(3",{"_index":628,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["truong",{"_index":2002,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["truy",{"_index":229,"title":{},"body":{"injectables/AtGuard.html":{}}}],["tslint",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":1900,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":1971,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1957,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2085,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1378,"title":{},"body":{"classes/UpdateMessageDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":1599,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1787,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1005,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["typing(conversationid",{"_index":1024,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["ui/ux",{"_index":1980,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["unavailable",{"_index":739,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["undefined",{"_index":796,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/UserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isarray",{"_index":623,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserProfileDto.html":{}}}],["under",{"_index":1995,"title":{},"body":{"index.html":{}}}],["unit",{"_index":1924,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":506,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["unprocessableentityexception",{"_index":746,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["unsupportedmediatypeexception",{"_index":715,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["update",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["updatecomment",{"_index":1140,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(@body",{"_index":1219,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatecomment(dto",{"_index":1176,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1177,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":496,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":530,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":531,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updated",{"_index":605,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":472,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":497,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":534,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":535,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updatemessage",{"_index":1006,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessage(@messagebody",{"_index":1052,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["updatemessage(updatemessagedto",{"_index":1028,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessagedto",{"_index":1029,"title":{"classes/UpdateMessageDto.html":{}},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto['conversationid",{"_index":1092,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['messageid",{"_index":1095,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['text",{"_index":1097,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatepassword",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":301,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1141,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1203,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1180,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1181,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updaterolesconversation",{"_index":498,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":539,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":540,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateusersavatar",{"_index":1484,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":1504,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":1485,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":1508,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":1486,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":1511,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":808,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":801,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatar(file",{"_index":805,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcover",{"_index":802,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcover(file",{"_index":812,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadedfile",{"_index":833,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":834,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":1728,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":803,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":818,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts",{"_index":804,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":825,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uppercase",{"_index":1353,"title":{},"body":{"classes/SignupDto.html":{}}}],["uptest",{"_index":1923,"title":{},"body":{"index.html":{}}}],["url",{"_index":1299,"title":{},"body":{"injectables/PrismaService.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["url'})@isstring",{"_index":1395,"title":{},"body":{"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{}}}],["url'})@isstring()@validate(imagevalidator",{"_index":1422,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["use",{"_index":787,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":789,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["useclass",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["used",{"_index":924,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["useguards",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(rtguard",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["usenamevalidator",{"_index":651,"title":{"classes/usenameValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user)'})@apiokresponse({description",{"_index":503,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":523,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":821,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1639,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts",{"_index":885,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{},"coverage.html":{}}}],["user.dto.ts:5",{"_index":886,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{}}}],["user.dto.ts:6",{"_index":887,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{}}}],["user.email",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.length",{"_index":1575,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.middleware",{"_index":1552,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":786,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":788,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":792,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":1334,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":1331,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user01",{"_index":659,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user02",{"_index":660,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["useravatardto",{"_index":1392,"title":{"classes/UserAvatarDto.html":{}},"body":{"classes/UserAvatarDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usercoverdto",{"_index":1397,"title":{"classes/UserCoverDto.html":{}},"body":{"classes/UserCoverDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userexist",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":797,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/SignupDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":1364,"title":{},"body":{"classes/SignupDto.html":{}}}],["username123'})@isstring()@isnotempty()@isalphanumeric()@length(3",{"_index":1358,"title":{},"body":{"classes/SignupDto.html":{}}}],["userprofiledto",{"_index":888,"title":{"classes/UserProfileDto.html":{}},"body":{"classes/GetUserProfileByEmailNameDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["users.controller",{"_index":1554,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1521,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":579,"title":{},"body":{"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["userscontroller",{"_index":1477,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":132,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1520,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":594,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["v",{"_index":234,"title":{},"body":{"injectables/AtGuard.html":{}}}],["v4",{"_index":593,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["val",{"_index":1122,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":244,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/CreateConversationDto.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(fullnamevalidator",{"_index":1460,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["validate(image",{"_index":1731,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(imagevalidator",{"_index":1461,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["validate(object",{"_index":1597,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":1363,"title":{},"body":{"classes/SignupDto.html":{}}}],["validate(payload",{"_index":249,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1469,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["validate(req",{"_index":1339,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":1705,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":657,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["validation",{"_index":1812,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":1702,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":1585,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":464,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":1707,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":1699,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":921,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1607,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2089,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1796,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":954,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":965,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":1808,"title":{},"body":{"index.html":{}}}],["versa",{"_index":1815,"title":{},"body":{"index.html":{}}}],["version",{"_index":2080,"title":{},"body":{"properties.html":{}}}],["view",{"_index":2125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"modules/UsersModule.html":{}}}],["vue",{"_index":1963,"title":{},"body":{"index.html":{}}}],["warn",{"_index":955,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":967,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warranties",{"_index":2042,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2038,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1913,"title":{},"body":{"index.html":{}}}],["web",{"_index":1966,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":1748,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["websocketgateway",{"_index":1032,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["websocketserver",{"_index":1010,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["whether",{"_index":2054,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":1610,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":2014,"title":{},"body":{"license.html":{}}}],["world",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{}}}],["writtenposts",{"_index":1250,"title":{},"body":{"injectables/PostsService.html":{}}}],["x",{"_index":1872,"title":{},"body":{"index.html":{}}}],["years",{"_index":1419,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["yes",{"_index":706,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/LoggerService.html":{}}}],["you'd",{"_index":1937,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2075,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2072,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2073,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":1708,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2074,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                    Private\n                                    Static\n                                handleResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(request, response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    request: Request,\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        timestamp: new Date().toISOString(),\n        message: exception.stack,\n        path: request.url,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: '{code: 1, data: {Hello world}, message: \"\"'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Home')\n@Controller('/')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Teneno homepage' })\n  @ApiResponse({\n    status: 200,\n    description: '{code: 1, data: {Hello world}, message: \"\"',\n  })\n  @ApiResponse({ status: 404, description: 'Not found' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './infrastructure/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\n\n@Module({\n  imports: [\n    InterceptorModule,\n    AuthModule,\n    PrismaModule,\n    UsersModule,\n    FilesModule,\n    PostsModule,\n    ConversationsModule,\n    MessagesModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      // envFilePath: ['.env'],\n    }),\n    LoggerModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: `${__dirname}/../documentation`,\n      // join(__dirname, '..', 'client'),\n      renderPath: '/',\n      // exclude: ['/api*'],\n    }),\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n    {\n      provide: APP_GUARD,\n      useClass: AtGuard,\n    },\n  ],\n})\nexport class AppModule implements NestModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    consumer.apply(LoggerContextMiddleware).forRoutes('*');\n    //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n    //   .forRoutes(UsersController);\n    // .forRoutes('users');\n    // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n    // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\nexport class AppService {\n  constructor(@Logger('AppService') private logger: LoggerService) {}\n\n  getHello(): string {\n    this.logger.log('Hello World', '200');\n    return 'Hello World from Teneno!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AtGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  // nếu true thì cho phép truy cập bằng access-token , và ngược lại\n  public canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) return true;\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../interfaces';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  validate(payload: IJwtPayload): IJwtPayload {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success.'})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: 'Success.'})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success.'})@ApiOperation({summary: 'Login to user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: 'Success.'})@ApiCreatedResponse({description: 'The new account has been created.', type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success.'})@ApiOperation({summary: 'Update user password (all)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto';\nimport { ITokens } from './interfaces';\n\n@ApiTags('Auth')\n@ApiOkResponse({ description: 'Success.' })\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden.' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiConflictResponse({ description: 'Conflict existed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {\n    this.authService = authService;\n  }\n\n  @Public()\n  @Post('signup')\n  @ApiOperation({ summary: 'Create new user account' })\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiCreatedResponse({\n    description: 'The new account has been created.',\n    type: SignupDto,\n  })\n  async signupLocal(@Body() dto: SignupDto): Promise {\n    return this.authService.signupLocal(dto);\n  }\n\n  @Public()\n  @Post('signin')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiOperation({ summary: 'Login to user account (user)' })\n  async signinLocal(@Body() dto: LoginDto): Promise {\n    return this.authService.signinLocal(dto);\n  }\n\n  @Post('logout')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiOperation({ summary: 'Logout user account (user)' })\n  async logout(@GetCurrentUserId() userId: string): Promise {\n    return this.authService.logout(userId);\n  }\n\n  @Post('refresh')\n  @ApiBearerAuth()\n  @UseGuards(RtGuard)\n  @ApiOkResponse({ description: 'Success.' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Logout account on all devices (user)' })\n  async refreshToken(\n    @GetCurrentUserId() userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n    return this.authService.refreshToken(userId, refreshToken);\n  }\n\n  @Put('password')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiOperation({ summary: 'Update user password (all)' })\n  async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n    return this.authService.updatePassWord(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [PrismaModule, JwtModule],\n  controllers: [AuthController],\n  providers: [AuthService, AtStrategy, RtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  ForbiddenException,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport { ITokens } from './interfaces';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { comparePassword, hashPassword } from 'src/core/helpers/hash';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(ConfigService)\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getTokens(userId: string, email: string): Promise {\n    const [at, rt] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get('ACCESS_TOKEN_SECRET'),\n          expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n        },\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get('REFRESH_TOKEN_SECRET'),\n          expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n        },\n      ),\n    ]);\n    return { accessToken: at, refreshToken: rt };\n  }\n\n  async updateRtHash(userId: string, rt: string) {\n    const hash = await hashPassword(rt);\n    await this.prismaService.user.update({\n      where: {\n        id: userId,\n      },\n      data: {\n        hashedRefreshToken: hash,\n      },\n    });\n  }\n\n  async signupLocal(dto: SignupDto): Promise {\n    const hash = await hashPassword(dto.password);\n\n    const userExist = await this.prismaService.user.findMany({\n      where: {\n        OR: [{ email: dto.email }, { username: dto.username }],\n      },\n    });\n\n    if (userExist.length > 0)\n      throw new ConflictException('User already exists');\n\n    const newUser = await this.prismaService.user.create({\n      data: {\n        email: dto.email,\n        password: hash,\n        username: dto.username,\n      },\n    });\n\n    const tokens = await this.getTokens(newUser.id, newUser.email);\n    await this.updateRtHash(newUser.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async signinLocal(dto: LoginDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n    if (!user) throw new ForbiddenException('Access denied');\n\n    const passwordMatches = await comparePassword(dto.password, user.password);\n    if (!passwordMatches) throw new ForbiddenException('Access denied');\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async logout(userId: string): Promise {\n    await this.prismaService.user.updateMany({\n      where: {\n        id: userId,\n        hashedRefreshToken: {\n          not: null,\n        },\n      },\n      data: { hashedRefreshToken: null },\n    });\n  }\n\n  async refreshToken(userId: string, refreshToken: string): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n    if (!user || !user.hashedRefreshToken)\n      throw new ForbiddenException('Access denied');\n\n    const hashMatches = await comparePassword(\n      refreshToken,\n      user.hashedRefreshToken,\n    );\n    if (!hashMatches) throw new ForbiddenException('Access denied');\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async updatePassWord(dto: UpdatePasswordDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n\n    const passwordMatches = await comparePassword(\n      dto.oldPassword,\n      user.password,\n    );\n\n    if (!passwordMatches) throw new ForbiddenException('Access denied');\n\n    if (dto.newPassword === dto.oldPassword)\n      throw new ForbiddenException(\n        'New password must be different from old password',\n      );\n\n    if (passwordMatches) {\n      await this.prismaService.user.update({\n        where: { email: dto.email },\n        data: {\n          password: await hashPassword(dto.newPassword),\n        },\n      });\n    }\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\n\nexport class CommentEntity {\n  @IsNotEmpty()\n  @IsString()\n  id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  reactions: number[];\n\n  @IsArray()\n  @IsNotEmpty()\n  replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ConversationEntity {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty({ required: false, nullable: true })\n  description: string | null;\n\n  @ApiProperty()\n  avatar: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n\n  @ApiProperty()\n  members: string[];\n\n  @ApiProperty()\n  creator: string;\n\n  @ApiProperty()\n  admins: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: 'Success.'})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { ConversationsService } from './conversations.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiForbiddenResponse({ description: 'Forbidden.' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n})\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n  constructor(private conversationsService: ConversationsService) {\n    this.conversationsService = conversationsService;\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new conversation (user)' })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  @ApiCreatedResponse({\n    type: ConversationEntity,\n    description: 'The new conversation has been created.',\n  })\n  async createConversation(@Body() dto: CreateConversationDto) {\n    return await this.conversationsService.createConversation(dto);\n  }\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    isArray: true,\n    description: 'Success.',\n  })\n  async getAllConversations(@Body() dto: GetAllConversationDto) {\n    return this.conversationsService.getAllConversations(dto);\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    description: 'Success.',\n  })\n  async getConversationById(\n    @Param('id') id: string,\n    @Body() dto: GetOneConversationDto,\n  ) {\n    return this.conversationsService.getConversationById(id, dto);\n  }\n\n  @Patch(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  updateConversationById(\n    @Param('id') id: string,\n    @Body() dto: UpdateConversationDto,\n  ) {\n    return this.conversationsService.updateConversationById(id, dto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Delete one conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async deleteConversationById(\n    @Param('id') id: string,\n    @Body() dto: DeleteConversationDto,\n  ) {\n    return this.conversationsService.deleteConversationById(id, dto);\n  }\n\n  @Patch(':conversationId/updateMembers')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update members list of current conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async updateMembersConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateMembersConversationDto,\n  ) {\n    return this.conversationsService.updateMembersConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/deleteAdmins')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Delete one admin of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async deleteOneAdminConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: DeleteOneAdminConversationDto,\n  ) {\n    return this.conversationsService.deleteOneAdminConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/updateRoles')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Change role of any member of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async updateRolesConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateRolesConversationDto,\n  ) {\n    return this.conversationsService.updateRolesConversation(\n      conversationId,\n      dto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_imports\n\n\n\ncluster_ConversationsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [ConversationsController],\n  providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class ConversationsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async createConversation(dto: CreateConversationDto) {\n    const newConversation = await this.prismaService.conversation.create({\n      data: {\n        id: uuid(),\n        name: dto.name,\n        description: dto.description,\n        avatar: '',\n        members: dto.members,\n        admins: dto.admins,\n        creator: dto.creator,\n      },\n    });\n    return newConversation;\n  }\n\n  async getAllConversations(dto: GetAllConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n      },\n      select: {\n        id: true,\n        name: true,\n        avatar: true,\n      },\n    });\n    return list;\n  }\n\n  async getConversationById(id: string, dto: GetOneConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n        AND: {\n          id: id,\n        },\n      },\n    });\n    return list;\n  }\n\n  updateConversationById(id: string, dto: UpdateConversationDto) {\n    const updated = this.prismaService.conversation.update({\n      where: {\n        id: id,\n      },\n      data: {\n        name: dto.name,\n        description: dto.description,\n        avatar: dto.avatar,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteConversationById(id: string, dto: DeleteConversationDto) {\n    const list = await this.prismaService.conversation.findUnique({\n      where: {\n        id: id,\n      },\n    });\n    if (list['creator'] === dto.userId) {\n      await this.prismaService.conversation.delete({\n        where: {\n          id: id,\n        },\n      });\n      return '';\n    }\n    return false;\n  }\n\n  async updateMembersConversation(\n    conversationId: string,\n    dto: UpdateMembersConversationDto,\n  ) {\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteOneAdminConversation(\n    conversationId: string,\n    dto: DeleteOneAdminConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n\n    if (list.length === 0) {\n      return 'You not creator of this conversation';\n    }\n    const updated = list[0]['admins'].filter((admin) => admin !== dto.userId);\n\n    await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: updated,\n      },\n    });\n    return updated;\n  }\n\n  async updateRolesConversation(\n    conversationId: string,\n    dto: UpdateRolesConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n    if (list.length === 0) {\n      return 'You not creator of this conversation';\n    }\n\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: dto.admins,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n  'text',\n  'postId',\n  'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'creator01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01', required: false, nullable: true})@IsString()@IsNotEmpty()@Length(3, 120)@MinLength(2, {message: 'Description is too short, must be at least 3 characters!'})@MaxLength(121, {message: 'Description is too long, must be at most 120 characters!'})@Validate(usenameValidator, {message: 'Description must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01'})@IsString()@IsNotEmpty()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class CreateConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Name must be not begin with number!',\n  })\n  name: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n    required: false,\n    nullable: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 120)\n  @MinLength(2, {\n    message: 'Description is too short, must be at least 3 characters!',\n  })\n  @MaxLength(121, {\n    message: 'Description is too long, must be at most 120 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Description must be not begin with number!',\n  })\n  description?: string;\n\n  @ApiProperty({\n    type: String,\n    example: ['user01', 'user02'],\n  })\n  @IsArray()\n  members: string[];\n\n  @ApiProperty({\n    type: String,\n    example: ['admin01', 'admin02'],\n  })\n  @IsArray()\n  admins: string[];\n\n  @ApiProperty({\n    type: String,\n    example: 'creator01',\n  })\n  @IsString()\n  creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels } from '@nestjs/swagger';\n\n@ApiExtraModels()\nexport class CreateMessageDto {\n  id: string;\n  senderId: string;\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                files\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/create-post.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/create-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/create-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/create-post.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString()\n  title: string;\n\n  @IsString()\n  description: string;\n\n  @IsArray()\n  files: string[];\n\n  @IsString()\n  authorId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetAllConversationDto } from './get-conversation.dto';\n\nexport class DeleteConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/delete-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorAcceptableException.html":{"url":"classes/ErrorAcceptableException.html","title":"class - ErrorAcceptableException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorAcceptableException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotAcceptableException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorBadGatewayException.html":{"url":"classes/ErrorBadGatewayException.html","title":"class - ErrorBadGatewayException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorBadGatewayException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BadGatewayException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:77\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorBadRequestException.html":{"url":"classes/ErrorBadRequestException.html","title":"class - ErrorBadRequestException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorBadRequestException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorForbiddenException.html":{"url":"classes/ErrorForbiddenException.html","title":"class - ErrorForbiddenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorForbiddenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ForbiddenException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorGatewayTimeoutException.html":{"url":"classes/ErrorGatewayTimeoutException.html","title":"class - ErrorGatewayTimeoutException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorGatewayTimeoutException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    GatewayTimeoutException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:83\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorInternalServerException.html":{"url":"classes/ErrorInternalServerException.html","title":"class - ErrorInternalServerException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorInternalServerException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    InternalServerErrorException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorMethodNotAllowedException.html":{"url":"classes/ErrorMethodNotAllowedException.html","title":"class - ErrorMethodNotAllowedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorMethodNotAllowedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    MethodNotAllowedException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:64\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorNotFoundException.html":{"url":"classes/ErrorNotFoundException.html","title":"class - ErrorNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorRequestTimeoutException.html":{"url":"classes/ErrorRequestTimeoutException.html","title":"class - ErrorRequestTimeoutException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorRequestTimeoutException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    RequestTimeoutException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorServiceUnavailableException.html":{"url":"classes/ErrorServiceUnavailableException.html","title":"class - ErrorServiceUnavailableException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorServiceUnavailableException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ServiceUnavailableException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:70\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorUnauthorizedException.html":{"url":"classes/ErrorUnauthorizedException.html","title":"class - ErrorUnauthorizedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorUnauthorizedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ForbiddenException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorUnsupportedMediaTypeException.html":{"url":"classes/ErrorUnsupportedMediaTypeException.html","title":"class - ErrorUnsupportedMediaTypeException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorUnsupportedMediaTypeException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    UnsupportedMediaTypeException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsIntereptor.html":{"url":"injectables/ErrorsIntereptor.html","title":"injectable - ErrorsIntereptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsIntereptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/exception.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n@Injectable()\nexport class ErrorsIntereptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError((err) =>\n          throwError(\n            () => new HttpException('New message', HttpStatus.BAD_GATEWAY),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n  constructor(private prismaService: PrismaService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const userId = req.params.userId;\n    const userExist = await this.prismaService.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n      },\n    });\n    if (userExist === null || userExist === undefined || userExist.id === '') {\n      throw new NotFoundException('User not found');\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: 'Success'})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UploadedFile,\n  UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n  ApiBearerAuth,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport {\n  ArrayFieldDecorator,\n  SingleFieldDecorator,\n  MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('files')\nexport class FileController {\n  constructor(private readonly fileService: FilesService) {}\n\n  @Post('avatar')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n  @ApiOkResponse({ description: 'Success' })\n  @SingleFieldDecorator('./public/avatars')\n  async uploadAvatar(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadAvatar(file);\n  }\n\n  @Post('cover')\n  @ApiOperation({ summary: 'Upload cover file form data (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  @SingleFieldDecorator('./public/covers')\n  async uploadCover(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadCover(file);\n  }\n\n  @Post('posts')\n  @ApiOperation({ summary: 'Upload post with multi images (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  @ArrayFieldDecorator('files', true, 10, './public/posts')\n  async uploadPosts(\n    @UploadedFiles() files: Array,\n  ): Promise {\n    return this.fileService.uploadPosts(files);\n  }\n\n  @Post('multi')\n  @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  @MultiFieldDecorator(\n    [\n      { name: 'item_1', maxCount: 1, required: true },\n      { name: 'item_2', maxCount: 1 },\n      { name: 'item_3', maxCount: 1 },\n      { name: 'item_4', maxCount: 1 },\n      { name: 'item_5', maxCount: 1 },\n    ],\n    './public/multi',\n  )\n  async uploadMulti(\n    @UploadedFiles() files: Express.Multer.File[],\n  ): Promise {\n    return this.fileService.uploadMulti(files);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/get-conversation.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllPostOfUserDto.html":{"url":"classes/GetAllPostOfUserDto.html","title":"class - GetAllPostOfUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllPostOfUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/get-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/get-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllPostOfUserDto {\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserProfileByEmailNameDto.html":{"url":"classes/GetUserProfileByEmailNameDto.html","title":"class - GetUserProfileByEmailNameDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserProfileByEmailNameDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/get-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/get-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/get-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { UserProfileDto } from '.';\n\nexport class GetUserProfileByEmailNameDto extends PartialType(UserProfileDto) {\n  email: string;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport type { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void): void {\n    console.log(`Request ${req}...`);\n    console.log(`Response ${res}...`);\n    return next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/sigin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/sigin.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/sigin.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesGateway.html":{"url":"classes/MessagesGateway.html","title":"class - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                typing\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(conversationId: string, createMessageDto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinConversation')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(conversationId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  WebSocketServer,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\n\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n  @WebSocketServer() server: Server;\n  constructor(private readonly messagesService: MessagesService) {}\n\n  @SubscribeMessage('joinConversation')\n  joinConversation(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('senderId') senderId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    return this.messagesService.joinConversation(\n      conversationId,\n      senderId,\n      client.id,\n    );\n  }\n\n  @SubscribeMessage('findAllMessages')\n  findAllMessages(@MessageBody('conversationId') conversationId: string) {\n    return this.messagesService.findAllMessages(conversationId);\n  }\n\n  @SubscribeMessage('createMessage')\n  async createMessage(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody() createMessageDto: CreateMessageDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const message = await this.messagesService.createMessage(\n      conversationId,\n      createMessageDto,\n      client.id,\n    );\n    this.server.emit('message', message);\n    return message;\n  }\n\n  @SubscribeMessage('typing')\n  async typing(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('isTyping') isTyping: boolean,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const name = await this.messagesService.getMember(\n      conversationId,\n      client.id,\n    );\n\n    client.broadcast.emit('typing', { senderId: name, isTyping });\n  }\n\n  @SubscribeMessage('updateMessage')\n  updateMessage(@MessageBody() updateMessageDto: UpdateMessageDto) {\n    const refresh = this.messagesService.updateMessage(updateMessageDto);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n\n  @SubscribeMessage('removeMessage')\n  async remove(@MessageBody() message: string) {\n    const refresh = await this.messagesService.remove(message);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                getMember\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMessage\n                        \n                    \n                \n            \n            \n                \ncreateMessage(conversationId: string, createMessageDto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { id: any; senderId: any; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMember\n                        \n                    \n                \n            \n            \n                \ngetMember(conversationId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class MessagesService {\n  conversations = [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ];\n\n  joinConversation(conversationId: string, senderId: string, clientId: string) {\n    this.conversations.find((element) => element.id === conversationId).members[\n      clientId\n    ] = senderId;\n    return Object.values(\n      this.conversations.find((element) => element.id === conversationId)\n        .members,\n    );\n  }\n\n  findAllMessages(conversationId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .messages;\n  }\n\n  getMember(conversationId: string, clientId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .members[clientId];\n  }\n\n  createMessage(\n    conversationId: string,\n    createMessageDto: CreateMessageDto,\n    clientId: string,\n  ) {\n    const message = {\n      id: uuid(),\n      senderId: this.getMember(conversationId, clientId),\n      text: createMessageDto.text,\n    };\n    this.conversations\n      .find((element) => element.id === conversationId)\n      .messages.push(message);\n    return message;\n  }\n\n  updateMessage(updateMessageDto: UpdateMessageDto) {\n    this.conversations.forEach((element) => {\n      if (element.id === updateMessageDto['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === updateMessageDto['messageId']) {\n            item.text = updateMessageDto['text'];\n          }\n        });\n      }\n    });\n    return this.findAllMessages(updateMessageDto['conversationId']);\n  }\n\n  async remove(message: string) {\n    this.conversations.forEach((element) => {\n      if (element.id === message['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === message['messageId']) {\n            element.messages.splice(element.messages.indexOf(item), 1);\n          }\n        });\n      }\n    });\n\n    return this.findAllMessages(message['conversationId']);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                limit\n                            \n                            \n                                order\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/pagination.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: Number, example: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/pagination.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'asc, desc', example: 'asc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/pagination.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class PaginationDto {\n  @IsString()\n  @ApiProperty({ type: Number, example: 1 })\n  current: string;\n\n  @IsString()\n  @ApiProperty({ type: Number, example: 3 })\n  limit: string;\n\n  @IsString()\n  @ApiProperty({ type: String, description: 'asc, desc', example: 'asc' })\n  order: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Post {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id (all)'})@ApiOkResponse({description: 'Success'})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(dto: GetAllPostOfUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllPostOfUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n  ParseUUIDPipe,\n  Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { Public } from '../auth/decorators';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  UpdatePostDto,\n  ReactionsPost,\n  GetAllPostOfUserDto,\n} from './dto';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment';\n\n@ApiTags('Posts')\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({ description: 'Not found' })\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('posts')\nexport class PostsController {\n  constructor(private postsService: PostsService) {}\n\n  @Post()\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Get all posts of user by user-id (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  @ApiCreatedResponse({ description: 'Create new post successfuly' })\n  async createPost(@Body() dto: CreatePostDto) {\n    return this.postsService.createPost(dto);\n  }\n\n  @Post('private/all')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get all public and private posts of user (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getAllPostsOfUser(@Body() dto: GetAllPostOfUserDto) {\n    return this.postsService.getAllPostsOfUser(dto);\n  }\n\n  @Get(':userId/all')\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all public posts of user by user-id (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getAllPublicPosts(@Param('userId') userId: string) {\n    return this.postsService.getAllPublicPosts(userId);\n  }\n\n  @Get(':postId')\n  @Public()\n  @ApiOperation({ summary: 'Get one post of user (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getOnePostById(@Param('postId', new ParseUUIDPipe()) postId: string) {\n    return this.postsService.getOnePostById(postId);\n  }\n\n  @Patch('update')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update one post of user (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updatePost(@Body() dto: UpdatePostDto) {\n    return this.postsService.updatePost(dto);\n  }\n\n  @Delete('delete')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete one post of user (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deletePost(@Body() dto: DeleteOnePost) {\n    return this.postsService.deletePost(dto);\n  }\n\n  @Post('reaction')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'React to post of user (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async reactionPost(@Body() dto: ReactionsPost) {\n    return this.postsService.reactionPost(dto);\n  }\n\n  @Public()\n  @Get(':postId/comments')\n  @ApiOperation({ summary: 'Get all comments of the post (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getAllComments(@Param('postId', new ParseUUIDPipe()) postId: string) {\n    console.log(postId);\n    return this.postsService.getAllComments(postId);\n  }\n\n  @Post('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Add a new comment to post of user (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async addComment(@Body() dto: CreateCommentDto) {\n    return this.postsService.addComment(dto);\n  }\n\n  @Put('comments/update/text')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update a comment in post (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateComment(@Body() dto: UpdateCommentTextDto) {\n    return this.postsService.updateComment(dto);\n  }\n\n  @Delete('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete a comment in post (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deleteComment(@Body() dto: DeleteCommentDto) {\n    return this.postsService.deleteComment(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:220\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(dto: GetAllPostOfUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllPostOfUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  GetAllPostOfUserDto,\n  ReactionsPost,\n  UpdatePostDto,\n} from './dto';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prismaService: PrismaService) {}\n  async createPost(dto: CreatePostDto) {\n    const findUser = await this.prismaService.user.findUnique({\n      where: {\n        id: dto.authorId,\n      },\n    });\n\n    if (!findUser) {\n      return new NotFoundException('User not found');\n    }\n\n    const post = await this.prismaService.post.create({\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n        authorId: dto.authorId,\n        // categories: {\n        //   create: [\n        //     {\n        //       createAt: new Date(),\n        //       category: {\n        //         create: {\n        //           id: uuid(),\n        //           name: 'New category',\n        //         },\n        //       },\n        //     },\n        //   ],\n        // },\n      },\n    });\n    return post;\n  }\n\n  async getAllPostsOfUser(dto: GetAllPostOfUserDto) {\n    const list = await this.prismaService.user.findMany({\n      where: {\n        id: dto.userId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    if (!list) {\n      return new NotFoundException('User not found');\n    }\n    if (list.length === 0) {\n      return new NotFoundException('User not have post!');\n    }\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: dto.userId,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getAllPublicPosts(userId: string) {\n    const list = await this.prismaService.user.findMany({\n      where: {\n        id: userId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    if (!list) {\n      return new NotFoundException('User not found');\n    }\n    if (list.length === 0) {\n      return new NotFoundException('User not have post!');\n    }\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: userId,\n        published: true,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getOnePostById(postId: string) {\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n    });\n  }\n\n  async updatePost(dto: UpdatePostDto) {\n    const list = await this.getOnePostById(dto.postId);\n\n    if (!list) {\n      return new NotFoundException('Post not found');\n    }\n\n    if (list.authorId !== dto.authorId) {\n      return new ForbiddenException('You are not author of this post');\n    }\n\n    return await this.prismaService.post.update({\n      where: {\n        id: dto.postId,\n      },\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n      },\n    });\n  }\n\n  async deletePost(dto: DeleteOnePost) {\n    const list = await this.prismaService.user.findUnique({\n      where: {\n        id: dto.authorId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    const identify = list.writtenPosts.find((post) => post.id === dto.postId);\n    if (!identify) {\n      return new NotFoundException('Post not found');\n    }\n\n    await this.prismaService.post.delete({\n      where: {\n        id: dto.postId,\n      },\n    });\n    return '';\n  }\n\n  async reactionPost(dto: ReactionsPost) {\n    const checkExist = await this.prismaService.reaction.findMany({\n      where: {\n        postId: dto.postId,\n        userId: dto.favouritorId,\n      },\n    });\n\n    if (checkExist.length > 0) {\n      return new BadRequestException('You already reacted to this post');\n    }\n    return await this.prismaService.reaction.create({\n      data: {\n        userId: dto.favouritorId,\n        postId: dto.postId,\n        type: dto.reactionType,\n      },\n    });\n  }\n\n  async getAllComments(postId: string) {\n    console.log(postId);\n\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n      select: {\n        comments: true,\n      },\n    });\n  }\n\n  async addComment(dto: CreateCommentDto) {\n    const checkPost = await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n    });\n\n    if (!checkPost) {\n      return new NotFoundException('Post not found');\n    }\n    return this.prismaService.comment.create({\n      data: {\n        text: dto.text,\n        postId: dto.postId,\n        authorId: dto.userId,\n      },\n    });\n  }\n\n  async updateComment(dto: UpdateCommentTextDto) {\n    return await this.prismaService.comment.update({\n      where: {\n        id: dto.id,\n      },\n      data: {\n        text: dto.text,\n      },\n    });\n  }\n\n  async deleteComment(dto: DeleteCommentDto) {\n    await this.prismaService.comment.delete({\n      where: {\n        id: dto.id,\n      },\n    });\n    return '';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService, ConfigModule],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor() {\n    super({\n      datasources: {\n        db: {\n          url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n          // url: process.env.DATABASE_URL,\n        },\n      },\n    });\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                favouritorId\n                            \n                            \n                                postId\n                            \n                            \n                                reactionType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsJSON, IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\n  title?: string;\n  description?: string;\n  files?: string[];\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\nexport class ReactionsPost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE } from './roles.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    // return false;\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () =>\n      user.roles.some((role) => !!requiredRoles.find((item) => item === role));\n\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class RtGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n  constructor(\n    @Inject(ConfigService)\n    private config: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('authorization').replace('Bearer', '').trim();\n    return {\n      ...payload,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/signup.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/signup.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/signup.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123'})@IsString()@IsNotEmpty()@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/signup.dto.ts:60\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class SignupDto {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  @Length(8, 21)\n  @MinLength(7, {\n    message: 'Password is too short, must be at least 8 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Password is too long, must be at most 20 characters!',\n  })\n  @Validate(passwordValidator, {\n    message:\n      'Password must be at contain at least one number, one uppercase letter and one special character',\n  })\n  password: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'username123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Username must be not begin with number!',\n  })\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(timeout(1000));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/update-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMessageDto } from './create-message.dto';\n\nexport class UpdateMessageDto extends PartialType(\n  CreateMessageDto,\n) {\n  id: string;\n  conversationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/password.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/password.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/password.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class UpdatePasswordDto {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                files\n                            \n                            \n                                postId\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsJSON, IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\n  title?: string;\n  description?: string;\n  files?: string[];\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\nexport class ReactionsPost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAvatarDto.html":{"url":"classes/UserAvatarDto.html","title":"class - UserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/user-avatar.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/user-avatar.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class UserAvatarDto {\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  avatar: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCoverDto.html":{"url":"classes/UserCoverDto.html","title":"class - UserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/user-cover.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cover\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/user-cover.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class UserCoverDto {\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  cover: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileDto.html":{"url":"classes/UserProfileDto.html","title":"class - UserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/users-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@Validate(imageValidator, {message: 'Avatar format is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@Validate(imageValidator, {message: 'Cover format is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:90\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsDate,\n  IsNumber,\n  IsString,\n  Length,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport {\n  fullNameValidator,\n  imageValidator,\n  phoneNumberValidator,\n} from '../../../core/validators';\n\nexport class UserProfileDto {\n  @ApiProperty({\n    type: String,\n    example: 'Hello ABC',\n  })\n  @IsString()\n  @Length(3, 45)\n  @MinLength(2, {\n    message: 'Full name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(46, {\n    message: 'Name is too long, must be at most 45 characters!',\n  })\n  @Validate(fullNameValidator, {\n    message: 'Full name must be not begin with number!',\n  })\n  fullName: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  @Validate(imageValidator, {\n    message: 'Avatar format is invalid!',\n  })\n  avatar: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  @Validate(imageValidator, {\n    message: 'Cover format is invalid!',\n  })\n  cover: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Single',\n  })\n  @IsString()\n  marriageStatus: string;\n\n  @ApiProperty({\n    type: [],\n    example: ['Music', 'Sport', 'Travel'],\n  })\n  @IsArray()\n  interests: [];\n\n  @ApiProperty({\n    type: String,\n    example: '123, Address A, City B, Country C',\n  })\n  @IsString()\n  @MaxLength(101, {\n    message: 'Address is too long, must be at most 100 characters!',\n  })\n  address: string;\n\n  @ApiProperty({\n    type: String,\n    example: '09999999999',\n  })\n  @IsString()\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n  phone: string;\n\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\n  @Type(() => Date)\n  @IsDate()\n  birthdate: Date;\n\n  @ApiProperty({\n    type: Number,\n    example: 19,\n  })\n  @IsNumber()\n  @Min(17, {\n    message: 'You must be at least 18 years old!',\n  })\n  @Max(101, {\n    message: 'You must be at most 100 years old!',\n  })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    example: 'This is bio of Hello ABC account',\n  })\n  @IsString()\n  @MaxLength(151, {\n    message: 'Bio is too long, must be at most 150 characters!',\n  })\n  bio: string;\n\n  @ApiProperty({\n    type: Number,\n    description: '1: male, 2: female, 0: other',\n    example: 1,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(2)\n  gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByEmail\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUsersByEmailAndName\n                            \n                            \n                                    Async\n                                getUsersById\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByEmail(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @RoleDecorator(ROLE.ADMIN)@Delete(':userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id (admin)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('all')@RoleDecorator(ROLE.ADMIN)@ApiBearerAuth()@ApiOperation({summary: 'Get list all public user (admin)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersByEmailAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByEmailAndName(dto: GetUserProfileByEmailNameDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user email and username (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetUserProfileByEmailNameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':userId')@ApiOperation({summary: 'Get public user by user id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  ParseUUIDPipe,\n  Patch,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto';\nimport { RoleDecorator } from 'src/core/roles';\nimport { ROLE } from 'src/core/roles/roles.enum';\nimport {\n  GetUserProfileByEmailNameDto,\n  PaginationDto,\n  UserAvatarDto,\n  UserCoverDto,\n  UserProfileDto,\n} from './dto';\nimport { UsersService } from './users.service';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({ description: 'Not found' })\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {\n    this.usersService = usersService;\n  }\n\n  @Get('all')\n  @RoleDecorator(ROLE.ADMIN)\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get list all public user (admin)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getAllUsers(@Query() dto: PaginationDto) {\n    return this.usersService.getAllUsers(dto);\n  }\n\n  @Public()\n  @Get(':userId')\n  @ApiOperation({ summary: 'Get public user by user id (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getUsersById(@Param('userId', new ParseUUIDPipe()) userId: string) {\n    return this.usersService.getUsersById(userId);\n  }\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Get user profile by user email and username (user)',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getUsersByEmailAndName(@Body() dto: GetUserProfileByEmailNameDto) {\n    return this.usersService.getUsersByEmailAndName(dto);\n  }\n\n  @Patch('profile/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async updateUsersProfile(\n    @Param('userId') userId: string,\n    @Body() dto: UserProfileDto,\n  ) {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('profile/avatar/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersAvatar(\n    @Param('userId') userId: string,\n    @Body() dto: UserAvatarDto,\n  ) {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('profile/cover/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersCover(\n    @Param('userId') userId: string,\n    @Body() dto: UserCoverDto,\n  ) {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('profile/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user profile by email & password (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async deleteUserByEmail(\n    @Param('userId') userId: string,\n    @Body() dto: LoginDto,\n  ) {\n    return this.usersService.deleteUserByEmail(userId, dto);\n  }\n\n  @RoleDecorator(ROLE.ADMIN)\n  @Delete(':userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user by user-id (admin)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deleteUserById(@Param('userId') userId: string) {\n    return this.usersService.deleteUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [PrismaModule, AuthModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    // consumer\n    //   .apply(ExistedUserMiddleware)\n    //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByEmail\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUsersByEmailAndName\n                            \n                            \n                                    Async\n                                getUsersById\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByEmail(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersByEmailAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByEmailAndName(dto: GetUserProfileByEmailNameDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetUserProfileByEmailNameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:100\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport {\n  GetUserProfileByEmailNameDto,\n  PaginationDto,\n  UserAvatarDto,\n  UserCoverDto,\n  UserProfileDto,\n} from './dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prismaService: PrismaService) {}\n\n  async getAllUsers(dto: PaginationDto) {\n    const total = await this.prismaService.user.count();\n    const user = await this.prismaService.user.findMany({\n      skip: Number(dto.limit) * (Number(dto.current) - 1),\n      take: Number(dto.limit),\n      orderBy: {\n        id: dto.order as any,\n      },\n      select: {\n        id: true,\n        email: true,\n        username: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n    return {\n      total,\n      orderBy: dto.order,\n      pageItems: user.length,\n      pageLimit: Number(dto.limit),\n      pageCurrent: Number(dto.current),\n      users: user,\n    };\n  }\n\n  async getUsersById(userId: string) {\n    return await this.prismaService.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n  }\n\n  async getUsersByEmailAndName(dto: GetUserProfileByEmailNameDto) {\n    const user = await this.prismaService.user.findMany({\n      where: {\n        AND: [\n          {\n            email: dto.email,\n            username: dto.username,\n          },\n        ],\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n    return user;\n  }\n\n  async updateUsersProfile(userId: string, dto: UserProfileDto) {\n    await this.prismaService.userProfile.upsert({\n      where: {\n        userId: userId,\n      },\n      create: {\n        ...dto,\n        userId: userId,\n      },\n      update: {\n        ...dto,\n      },\n    });\n    const newProfile = await this.getUsersById(userId);\n    return newProfile;\n  }\n\n  async updateUsersAvatar(userId: string, dto: UserAvatarDto) {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newProfile = await this.getUsersById(userId);\n    return newProfile;\n  }\n\n  async updateUsersCover(userId: string, dto: UserCoverDto) {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newProfile = await this.getUsersById(userId);\n    return newProfile;\n  }\n\n  async deleteUserByEmail(userId: string, dto: LoginDto) {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new ForbiddenException('Access denied');\n\n    const matchPassword = await comparePassword(dto.password, user.password);\n\n    if (!matchPassword) throw new ForbiddenException('Access denied');\n\n    await this.prismaService.userProfile.delete({\n      where: {\n        userId: userId,\n      },\n    });\n    return matchPassword;\n  }\n\n  async deleteUserById(userId: string) {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException('Access denied');\n\n    await this.prismaService.user.delete({\n      where: {\n        id: userId,\n      },\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorAcceptableException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorBadGatewayException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorBadRequestException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorForbiddenException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorGatewayTimeoutException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorInternalServerException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorMethodNotAllowedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorRequestTimeoutException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorServiceUnavailableException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorUnauthorizedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorUnsupportedMediaTypeException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/exception.interceptor.ts\n            \n            injectable\n            ErrorsIntereptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/helmet.middleware.ts\n            \n            function\n            helmetMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            class\n            MessagesGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/get-post.dto.ts\n            \n            class\n            GetAllPostOfUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/get-user.dto.ts\n            \n            class\n            GetUserProfileByEmailNameDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/user-avatar.dto.ts\n            \n            class\n            UserAvatarDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/user-cover.dto.ts\n            \n            class\n            UserCoverDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/users-profile.dto.ts\n            \n            class\n            UserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.2.1\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : ^4.2.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ROLE   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/roles/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            helmetMiddleware   (src/.../helmet.middleware.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/middlewares/helmet.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        helmetMiddleware\n                        \n                    \n                \n            \n            \n                \nhelmetMiddleware(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     INestApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\n\n\nDatabase diagram\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAuth\nFiles\n\n\n\n\n✅  Signup\n✅  Upload single file (avatar, cover)\n\n\n✅  Signin\n✅  Upload multi files\n\n\n✅  Signout\n✅  Upload array-field files (post, sample_image)\n\n\n✅  Signout\n\n\n\n✅  Refresh access-token\n\n\n\n✅  Update password\n\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅  Get list all users\n✅  Create a new post\n\n\n✅  Get user data by user-id\n✅  Get all posts of user by user-id\n\n\n✅  Get public user profile by user-id / username / email\n✅  Match a new category with new post\n\n\n✅  Update user profile\n✅ Get a post by post-id\n\n\n✅  Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n✅  Delete user by user-id (admin)\n✅ Reaction to post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅  Create new conversation\n✅  Join conversation by conversation-id\n\n\n✅  Get all conversations of user\n✅  Get all messages in conversation\n\n\n✅  Get one conversation information has current user\n✅  Create new messages\n\n\n✅  Update members to current conversation\n✅ Update message by message-id\n\n\n✅  Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅  Delete admin out of current conversation by creator\n\n\n\n✅  Delete conversation by creator\n\n\n\n✅  Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nNest example\nNest awesome\nNest structure\nPostgre x Heroku\nNest x Prisma\nDatabase for chat\nDatabase for social\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nprisma db pull\n\n# generate the Prisma Client\nprisma generate# Create env and migrate db\nnpx prisma migrate dev --create-only# Open prisma studio\nnpx prisma studio# Sync migrate change to db\nnpx prisma db pushRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    19 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    52 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.5.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n  let option;\n\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n    option = { origin: true };\n  } else {\n    option = { origin: false };\n  }\n  callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n  const config: ConfigService = app.get(ConfigService);\n\n  const swaggerConfig = new DocumentBuilder()\n    .setTitle('Teneno API')\n    .setDescription(\n      `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n    )\n    .setContact(\n      'Thuong Truong',\n      'https://github.com/thuongtruong1009',\n      'ititiu19228@student.hcmiu.edu.vn',\n    )\n    .addServer(config.get('BASE_URL'))\n    .addServer(config.get('HOST_URL'))\n    .setVersion('1.4')\n    .addTag('cats', 'default description')\n    .addBearerAuth({\n      type: 'http',\n      scheme: 'Bearer',\n      bearerFormat: 'JWT',\n      description: 'Paste a valid access token here.',\n      in: 'Header',\n    })\n    .addBasicAuth()\n    .addSecurity('api_key', {\n      type: 'apiKey',\n      name: 'api_key',\n      in: 'header',\n    })\n    .build();\n\n  const options: ISwaggerOptions = {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  };\n  const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n  SwaggerModule.setup('api', app, document, {\n    swaggerOptions: {\n      persistAuthorization: true,\n    },\n  });\n}\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: ROLE[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
