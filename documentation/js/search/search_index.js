var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.261,1,2.357]],["body/classes/Admin.html",[0,0.412,1,4.299,2,1.05,3,0.182,4,0.165,5,0.149,6,6.006,7,0.182,8,0.009,9,0.009,10,0.009]],["title/controllers/AdminController.html",[11,1.838,12,3.217]],["body/controllers/AdminController.html",[0,0.323,1,2.916,3,0.143,4,0.13,5,0.117,7,0.143,8,0.01,9,0.007,10,0.007,11,2.274,12,5.067,13,2.274,14,4.718,15,2.802,16,0.237,17,0.802,18,4.25,19,5.067,20,4.25,21,5.067,22,5.067,23,4.25,24,4.25,25,5.067,26,3.181,27,5.067,28,4.746,29,1.497,30,3.338,31,3.98,32,4.718,33,4.718,34,2.759,35,3.728,36,3.338,37,1.904,38,0.438,39,2.722,40,3.338,41,2.348,42,3.181,43,3.728,44,3.338,45,3.181,46,1.801,47,2.274,48,3.98,49,3.98,50,3.98,51,3.728,52,3.728,53,2.138,54,4.718,55,4.718]],["title/modules/AdminModule.html",[56,1.629,57,3.013]],["body/modules/AdminModule.html",[0,0.336,1,3.031,3,0.148,4,0.135,5,0.121,7,0.148,8,0.01,9,0.008,10,0.008,12,5.675,13,2.967,16,0.261,17,0.834,56,2.63,57,6.015,58,2.61,59,3.392,60,4.905,61,4.905,62,4.905,63,5.001,64,5.861,65,3.804,66,3.031,67,2.803,68,5.572,69,3.519,70,5.675,71,4.356,72,5.572,73,5.572,74,4.465,75,4.905]],["title/injectables/AdminService.html",[64,3.013,76,0.914]],["body/injectables/AdminService.html",[0,0.375,3,0.166,4,0.151,5,0.136,7,0.166,8,0.01,9,0.008,10,0.008,16,0.237,17,0.931,38,0.508,64,5.205,76,1.578,77,2.339,78,5.476,79,1.981,80,4.327,81,4.523,82,0.588,83,6.221,84,1.066,85,0.784,86,0.983,87,4.986,88,2.64]],["title/controllers/AdminUsersController.html",[11,1.838,70,3.217]],["body/controllers/AdminUsersController.html",[0,0.161,1,1.447,3,0.071,4,0.064,5,0.058,7,0.071,8,0.01,9,0.005,10,0.005,11,1.129,13,1.129,15,1.39,16,0.218,17,0.398,18,3.883,19,3.078,20,2.582,21,3.078,22,3.078,23,2.582,24,2.582,25,3.078,26,1.579,27,3.078,28,2.883,29,0.743,30,1.657,31,1.975,32,2.342,33,2.342,34,2.558,35,1.85,36,1.657,37,0.945,38,0.564,39,1.654,40,1.657,41,1.165,42,1.579,43,1.85,44,1.657,45,1.579,46,0.894,47,1.129,48,1.975,49,1.975,50,1.975,51,1.85,52,1.85,53,1.061,54,2.342,55,2.342,70,3.078,82,0.624,84,1.132,85,0.832,86,1.044,88,1.129,89,6.071,90,2.342,91,0.335,92,0.944,93,2.924,94,3.649,95,3.649,96,4.082,97,4.565,98,4.082,99,4.082,100,2.342,101,1.27,102,2.484,103,2.66,104,3.543,105,3.079,106,3.649,107,5.09,108,2.66,109,3.082,110,1.466,111,4.4,112,2.342,113,4,114,2.66,115,2.721,116,3.259,117,2.66,118,2.66,119,4.156,120,2.132,121,2.66,122,3.782,123,2.66,124,2.66,125,3.775,126,2.66,127,2.66,128,2.66,129,2.132,130,3.775,131,2.66,132,1.942,133,4.146,134,2.66,135,2.132,136,3.775,137,2.66,138,2.461,139,2.66,140,4,141,1.657,142,1.51,143,3.782,144,1.975,145,1.975,146,2.132,147,4.527,148,4.295,149,2.342,150,2.66,151,2.342,152,2.132,153,2.132,154,2.132,155,2.132,156,2.66,157,3.173,158,2.66,159,1.975,160,2.66,161,4.113,162,1.746,163,4.113,164,2.66,165,1.752,166,2.66,167,2.66,168,1.432,169,4.146,170,2.342,171,2.66,172,2.342,173,2.66,174,3.078,175,2.342,176,2.66,177,2.342,178,2.66,179,2.66,180,2.66]],["title/classes/AllExceptionsFilter.html",[0,0.261,181,3.472]],["body/classes/AllExceptionsFilter.html",[0,0.225,2,0.574,3,0.099,4,0.09,5,0.081,7,0.099,8,0.01,9,0.006,10,0.006,16,0.197,17,0.558,38,0.556,39,3.354,46,2.652,52,3.713,53,2.13,79,1.188,82,0.643,84,1.166,85,0.858,86,1.076,88,1.583,91,0.47,92,1.216,110,1.384,142,2.117,181,4.279,182,3.284,183,2.13,184,5.489,185,5.992,186,4.667,187,5.339,188,4.337,189,6.236,190,3.284,191,4.24,192,3.73,193,3.504,194,4.7,195,6.68,196,5.489,197,5.992,198,3.73,199,3.864,200,4.919,201,5.339,202,3.73,203,3.73,204,4.626,205,3.73,206,5.339,207,3.73,208,3.73,209,2.029,210,2.278,211,3.284,212,3.284,213,3.284,214,3.284,215,3.73,216,3.73,217,3.624,218,6.807,219,3.73,220,3.73,221,3.73,222,6.236,223,5.992,224,3.73,225,3.73,226,3.284,227,3.284,228,1.689,229,3.284,230,3.73,231,2.594,232,3.284,233,3.73]],["title/controllers/AppController.html",[11,1.838,234,3.217]],["body/controllers/AppController.html",[0,0.312,3,0.138,4,0.125,5,0.113,7,0.138,8,0.01,9,0.007,10,0.007,11,2.827,13,2.191,15,2.699,16,0.246,17,0.773,26,3.065,29,1.442,34,2.481,37,2.367,82,0.488,88,2.191,91,0.651,92,1.517,101,1.053,102,1.942,110,1.146,116,3.483,141,3.216,142,2.93,148,4.15,159,3.834,161,3.216,163,3.216,165,1.37,217,3.352,234,4.948,235,4.546,236,6.861,237,5.164,238,4.634,239,5.164,240,5.865,241,5.865,242,3.781,243,3.625,244,4.634,245,5.34,246,5.164,247,6.663,248,5.164,249,6.494,250,4.842,251,4.546,252,5.164,253,5.164,254,4.546,255,5.865,256,5.164]],["title/modules/AppModule.html",[56,1.629,257,3.217]],["body/modules/AppModule.html",[0,0.198,3,0.087,4,0.079,5,0.071,7,0.087,8,0.01,9,0.005,10,0.006,13,2.059,16,0.27,17,0.49,38,0.267,40,3.603,46,1.1,56,1.825,57,4.979,58,1.533,59,2.355,63,4.249,65,2.64,66,1.78,67,1.647,69,2.442,71,3.023,82,0.309,84,0.561,85,0.412,86,0.517,92,0.745,110,0.726,116,2.537,162,3.186,183,1.306,188,2.276,200,3.186,231,4.024,234,4.296,250,4.699,251,2.881,257,6.468,258,2.881,259,2.881,260,2.881,261,4.699,262,4.979,263,4.979,264,4.979,265,4.979,266,4.979,267,4.062,268,3.273,269,2.881,270,4.273,271,5.633,272,3.273,273,2.881,274,4.854,275,5.785,276,2.276,277,3.273,278,3.273,279,3.604,280,3.273,281,3.273,282,3.273,283,3.273,284,2.623,285,2.148,286,3.273,287,2.43,288,3.273,289,3.273,290,3.273,291,3.273,292,3.273,293,2.43,294,3.273,295,3.273,296,2.881,297,3.273,298,3.604,299,3.273,300,3.273,301,3.273,302,1.389,303,4.854,304,4.273,305,3.273,306,3.273,307,3.273,308,3.273,309,3.273,310,3.273,311,2.623,312,3.273,313,4.854,314,2.43,315,3.273,316,3.273,317,3.273,318,2.623,319,3.273,320,4.273,321,4.273,322,3.273,323,4.273,324,3.273,325,3.273,326,4.273,327,3.89,328,4.854,329,4.273,330,3.273,331,4.854,332,3.273,333,3.273,334,2.038]],["title/injectables/AppService.html",[76,0.914,250,2.843]],["body/injectables/AppService.html",[0,0.345,3,0.152,4,0.138,5,0.125,7,0.152,8,0.01,9,0.008,10,0.008,16,0.244,17,0.855,38,0.467,76,1.499,77,2.15,79,1.82,82,0.671,84,0.98,85,0.72,86,0.904,91,0.72,92,1.618,101,1.123,110,1.269,165,1.516,186,3.561,190,5.032,191,5.038,193,5.076,236,7.121,238,3.976,240,5.032,244,3.976,245,5.695,250,4.664,335,5.032,336,5.717,337,5.717,338,5.717,339,5.717,340,5.717,341,5.717]],["title/injectables/AtGuard.html",[76,0.914,279,3.217]],["body/injectables/AtGuard.html",[0,0.313,3,0.138,4,0.126,5,0.113,7,0.138,8,0.01,9,0.007,10,0.007,16,0.234,17,0.777,38,0.546,76,1.41,77,1.952,79,1.653,82,0.632,84,1.146,85,0.842,86,1.057,88,2.202,91,0.654,92,1.522,110,1.152,116,3.865,165,1.773,210,1.897,276,3.61,279,4.964,302,2.837,318,6.631,342,4.57,343,5.885,344,4.57,345,5.191,346,5.885,347,4.635,348,5.191,349,3.081,350,4.57,351,3.61,352,1.212,353,4.57,354,3.61,355,5.191,356,5.191,357,5.191,358,5.191,359,5.191,360,5.191,361,5.191,362,4.16,363,4.16,364,5.191,365,5.191,366,5.191,367,6.685,368,5.191,369,4.57,370,4.57,371,5.191]],["title/injectables/AtStrategy.html",[76,0.914,372,3.013]],["body/injectables/AtStrategy.html",[0,0.322,3,0.142,4,0.129,5,0.116,7,0.142,8,0.01,9,0.007,10,0.007,16,0.258,17,0.798,38,0.556,76,1.434,77,2.005,79,1.697,82,0.642,84,1.165,85,0.857,86,1.075,88,2.262,91,0.672,92,1.548,110,1.183,165,1.414,285,3.499,351,3.708,352,1.245,354,3.708,372,4.73,373,4.693,374,3.554,375,4.693,376,5.486,377,5.331,378,5.05,379,6.8,380,8.331,381,5.331,382,5.986,383,4.693,384,4.693,385,4.693,386,3.959,387,4.73,388,3.708,389,4.693,390,4.693,391,4.693,392,4.693,393,5.331]],["title/controllers/AuthController.html",[11,1.838,394,3.217]],["body/controllers/AuthController.html",[0,0.176,3,0.078,4,0.071,5,0.064,7,0.078,8,0.01,9,0.005,10,0.005,11,1.237,13,1.237,15,1.524,16,0.225,17,0.436,18,3.76,19,3.304,20,2.771,21,3.304,22,3.304,23,2.771,24,2.771,25,3.304,26,1.73,27,3.304,28,3.094,29,0.814,34,2.625,35,2.028,36,1.816,37,1.036,38,0.6,39,1.775,40,1.816,41,1.277,42,1.73,43,2.028,44,1.816,45,1.73,46,0.98,47,1.237,48,2.165,49,2.165,50,2.165,51,2.028,52,2.028,53,1.163,82,0.614,84,1.114,85,0.819,86,1.028,88,1.237,91,0.367,92,1.013,93,2.905,97,2.771,101,1.19,102,2.577,105,2.975,107,4.498,109,2.483,110,1.443,111,4.359,116,2.82,119,3.725,140,2.028,141,1.816,142,1.654,145,2.165,147,4.678,148,4.268,161,4.049,163,3.76,165,1.724,228,2.733,327,2.337,388,2.028,394,3.304,395,2.566,396,6.032,397,5.712,398,3.917,399,3.917,400,3.917,401,2.566,402,2.915,403,5.395,404,5.592,405,2.915,406,2.566,407,2.915,408,2.915,409,4.449,410,2.915,411,2.566,412,3.76,413,2.915,414,4.449,415,2.915,416,2.566,417,4.766,418,2.915,419,2.325,420,2.915,421,2.915,422,3.917,423,2.915,424,2.566,425,4.199,426,2.915,427,2.525,428,2.915,429,1.914,430,2.915,431,3.566,432,3.963,433,2.566,434,2.337,435,3.304,436,2.165,437,2.566,438,2.566,439,2.915,440,2.915,441,2.915,442,2.915,443,2.337,444,2.915,445,2.915,446,2.915,447,2.915,448,2.915,449,2.915,450,2.915,451,2.915,452,2.915,453,2.915,454,2.915,455,2.915,456,2.915,457,2.915,458,2.915]],["title/modules/AuthModule.html",[56,1.629,261,2.843]],["body/modules/AuthModule.html",[0,0.293,3,0.129,4,0.118,5,0.106,7,0.129,8,0.01,9,0.007,10,0.007,13,2.717,16,0.257,17,0.727,56,2.408,58,2.276,59,3.106,65,3.484,66,2.643,67,2.445,69,3.222,71,4.461,93,1.726,261,5.718,267,4.611,284,3.894,372,5.652,376,4.982,394,5.319,432,5.334,433,4.277,459,4.277,460,4.859,461,4.277,462,5.652,463,4.859,464,4.277,465,4.859,466,4.859,467,6.404,468,3.894,469,4.859,470,4.859,471,4.859,472,4.277,473,4.859,474,4.859,475,4.277,476,4.859,477,3.894]],["title/injectables/AuthService.html",[76,0.914,432,2.843]],["body/injectables/AuthService.html",[0,0.145,3,0.064,4,0.058,5,0.052,7,0.064,8,0.01,9,0.004,10,0.004,16,0.21,17,0.36,38,0.563,76,0.808,77,0.905,79,1.22,81,3.47,82,0.651,84,1.181,85,0.868,86,1.089,91,0.303,92,0.872,93,2.93,101,1.304,105,2.301,109,2.92,110,1.473,111,4.291,119,2.845,165,1.576,168,1.649,186,2.973,210,2.875,228,3.12,243,2.961,285,1.58,376,4.402,388,1.674,396,3.373,397,5.32,398,3.373,399,3.373,400,3.373,401,3.373,406,3.373,411,3.373,412,3.39,416,3.373,417,3.785,424,3.373,425,3.785,427,3.088,432,2.515,438,2.119,468,1.929,472,3.373,475,3.373,477,1.929,478,2.119,479,3.832,480,3.832,481,2.407,482,6.638,483,2.407,484,3.832,485,4.488,486,2.407,487,2.407,488,2.407,489,2.407,490,2.407,491,2.407,492,3.832,493,5.942,494,2.407,495,1.168,496,1.735,497,1.929,498,3.545,499,1.929,500,2.119,501,2.119,502,4.731,503,2.407,504,3.832,505,3.832,506,2.407,507,2.407,508,2.407,509,2.407,510,2.407,511,4.362,512,2.407,513,3.373,514,4.774,515,2.407,516,2.119,517,1.929,518,5.942,519,2.387,520,3.832,521,2.407,522,1.31,523,4.617,524,2.407,525,2.119,526,2.407,527,2.407,528,2.407,529,6.066,530,2.407,531,2.407,532,2.407,533,5.442,534,3.545,535,5.231,536,5.231,537,5.942,538,2.407,539,3.373,540,4.774,541,4.774,542,4.774,543,2.407,544,2.845,545,3.832,546,3.832,547,3.832,548,2.407,549,2.407,550,1.929,551,2.407]],["title/classes/CommentEntity.html",[0,0.261,552,2.843]],["body/classes/CommentEntity.html",[0,0.4,2,0.788,3,0.137,4,0.124,5,0.112,7,0.137,8,0.01,9,0.007,10,0.007,16,0.162,38,0.674,82,0.779,91,0.646,101,1.344,102,3.1,109,3.023,168,2.539,552,4.351,553,4.51,554,2.228,555,4.17,556,6.469,557,7.349,558,3.998,559,5.124,560,5.124,561,5.457,562,5.124,563,3.465,564,5.836,565,5.124,566,5.124,567,5.124,568,5.124,569,5.112,570,5.124,571,4.07,572,5.124,573,3.77,574,1.872]],["title/classes/ConversationEntity.html",[0,0.261,575,3.217]],["body/classes/ConversationEntity.html",[0,0.279,2,0.711,3,0.123,4,0.112,5,0.101,7,0.123,8,0.01,9,0.007,10,0.007,16,0.146,29,1.29,34,2.224,38,0.688,82,0.796,85,0.88,91,0.582,101,1.382,102,3.167,132,3.272,168,2.413,302,2.628,544,4.598,554,2.081,575,4.598,576,4.067,577,4.351,578,5.598,579,3.964,580,3.8,581,6.149,582,4.641,583,4.62,584,4.62,585,5.191,586,4.62,587,4.62,588,4.62,589,3.369,590,4.598,591,4.62,592,4.62,593,4.62,594,4.62,595,4.62,596,3.214]],["title/controllers/ConversationsController.html",[11,1.838,597,3.217]],["body/controllers/ConversationsController.html",[0,0.137,1,1.994,3,0.061,4,0.055,5,0.05,7,0.061,8,0.01,9,0.004,10,0.004,11,0.966,13,0.966,15,1.19,16,0.183,17,0.341,18,2.283,20,2.283,23,2.283,24,2.283,26,1.351,29,0.636,30,2.283,34,2.474,36,1.418,37,0.809,38,0.597,42,1.351,44,1.418,45,1.351,82,0.638,84,1.157,85,0.851,86,1.067,88,0.966,91,0.287,92,0.834,93,2.903,97,3.284,101,1.265,102,2.539,104,4.019,105,2.972,107,5.1,110,1.499,115,2.406,119,4.43,140,4.515,141,1.418,142,1.292,143,1.691,144,1.691,147,4.575,148,4.341,161,4.206,163,4.043,165,1.791,168,2.133,228,2.387,249,2.004,302,1.555,419,1.916,422,3.226,429,2.406,431,2.937,443,1.825,502,1.292,569,2.549,575,4.82,579,3.504,580,1.994,597,2.721,598,2.004,599,3.686,600,3.226,601,4.049,602,4.049,603,3.226,604,4.049,605,4.049,606,4.049,607,4.049,608,2.004,609,2.992,610,2.277,611,6.589,612,5.435,613,2.277,614,2.277,615,3.853,616,2.004,617,3.667,618,2.277,619,5.014,620,2.277,621,2.004,622,3.129,623,2.277,624,4.64,625,2.277,626,4.848,627,2.004,628,3.284,629,2.277,630,3.665,631,2.277,632,2.004,633,3.46,634,2.277,635,4.641,636,2.277,637,2.004,638,3.129,639,2.277,640,2.277,641,2.004,642,3.129,643,2.277,644,2.277,645,2.004,646,3.129,647,2.277,648,3.226,649,3.665,650,2.277,651,3.46,652,2.004,653,2.277,654,2.277,655,1.691,656,2.277,657,2.277,658,2.277,659,2.277,660,2.277,661,2.277,662,2.277,663,2.277,664,4.6,665,2.277,666,2.277,667,2.277,668,2.277,669,2.277,670,2.277,671,4.6,672,2.277,673,2.277,674,2.277,675,2.277,676,2.277]],["title/modules/ConversationsModule.html",[56,1.629,262,3.013]],["body/modules/ConversationsModule.html",[0,0.332,3,0.146,4,0.133,5,0.12,7,0.146,8,0.01,9,0.008,10,0.008,13,2.941,16,0.26,17,0.822,56,2.607,58,2.573,59,3.363,63,4.983,65,3.771,66,2.989,67,2.764,69,3.488,71,4.317,74,4.403,262,6.098,267,4.765,597,5.639,651,5.511,652,4.836,677,4.836,678,5.494,679,4.836,680,5.494,681,5.494,682,4.836]],["title/injectables/ConversationsService.html",[76,0.914,651,2.843]],["body/injectables/ConversationsService.html",[0,0.147,1,1.322,3,0.065,4,0.059,5,0.053,7,0.065,8,0.01,9,0.004,10,0.004,16,0.173,17,0.364,34,1.23,38,0.582,76,0.815,77,0.914,79,0.774,80,1.691,81,3.322,82,0.673,84,1.221,85,0.955,86,1.126,87,1.948,88,1.031,91,0.306,92,0.879,93,2.935,101,1.281,110,1.535,115,4.374,119,4.319,132,2.25,165,1.976,168,2.798,210,2.667,243,3.248,302,2.039,502,4.142,522,2.101,577,3.719,579,3.781,580,3.458,589,1.322,600,3.4,601,3.4,602,4.23,603,3.4,604,3.4,605,3.4,606,4.23,607,4.23,608,3.4,609,3.105,611,3.095,615,3.955,616,3.4,617,3.806,621,2.14,622,3.248,626,5.182,627,3.4,628,3.409,632,3.4,633,3.592,637,3.4,638,3.248,641,2.14,642,3.248,645,2.14,646,3.248,651,2.535,683,2.14,684,2.431,685,2.431,686,2.431,687,2.431,688,2.431,689,2.431,690,2.431,691,2.431,692,2.431,693,2.14,694,3.568,695,3.862,696,2.431,697,3.862,698,3.4,699,5.473,700,3.862,701,4.805,702,5.473,703,6.087,704,1.805,705,6.27,706,5.473,707,2.431,708,2.431,709,2.431,710,2.431,711,3.4,712,2.431]],["title/classes/CreateCommentDto.html",[0,0.261,713,3.013]],["body/classes/CreateCommentDto.html",[0,0.388,2,0.988,3,0.171,4,0.155,5,0.14,7,0.171,8,0.01,9,0.008,10,0.008,16,0.241,29,1.794,109,2.642,352,1.5,552,4.216,555,3.645,558,3.494,713,5.305,714,5.654,715,4.77,716,3.232,717,5.148,718,5.148]],["title/classes/CreateConversationDto.html",[0,0.261,609,2.458]],["body/classes/CreateConversationDto.html",[0,0.322,2,0.574,3,0.099,4,0.09,5,0.081,7,0.099,8,0.01,9,0.006,10,0.006,16,0.197,29,1.042,34,2.558,38,0.666,82,0.68,85,1.012,86,0.844,91,0.47,101,1.38,102,2.709,217,4.194,302,1.583,374,1.95,554,1.794,563,3.558,569,4.337,571,3.025,573,3.188,574,1.363,577,3.884,579,3.538,580,3.392,582,3.917,589,2.904,590,3.965,596,3.713,609,3.03,719,6.597,720,2.117,721,4.275,722,4.102,723,4.279,724,3.73,725,3.73,726,3.73,727,6.236,728,3.73,729,3.73,730,5.055,731,5.055,732,3.73,733,5.055,734,6.236,735,4.7,736,5.055,737,3.73,738,3.73,739,3.73,740,3.284,741,3.284,742,4.997,743,3.73,744,3.73,745,3.284,746,3.284,747,2.99,748,2.99,749,2.99,750,2.594,751,2.594,752,2.99,753,4.279,754,4.279,755,5.055,756,3.284,757,4.7,758,3.73,759,3.73,760,3.73,761,3.73,762,3.73,763,3.73]],["title/classes/CreateMessageDto.html",[0,0.261,764,2.843]],["body/classes/CreateMessageDto.html",[0,0.361,2,0.919,3,0.159,4,0.145,5,0.13,7,0.159,8,0.01,9,0.008,10,0.008,16,0.189,29,1.669,38,0.644,82,0.745,91,0.753,101,1.355,168,2.725,554,2.454,558,4.291,764,4.794,765,7.232,766,4.79,767,6.321,768,5.976,769,5.976,770,5.261,771,7.303]],["title/classes/CreatePostDto.html",[0,0.261,772,3.013]],["body/classes/CreatePostDto.html",[0,0.386,2,0.985,3,0.171,4,0.155,5,0.139,7,0.171,8,0.01,9,0.008,10,0.008,16,0.241,29,1.788,34,2.038,352,1.495,716,3.221,772,5.295,773,5.636,774,4.202,775,4.202,776,5.131,777,5.131,778,4.453,779,3.633,780,4.202]],["title/classes/DeleteCommentDto.html",[0,0.261,781,3.013]],["body/classes/DeleteCommentDto.html",[0,0.389,2,0.991,3,0.172,4,0.156,5,0.14,7,0.172,8,0.01,9,0.008,10,0.008,16,0.242,29,1.799,168,2.226,352,1.505,552,4.23,555,3.657,715,4.785,716,3.242,717,5.165,718,5.165,781,5.316,782,5.673]],["title/classes/DeleteConversationDto.html",[0,0.261,617,3.013]],["body/classes/DeleteConversationDto.html",[0,0.371,2,0.945,3,0.164,4,0.149,5,0.134,7,0.164,8,0.01,9,0.008,10,0.008,16,0.194,38,0.502,82,0.58,91,0.774,101,1.174,102,2.31,105,2.379,109,3.055,168,2.122,352,1.734,554,2.496,617,5.166,628,5.165,720,3.486,721,3.646,722,3.091,783,5.408,784,3.486,785,3.826,786,4.562,787,4.924,788,5.408,789,4.273]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.261,622,2.571]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.481,2,0.762,3,0.132,4,0.12,5,0.108,7,0.204,8,0.01,9,0.007,10,0.007,16,0.229,29,1.384,34,1.578,38,0.591,82,0.613,85,0.624,91,0.624,101,1.389,102,1.864,105,2.512,109,2.975,132,2.321,168,2.241,352,1.792,419,2.591,554,2.18,571,3.147,573,3.039,574,1.811,577,3.087,579,4.354,580,3.529,582,3.391,609,4.354,622,3.851,638,2.942,642,2.942,646,2.942,720,2.813,721,2.942,722,3.264,784,3.681,785,4.041,786,3.68,789,3.447,790,5.03,791,4.956,792,4.956,793,5.337,794,3.68,795,3.253]],["title/classes/DeleteOnePost.html",[0,0.261,796,3.013]],["body/classes/DeleteOnePost.html",[0,0.44,2,0.917,3,0.159,4,0.144,5,0.13,7,0.159,8,0.01,9,0.008,10,0.008,16,0.188,38,0.596,82,0.689,91,0.751,101,1.297,102,2.741,554,2.45,555,4.47,561,5.413,571,3.821,573,3.689,574,2.177,774,3.911,780,5.17,796,5.07,797,6.934,798,5.958,799,5.245]],["title/classes/ErrorAcceptableException.html",[0,0.261,800,2.029]],["body/classes/ErrorAcceptableException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,2.481,801,1.789,802,3.006,803,4.222,804,3.688,805,1.789,806,2.665,807,2.398,808,2.665,809,2.665,810,2.665,811,2.398,812,2.665,813,2.665,814,2.665,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856]],["title/classes/ErrorBadGatewayException.html",[0,0.261,838,2.029]],["body/classes/ErrorBadGatewayException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,3.118,807,2.398,808,2.665,809,2.665,810,2.665,811,2.398,812,2.665,813,2.665,814,2.665,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,2.481,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,853,3.688]],["title/classes/ErrorBadRequestException.html",[0,0.261,822,2.029]],["body/classes/ErrorBadRequestException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.805,808,2.665,809,2.665,810,2.665,811,2.398,812,2.665,813,2.665,814,2.665,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,2.481,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,854,3.688]],["title/classes/ErrorForbiddenException.html",[0,0.261,820,2.029]],["body/classes/ErrorForbiddenException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,3.066,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.398,808,2.665,809,2.665,810,2.665,811,2.398,812,2.665,813,2.665,814,2.665,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,2.481,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,855,3.688]],["title/classes/ErrorGatewayTimeoutException.html",[0,0.261,839,2.029]],["body/classes/ErrorGatewayTimeoutException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.398,808,3.118,809,2.665,810,2.665,811,2.398,812,2.665,813,2.665,814,2.665,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,2.481,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,856,3.688]],["title/classes/ErrorInternalServerException.html",[0,0.261,830,2.029]],["body/classes/ErrorInternalServerException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.398,808,2.665,809,3.118,810,2.665,811,2.398,812,2.665,813,2.665,814,2.665,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,2.481,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,857,3.688]],["title/classes/ErrorMethodNotAllowedException.html",[0,0.261,832,2.029]],["body/classes/ErrorMethodNotAllowedException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.398,808,2.665,809,2.665,810,3.118,811,2.398,812,2.665,813,2.665,814,2.665,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,2.481,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,858,3.688]],["title/classes/ErrorNotFoundException.html",[0,0.261,816,2.029]],["body/classes/ErrorNotFoundException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.398,808,2.665,809,2.665,810,2.665,811,2.805,812,2.665,813,2.665,814,2.665,815,1.67,816,2.481,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,859,3.688]],["title/classes/ErrorRequestTimeoutException.html",[0,0.261,825,2.029]],["body/classes/ErrorRequestTimeoutException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.398,808,2.665,809,2.665,810,2.665,811,2.398,812,3.118,813,2.665,814,2.665,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,2.481,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,860,3.688]],["title/classes/ErrorServiceUnavailableException.html",[0,0.261,834,2.029]],["body/classes/ErrorServiceUnavailableException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.398,808,2.665,809,2.665,810,2.665,811,2.398,812,2.665,813,3.118,814,2.665,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,2.481,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,861,3.688]],["title/classes/ErrorUnauthorizedException.html",[0,0.261,818,2.029]],["body/classes/ErrorUnauthorizedException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,3.066,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.398,808,2.665,809,2.665,810,2.665,811,2.398,812,2.665,813,2.665,814,2.665,815,1.67,816,1.728,817,2.665,818,2.481,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,1.728,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,862,3.688]],["title/classes/ErrorUnsupportedMediaTypeException.html",[0,0.261,827,2.029]],["body/classes/ErrorUnsupportedMediaTypeException.html",[0,0.502,2,0.567,3,0.098,4,0.089,5,0.08,7,0.222,8,0.01,9,0.006,10,0.006,16,0.117,17,0.552,37,1.31,38,0.433,39,3.549,41,1.616,46,1.24,47,2.247,53,1.471,79,1.174,82,0.348,84,0.632,85,0.465,86,0.583,101,1.337,199,1.728,352,1.959,495,1.789,496,2.805,800,1.728,801,1.789,802,2.569,803,4.222,805,1.789,806,2.665,807,2.398,808,2.665,809,2.665,810,2.665,811,2.398,812,2.665,813,2.665,814,3.118,815,1.67,816,1.728,817,2.665,818,1.728,819,1.856,820,1.728,821,1.856,822,1.728,823,2.665,824,1.856,825,1.728,826,1.856,827,2.481,828,1.856,829,1.856,830,1.728,831,1.856,832,1.728,833,1.856,834,1.728,835,1.856,836,1.856,837,2.665,838,1.728,839,1.728,840,1.856,841,1.856,842,1.856,843,1.856,844,1.856,845,1.856,846,1.856,847,1.789,848,1.856,849,1.856,850,1.728,851,1.856,852,1.856,863,3.688]],["title/injectables/ErrorsIntereptor.html",[76,0.914,864,3.472]],["body/injectables/ErrorsIntereptor.html",[0,0.334,3,0.148,4,0.134,5,0.121,7,0.148,8,0.01,9,0.008,10,0.008,16,0.22,17,0.829,38,0.453,76,1.47,77,2.083,82,0.523,84,0.949,85,0.698,86,0.876,91,0.698,92,1.586,110,1.23,142,3.144,165,1.47,183,2.21,195,4.44,217,2.788,228,2.508,347,4.748,349,3.288,864,5.585,865,4.877,866,4.847,867,5.174,868,4.982,869,5.564,870,5.54,871,5.302,872,4.847,873,5.54,874,6.968,875,3.637,876,4.877,877,5.54,878,5.54,879,5.54,880,5.54]],["title/injectables/ExistedUserMiddleware.html",[76,0.914,881,3.217]],["body/injectables/ExistedUserMiddleware.html",[0,0.294,3,0.13,4,0.118,5,0.106,7,0.13,8,0.01,9,0.007,10,0.007,16,0.227,17,0.729,37,1.73,38,0.524,46,2.561,76,1.353,77,1.832,79,1.551,80,3.388,81,4.25,82,0.606,84,1.099,85,0.808,86,1.014,88,2.067,91,0.614,92,1.46,93,2.547,109,2.638,110,1.081,168,2.216,183,1.943,204,4.325,209,2.65,210,2.344,228,2.205,302,2.067,497,3.904,502,2.764,516,6.313,523,3.388,534,3.617,544,3.617,704,3.617,811,2.205,868,4.747,881,4.763,882,5.747,883,4.288,884,4.763,885,4.871,886,5.646,887,6.313,888,7.621,889,4.871,890,3.617,891,5.646,892,4.871,893,3.388,894,4.871,895,3.904]],["title/controllers/FileController.html",[11,1.838,896,3.217]],["body/controllers/FileController.html",[0,0.187,3,0.083,4,0.075,5,0.167,7,0.083,8,0.01,9,0.005,10,0.005,11,1.317,13,1.317,15,1.622,16,0.23,17,0.464,18,2.905,20,2.905,23,2.905,24,2.905,26,1.842,28,3.244,29,0.866,34,2.385,35,2.158,36,1.933,37,1.102,38,0.546,39,1.238,42,1.842,43,3.244,44,1.933,45,4.322,82,0.589,84,1.068,85,0.966,86,0.985,88,1.317,91,0.391,92,1.062,93,2.853,102,2.513,105,1.806,107,4.091,110,1.383,111,4.251,132,2.185,138,2.768,141,1.933,142,1.761,147,4.386,148,4.162,159,2.304,161,3.882,163,3.882,165,1.653,209,3.049,242,3.792,243,3.818,302,1.979,429,3.679,596,2.158,655,2.304,779,3.792,893,4.647,896,3.464,897,2.732,898,4.934,899,4.934,900,4.934,901,4.934,902,2.732,903,6.746,904,3.103,905,6.595,906,2.732,907,3.103,908,3.103,909,2.732,910,3.103,911,2.732,912,3.103,913,3.103,914,2.732,915,3.103,916,5.486,917,4.106,918,3.103,919,4.664,920,3.103,921,2.732,922,3.679,923,3.103,924,4.664,925,3.103,926,2.905,927,4.664,928,3.103,929,5.604,930,5.604,931,2.732,932,2.487,933,2.487,934,3.738,935,3.062,936,2.732,937,2.732,938,2.732,939,2.158,940,3.103,941,3.103,942,3.103,943,3.103,944,3.103,945,3.103,946,3.103,947,3.103,948,3.103,949,3.103,950,3.103,951,3.103,952,3.103,953,3.103,954,5.882,955,3.103,956,3.103,957,3.103,958,3.103,959,3.103]],["title/modules/FilesModule.html",[56,1.629,263,3.013]],["body/modules/FilesModule.html",[0,0.358,3,0.158,4,0.144,5,0.129,7,0.158,8,0.01,9,0.008,10,0.008,13,3.087,16,0.249,17,0.889,56,2.736,58,2.782,59,3.53,65,3.958,66,3.232,67,2.989,69,2.989,71,4.532,263,5.954,896,5.841,935,5.69,936,5.229,960,5.229,961,5.229,962,5.94,963,5.94]],["title/classes/FilesService.html",[0,0.261,935,2.843]],["body/classes/FilesService.html",[0,0.274,2,0.698,3,0.121,4,0.11,5,0.151,7,0.121,8,0.01,9,0.007,10,0.007,16,0.143,38,0.605,82,0.7,84,1.269,85,0.933,86,1.171,91,0.571,92,1.392,93,3.062,110,1.644,111,4.699,165,2.051,779,4.388,898,5.384,899,5.384,900,5.384,901,5.384,902,5.384,903,7.386,909,5.384,914,5.384,921,5.384,922,4.542,935,4.014,937,3.992,938,3.992,939,3.154,964,3.992,965,4.535,966,4.535,967,4.535,968,4.535,969,6.92,970,6.92,971,6.92,972,6.92,973,6.92,974,6.92,975,4.535]],["title/classes/GetAllConversationDto.html",[0,0.261,628,2.698]],["body/classes/GetAllConversationDto.html",[0,0.467,2,0.882,3,0.153,4,0.139,5,0.125,7,0.19,8,0.01,9,0.008,10,0.008,16,0.225,29,1.601,38,0.582,82,0.542,91,0.722,101,1.28,102,2.156,105,2.757,109,3.184,168,2.459,352,1.339,554,2.393,571,3.454,573,3.334,574,2.095,582,3.721,628,4.823,633,3.763,720,3.253,721,3.403,722,3.582,784,4.04,785,4.434,786,4.257,795,3.763,976,5.706,977,5.733]],["title/classes/GetAllPostOfUserDto.html",[0,0.261,978,3.013]],["body/classes/GetAllPostOfUserDto.html",[0,0.452,2,0.96,3,0.166,4,0.151,5,0.136,7,0.166,8,0.01,9,0.008,10,0.008,16,0.197,38,0.51,82,0.59,91,0.786,101,1.185,102,2.347,109,3.305,554,2.52,561,4.634,571,3.637,573,3.512,574,2.28,774,4.096,799,5.494,978,5.215,979,6.6]],["title/classes/GetOneConversationDto.html",[0,0.261,633,2.843]],["body/classes/GetOneConversationDto.html",[0,0.465,2,0.874,3,0.151,4,0.138,5,0.124,7,0.189,8,0.01,9,0.008,10,0.008,16,0.224,29,1.587,38,0.579,82,0.537,91,0.716,101,1.276,102,2.137,105,2.742,109,3.172,168,2.446,352,1.654,554,2.38,571,3.435,573,3.316,574,2.077,582,3.701,628,5.028,633,4.648,720,3.225,721,3.373,722,3.563,784,4.018,785,4.41,786,4.221,787,4.555,788,5.003,795,3.731,976,4.555]],["title/classes/HttpExceptionFilter.html",[0,0.261,980,3.472]],["body/classes/HttpExceptionFilter.html",[0,0.328,2,0.836,3,0.145,4,0.132,5,0.118,7,0.145,8,0.01,9,0.008,10,0.008,16,0.218,17,0.813,38,0.444,46,2.313,82,0.513,84,0.931,85,0.685,86,0.859,91,0.685,92,1.567,110,1.206,183,2.746,184,6.651,185,6.651,194,6.059,195,6.366,196,6.651,197,6.992,199,2.545,200,3.567,204,3.906,209,2.956,210,2.902,211,4.783,212,4.783,213,4.783,214,4.783,223,4.783,226,4.783,227,4.783,228,2.46,229,4.783,231,3.779,232,4.783,255,6.059,980,5.517,981,4.783,982,5.434,983,5.434,984,5.434]],["title/interfaces/ISwaggerOptions.html",[985,2.843,986,3.217]],["body/interfaces/ISwaggerOptions.html",[3,0.117,4,0.106,5,0.096,7,0.117,8,0.01,9,0.007,10,0.007,15,3.124,38,0.625,40,3.723,58,3.694,86,1.332,91,0.552,101,1.075,115,3.923,302,3.099,554,2.009,939,3.049,985,2.878,986,4.438,987,3.86,988,7.304,989,7.304,990,7.304,991,8.216,992,6.944,993,4.123,994,6.43,995,5.977,996,5.977,997,5.977,998,6.101,999,5.977,1000,5.977,1001,5.977,1002,5.977,1003,5.262,1004,7.304,1005,5.977,1006,5.262,1007,5.977,1008,5.262,1009,5.977,1010,4.438,1011,2.731,1012,5.977,1013,5.977,1014,5.262,1015,5.262,1016,5.977,1017,5.262,1018,5.987,1019,5.987]],["title/modules/InterceptorModule.html",[56,1.629,264,3.013]],["body/modules/InterceptorModule.html",[0,0.365,3,0.161,4,0.146,5,0.132,7,0.161,8,0.01,9,0.008,10,0.008,16,0.261,17,0.905,56,2.767,58,2.833,69,3.044,264,5.118,276,4.208,320,6.477,321,6.477,1020,6.049,1021,7.929,1022,5.464,1023,6.049,1024,5.118,1025,6.049]],["title/injectables/LoggerContextMiddleware.html",[76,0.914,287,3.217]],["body/injectables/LoggerContextMiddleware.html",[0,0.336,3,0.148,4,0.135,5,0.121,7,0.148,8,0.01,9,0.008,10,0.008,16,0.221,17,0.834,38,0.571,46,2.694,76,1.475,77,2.095,82,0.526,84,0.955,85,0.702,86,0.881,91,0.702,92,1.592,110,1.237,165,1.478,183,2.223,200,5.261,204,4.548,209,3.031,287,5.193,868,4.992,884,5.193,886,6.156,887,7.056,890,5.193,891,6.156,998,4.137,1026,6.156,1027,4.905,1028,5.572,1029,5.572,1030,5.572]],["title/classes/LoggerModule.html",[0,0.261,293,3.217]],["body/classes/LoggerModule.html",[0,0.352,2,0.898,3,0.155,4,0.141,5,0.127,7,0.155,8,0.01,9,0.008,10,0.008,16,0.247,17,0.873,56,2.194,69,2.936,82,0.551,91,0.735,92,1.638,110,1.295,165,1.548,188,5.428,191,4.861,210,2.132,293,5.795,1031,5.136,1032,8.148,1033,5.835,1034,7.804,1035,5.768,1036,5.835,1037,5.835,1038,7.804,1039,4.676]],["title/injectables/LoggerService.html",[76,0.914,191,2.698]],["body/injectables/LoggerService.html",[0,0.239,3,0.106,4,0.096,5,0.086,7,0.106,8,0.01,9,0.006,10,0.006,15,4.652,16,0.125,17,0.593,38,0.642,39,2.223,76,1.175,77,1.49,82,0.742,84,1.31,85,0.963,86,1.267,91,0.499,92,1.269,101,1.41,110,1.696,186,4.015,191,3.471,193,4.231,200,5.017,217,3.951,352,1.301,554,1.873,805,3.708,1040,3.488,1041,5.573,1042,5.573,1043,5.573,1044,5.573,1045,5.573,1046,5.573,1047,3.962,1048,5.573,1049,6.994,1050,3.962,1051,5.573,1052,3.962,1053,5.573,1054,3.962,1055,5.573,1056,3.962,1057,5.573,1058,3.962,1059,3.962,1060,5.573,1061,3.962,1062,6.446,1063,5.573,1064,3.962,1065,3.962,1066,3.962,1067,3.962,1068,3.962]],["title/injectables/LoggingInterceptor.html",[76,0.914,1022,3.217]],["body/injectables/LoggingInterceptor.html",[0,0.332,3,0.147,4,0.133,5,0.12,7,0.147,8,0.01,9,0.008,10,0.008,16,0.24,17,0.824,38,0.45,76,1.465,77,2.072,82,0.52,84,0.944,85,0.694,86,0.871,91,0.694,92,1.581,110,1.223,165,1.461,183,2.198,210,2.013,347,4.738,349,3.27,866,4.83,867,5.156,868,4.972,869,5.553,871,5.289,872,4.83,875,3.616,876,4.85,1022,5.156,1069,4.85,1070,5.509,1071,5.509,1072,4.091,1073,5.509,1074,5.509,1075,5.509,1076,5.509,1077,6.113,1078,5.509,1079,5.509,1080,5.509]],["title/classes/LoginDto.html",[0,0.261,412,2.698]],["body/classes/LoginDto.html",[0,0.393,2,1.001,3,0.173,4,0.158,5,0.142,7,0.173,8,0.01,9,0.008,10,0.008,16,0.243,29,1.817,352,1.52,412,4.788,427,3.693,485,3.863,716,3.274,1081,5.729,1082,4.272,1083,5.216,1084,5.216]],["title/classes/MessagesGateway.html",[0,0.261,1085,3.217]],["body/classes/MessagesGateway.html",[0,0.193,2,0.492,3,0.085,4,0.077,5,0.07,7,0.085,8,0.01,9,0.005,10,0.005,16,0.214,38,0.618,53,2.832,79,1.018,82,0.714,84,1.26,85,0.974,86,1.163,88,1.357,91,0.403,92,1.086,93,2.745,101,1.34,102,2.766,110,1.576,119,1.672,159,2.375,165,1.795,210,2.312,217,3.406,311,6.193,502,3.238,554,1.604,615,2.832,626,5.553,764,4.962,767,5.425,815,1.448,993,2.983,1085,3.543,1086,2.816,1087,5.024,1088,4.2,1089,5.024,1090,4.2,1091,5.707,1092,4.2,1093,3.199,1094,4.66,1095,4.772,1096,5.707,1097,2.816,1098,7.866,1099,4.772,1100,3.199,1101,2.816,1102,4.772,1103,3.199,1104,2.816,1105,4.772,1106,3.199,1107,2.816,1108,4.772,1109,3.199,1110,3.199,1111,6.327,1112,4.772,1113,3.199,1114,2.816,1115,4.937,1116,4.772,1117,3.199,1118,4.772,1119,3.199,1120,4.772,1121,6.327,1122,2.816,1123,2.816,1124,2.816,1125,2.564,1126,2.816,1127,5.707,1128,3.199,1129,3.199,1130,5.707,1131,3.199,1132,3.199,1133,3.199,1134,3.199,1135,3.199,1136,3.199,1137,3.199,1138,3.199,1139,5.271,1140,3.199,1141,4.772,1142,3.199,1143,3.199]],["title/modules/MessagesModule.html",[56,1.629,265,3.013]],["body/modules/MessagesModule.html",[0,0.364,3,0.161,4,0.146,5,0.131,7,0.161,8,0.01,9,0.008,10,0.008,16,0.25,17,0.903,56,2.762,58,2.825,59,3.563,65,3.995,66,3.281,67,3.034,69,3.695,265,5.975,1085,5.453,1094,5.639,1123,5.309,1144,5.309,1145,5.309,1146,6.031,1147,6.031]],["title/injectables/MessagesService.html",[76,0.914,1094,2.843]],["body/injectables/MessagesService.html",[0,0.176,3,0.078,4,0.07,5,0.063,7,0.078,8,0.01,9,0.005,10,0.005,16,0.17,17,0.436,38,0.582,76,0.937,77,1.095,82,0.673,84,1.174,85,0.968,86,1.083,91,0.367,92,1.012,93,1.915,101,1.371,110,1.52,119,1.522,165,1.816,168,2.653,210,1.064,217,2.712,242,4.042,244,3.091,245,3.562,554,1.494,558,3.726,580,3.534,599,4.32,615,1.728,626,5.235,693,2.563,694,4.003,764,4.676,767,5.489,1010,2.162,1011,1.813,1087,4.745,1088,3.912,1089,3.912,1090,3.912,1092,3.912,1094,2.917,1097,2.563,1101,3.912,1104,3.912,1107,3.912,1114,3.912,1115,4.519,1148,2.563,1149,4.444,1150,7.809,1151,2.911,1152,2.911,1153,4.444,1154,2.911,1155,2.911,1156,2.911,1157,2.911,1158,5.719,1159,4.444,1160,4.444,1161,3.3,1162,3.562,1163,4.444,1164,4.444,1165,4.444,1166,2.911,1167,6.033,1168,7.124,1169,2.911,1170,2.911,1171,2.911,1172,2.911,1173,2.911,1174,2.911,1175,2.911,1176,2.911,1177,4.444,1178,2.911,1179,4.444,1180,4.444,1181,2.911,1182,2.911,1183,2.911,1184,2.911,1185,2.911,1186,2.911,1187,2.911,1188,2.911]],["title/classes/PaginationDto.html",[0,0.261,113,3.013]],["body/classes/PaginationDto.html",[0,0.455,2,0.969,3,0.168,4,0.152,5,0.137,7,0.168,8,0.01,9,0.008,10,0.008,16,0.255,29,1.759,113,5.245,352,1.471,573,2.951,574,2.302,582,3.293,624,3.924,716,3.17,1189,5.546,1190,3.924,1191,4.678,1192,5.049,1193,5.049,1194,4.678]],["title/injectables/ParseIntPipe.html",[76,0.914,1195,3.472]],["body/injectables/ParseIntPipe.html",[0,0.341,3,0.151,4,0.137,5,0.123,7,0.151,8,0.01,9,0.008,10,0.008,16,0.179,17,0.846,38,0.462,76,1.488,77,2.125,82,0.534,84,0.968,85,0.712,86,0.893,91,0.712,92,1.606,93,2.733,101,1.216,110,1.254,165,1.499,183,2.255,210,2.065,228,2.559,523,3.931,615,3.354,807,2.559,926,3.52,1011,3.52,1195,5.655,1196,6.211,1197,4.975,1198,5.655,1199,6.211,1200,6.165,1201,7.092,1202,5.651,1203,6.211,1204,7.056,1205,5.651,1206,5.651,1207,4.975,1208,4.975]],["title/classes/PostEntity.html",[0,0.261,775,2.843]],["body/classes/PostEntity.html",[0,0.39,2,0.759,3,0.131,4,0.119,5,0.107,7,0.131,8,0.01,9,0.007,10,0.007,16,0.156,34,2.297,38,0.679,82,0.785,91,0.621,101,1.38,102,3.127,554,2.173,555,4.094,561,5.904,563,3.38,564,4.341,569,4.498,571,4.092,573,3.822,574,1.802,775,4.244,778,5.018,779,4.094,780,4.736,1209,4.341,1210,5.782,1211,5.782,1212,4.932,1213,4.932,1214,4.932,1215,4.932,1216,4.932,1217,4.932,1218,4.932,1219,4.932,1220,5.692]],["title/controllers/PostsController.html",[11,1.838,1221,3.217]],["body/controllers/PostsController.html",[0,0.13,3,0.058,4,0.052,5,0.047,7,0.058,8,0.01,9,0.004,10,0.004,11,0.917,13,0.917,15,1.13,16,0.191,17,0.324,18,4.264,20,2.189,23,2.189,24,2.189,26,1.283,29,0.604,34,2.444,36,1.347,37,0.768,38,0.588,42,1.283,44,1.347,45,1.283,82,0.68,84,1.234,85,0.907,86,1.138,88,0.917,91,0.272,92,0.8,93,3.028,97,3.186,101,1.082,102,2.708,104,3.914,105,3.221,107,5.316,109,1.446,110,1.598,116,3.461,119,4.101,140,1.504,141,1.347,142,1.227,143,1.606,144,1.606,145,1.606,147,4.82,148,4.574,149,1.903,161,4.485,163,2.189,165,1.91,168,1.767,186,2.189,228,2.73,419,1.837,429,5.28,431,2.817,443,1.733,555,2.902,612,5.308,615,4.274,619,4.477,655,1.606,713,3.557,772,3.557,781,3.557,796,3.557,906,4.953,978,3.557,1221,2.61,1222,1.903,1223,5.594,1224,3.094,1225,3.094,1226,3.094,1227,3.094,1228,3.094,1229,3.094,1230,3.094,1231,3.094,1232,3.094,1233,3.094,1234,3.094,1235,1.903,1236,2.162,1237,3.094,1238,5.308,1239,2.162,1240,1.903,1241,2.162,1242,2.162,1243,3.515,1244,2.162,1245,1.903,1246,2.162,1247,2.162,1248,1.903,1249,2.162,1250,2.162,1251,1.903,1252,2.162,1253,2.817,1254,2.162,1255,1.903,1256,2.162,1257,2.162,1258,1.903,1259,2.162,1260,2.162,1261,1.903,1262,2.162,1263,2.162,1264,1.903,1265,3.357,1266,2.162,1267,3.515,1268,2.162,1269,1.903,1270,3.557,1271,2.162,1272,2.162,1273,1.903,1274,3.357,1275,2.162,1276,2.162,1277,4.441,1278,2.915,1279,1.903,1280,1.903,1281,2.162,1282,2.162,1283,2.162,1284,2.162,1285,2.162,1286,2.162,1287,2.162,1288,2.162,1289,2.162,1290,2.162,1291,2.162,1292,2.162,1293,2.162,1294,2.162,1295,2.162,1296,2.162,1297,2.162,1298,2.162,1299,2.162,1300,2.162,1301,2.162,1302,2.162,1303,2.162,1304,2.162,1305,1.903,1306,2.162,1307,2.162,1308,2.162,1309,2.162,1310,2.162,1311,2.162,1312,2.162,1313,2.162,1314,2.162,1315,2.162]],["title/modules/PostsModule.html",[56,1.629,266,3.013]],["body/modules/PostsModule.html",[0,0.332,3,0.146,4,0.133,5,0.12,7,0.146,8,0.01,9,0.008,10,0.008,13,2.941,16,0.26,17,0.822,56,2.607,58,2.573,59,3.363,63,4.983,65,3.771,66,2.989,67,2.764,69,3.488,71,4.317,74,4.403,266,6.098,267,4.765,682,4.836,1221,5.639,1278,5.511,1279,4.836,1316,4.836,1317,5.494,1318,4.836,1319,5.494,1320,5.494]],["title/injectables/PostsService.html",[76,0.914,1278,2.843]],["body/injectables/PostsService.html",[0,0.121,3,0.054,4,0.049,5,0.044,7,0.054,8,0.01,9,0.004,10,0.004,16,0.155,17,0.301,34,1.559,37,2.069,38,0.598,76,0.698,77,0.756,79,0.64,80,1.398,81,3.045,82,0.679,84,1.232,85,0.922,86,1.137,87,1.611,88,0.853,91,0.253,92,0.754,93,3.001,101,1.054,109,2.227,110,1.562,115,4.043,119,3.486,165,2.12,168,2.667,210,2.437,228,3.255,243,2.945,302,3.339,419,1.731,429,3.824,496,0.91,502,4.382,517,2.654,522,2.297,525,1.77,534,2.459,555,3.495,556,2.915,558,1.801,578,2.654,585,1.398,615,4.178,694,1.493,698,2.915,703,3.717,704,4.952,711,2.915,713,3.405,772,3.405,778,3.405,779,2.778,780,3.824,781,3.405,796,3.405,807,0.91,811,0.91,895,4.339,978,3.405,1224,2.915,1225,2.915,1226,2.915,1227,2.915,1228,2.915,1229,2.915,1230,2.915,1231,2.915,1232,2.915,1233,2.915,1234,2.915,1235,2.915,1240,2.915,1245,2.915,1248,2.915,1251,2.915,1253,1.611,1255,2.915,1258,2.915,1261,2.915,1264,2.915,1265,3.214,1269,2.915,1270,3.405,1273,2.915,1274,3.214,1278,2.174,1280,1.77,1305,1.77,1321,1.77,1322,2.01,1323,2.01,1324,2.01,1325,2.01,1326,2.01,1327,2.01,1328,2.01,1329,2.01,1330,2.01,1331,2.01,1332,2.01,1333,2.01,1334,3.312,1335,4.896,1336,2.01,1337,3.312,1338,3.312,1339,2.01,1340,2.01,1341,2.915,1342,4.223,1343,3.312,1344,2.01,1345,4.223,1346,2.01,1347,4.223,1348,2.01,1349,2.01,1350,1.77,1351,2.01,1352,6.159,1353,2.915,1354,2.01,1355,2.01,1356,2.01,1357,2.01,1358,2.01,1359,3.312,1360,2.01,1361,2.01,1362,2.01,1363,2.01,1364,2.01,1365,3.312,1366,2.01,1367,3.312,1368,2.01,1369,3.312,1370,2.01]],["title/modules/PrismaModule.html",[56,1.629,267,2.458]],["body/modules/PrismaModule.html",[0,0.35,3,0.155,4,0.14,5,0.126,7,0.155,8,0.01,9,0.008,10,0.008,16,0.246,17,0.868,56,2.697,58,2.717,59,3.479,65,3.901,66,3.156,67,2.919,69,3.608,81,4.667,267,4.895,284,5.747,285,3.807,1006,6.312,1039,5.747,1371,5.106,1372,5.106,1373,5.106,1374,5.801,1375,5.801]],["title/injectables/PrismaService.html",[76,0.914,81,2.264]],["body/injectables/PrismaService.html",[0,0.302,3,0.133,4,0.121,5,0.109,7,0.133,8,0.01,9,0.007,10,0.007,16,0.206,17,0.749,38,0.409,76,1.377,77,1.883,79,2.314,81,3.413,82,0.728,84,0.858,85,0.631,86,0.792,91,0.631,92,1.487,93,3.066,110,1.613,183,1.997,352,1.525,354,3.482,502,4.124,1376,4.407,1377,7.268,1378,6.531,1379,8.193,1380,8.193,1381,5.007,1382,6.531,1383,6.173,1384,5.007,1385,4.013,1386,5.007,1387,5.007,1388,4.013,1389,5.007,1390,4.407,1391,5.749,1392,5.007,1393,5.007,1394,5.007,1395,5.007,1396,5.007,1397,5.007]],["title/classes/ProfileEntity.html",[0,0.261,1190,2.698]],["body/classes/ProfileEntity.html",[0,0.29,2,0.375,3,0.065,4,0.059,5,0.053,7,0.065,8,0.01,9,0.004,10,0.004,16,0.173,29,0.68,34,1.745,38,0.698,82,0.737,85,0.802,91,0.307,101,1.375,102,2.933,132,2.8,138,3.548,217,4.009,242,4.045,244,3.812,302,2.7,374,1.274,404,1.81,522,2.105,550,3.857,554,1.3,563,4.165,569,2.691,571,2.335,573,3.492,574,0.89,582,4.123,585,3.347,590,4.725,624,2.997,721,4.335,722,4.326,723,1.953,730,2.873,731,2.873,733,4.725,736,2.873,747,1.953,748,1.953,749,1.953,752,1.953,753,1.953,754,1.953,755,4.725,784,2.196,893,1.695,926,2.41,1161,2.873,1162,1.953,1190,2.41,1193,3.857,1194,3.574,1220,4.236,1391,3.406,1398,2.145,1399,5.872,1400,4.236,1401,5.872,1402,3.857,1403,4.236,1404,3.857,1405,4.236,1406,4.236,1407,4.791,1408,3.406,1409,3.406,1410,3.406,1411,2.145,1412,4.824,1413,2.437,1414,2.145,1415,3.406,1416,4.824,1417,2.145,1418,2.437,1419,3.406,1420,2.437,1421,4.236,1422,2.145,1423,3.406,1424,2.437,1425,2.145,1426,3.406,1427,3.406,1428,2.145,1429,2.437,1430,2.437,1431,4.236,1432,2.437,1433,2.145,1434,2.145,1435,4.069,1436,2.145,1437,4.236,1438,2.145,1439,2.437,1440,3.101,1441,3.101,1442,2.145,1443,2.437,1444,2.437,1445,2.437,1446,2.145,1447,2.437,1448,4.069,1449,3.101,1450,2.437,1451,2.145,1452,3.406,1453,2.437,1454,1.81,1455,3.869,1456,5.48,1457,2.145,1458,1.81,1459,1.81,1460,2.437,1461,2.437,1462,1.953,1463,2.145,1464,2.437,1465,2.437,1466,2.145,1467,2.437,1468,2.437,1469,2.437,1470,2.437,1471,2.437,1472,2.437,1473,2.437,1474,2.437,1475,2.437,1476,2.437]],["title/classes/ReactionsPost.html",[0,0.261,1265,2.843]],["body/classes/ReactionsPost.html",[0,0.449,2,0.948,3,0.164,4,0.149,5,0.134,7,0.198,8,0.01,9,0.008,10,0.008,16,0.235,29,1.721,34,1.962,352,1.738,555,4.222,716,3.101,774,4.045,775,4.045,776,4.939,777,5.964,778,4.286,779,3.497,780,4.045,1210,4.939,1211,4.939,1265,4.884,1274,4.045,1477,4.939]],["title/interfaces/Response.html",[204,2.458,985,2.843]],["body/interfaces/Response.html",[0,0.347,3,0.153,4,0.139,5,0.125,7,0.19,8,0.01,9,0.008,10,0.008,16,0.245,17,0.86,38,0.47,76,1.504,91,0.724,165,1.525,183,2.294,204,4.047,243,4.534,347,4.233,349,3.413,554,2.397,866,3.999,868,3.581,869,4.96,871,4.96,872,4.96,875,3.774,939,3.999,985,3.774,1024,3.999,1072,4.27,1478,4.608,1479,6.825,1480,5.062,1481,5.062]],["title/guards/RolesGuard.html",[298,3.217,1482,3.472]],["body/guards/RolesGuard.html",[0,0.305,3,0.135,4,0.122,5,0.11,7,0.135,8,0.01,9,0.007,10,0.007,16,0.231,17,0.757,30,3.15,38,0.537,46,1.7,76,1.387,79,1.61,82,0.621,84,1.127,85,0.828,86,1.039,88,2.146,91,0.637,92,1.497,105,2.546,110,1.123,165,1.937,183,2.018,210,2.826,276,3.518,298,4.882,302,2.146,318,6.585,343,6.807,344,4.453,346,5.787,347,4.59,349,3.002,369,4.453,370,4.453,437,4.453,589,2.752,993,3.436,1483,4.453,1484,5.058,1485,5.058,1486,5.058,1487,6.574,1488,5.058,1489,4.453,1490,4.453,1491,6.574,1492,5.058,1493,5.058,1494,5.058]],["title/classes/RtGuard.html",[0,0.261,436,3.217]],["body/classes/RtGuard.html",[0,0.389,2,0.991,3,0.172,4,0.156,5,0.14,7,0.172,8,0.01,9,0.008,10,0.008,16,0.204,79,2.594,82,0.609,350,5.673,351,4.482,352,1.505,353,5.673,354,4.482,436,5.675,1139,4.785,1495,5.673,1496,6.444]],["title/injectables/RtStrategy.html",[76,0.914,462,3.013]],["body/injectables/RtStrategy.html",[0,0.308,3,0.136,4,0.124,5,0.111,7,0.136,8,0.01,9,0.007,10,0.007,16,0.254,17,0.765,38,0.541,46,2.609,76,1.396,77,1.922,79,2.107,82,0.625,84,1.134,85,0.834,86,1.046,91,0.644,92,1.507,110,1.134,165,1.355,186,3.183,209,2.78,210,1.867,285,3.354,302,2.168,351,3.554,352,1.193,354,3.554,374,3.459,375,4.499,376,5.4,378,4.914,382,6.834,383,4.499,384,4.499,385,4.499,386,3.795,387,4.603,389,4.499,390,4.499,391,4.499,392,4.499,397,5.304,462,4.603,477,4.096,501,4.499,890,3.795,1139,3.795,1497,4.499,1498,5.11,1499,6.618,1500,5.11,1501,5.11,1502,5.11,1503,5.11,1504,5.11]],["title/classes/SignupDto.html",[0,0.261,417,3.013]],["body/classes/SignupDto.html",[0,0.389,2,0.991,3,0.172,4,0.156,5,0.14,7,0.172,8,0.01,9,0.008,10,0.008,16,0.242,29,1.799,352,1.505,417,5.316,427,3.657,485,3.825,519,4.014,716,3.242,1082,4.23,1083,5.165,1084,5.165,1505,5.673]],["title/injectables/TimeoutInterceptor.html",[76,0.914,1506,3.472]],["body/injectables/TimeoutInterceptor.html",[0,0.347,3,0.153,4,0.139,5,0.125,7,0.153,8,0.01,9,0.008,10,0.008,16,0.245,17,0.86,38,0.47,47,2.44,76,1.504,77,2.162,82,0.543,84,0.985,85,0.724,86,0.909,91,0.724,92,1.624,110,1.276,165,1.525,183,2.294,347,4.811,349,3.413,866,4.96,867,5.296,868,4.829,869,5.638,871,5.392,872,4.96,875,3.774,1072,4.27,1506,5.716,1507,5.062,1508,5.75,1509,5.75]],["title/injectables/TransformInterceptor.html",[76,0.914,1024,3.013]],["body/injectables/TransformInterceptor.html",[0,0.334,3,0.148,4,0.134,5,0.121,7,0.186,8,0.01,9,0.008,10,0.008,16,0.241,17,0.829,38,0.453,76,1.47,77,2.083,82,0.523,84,0.949,85,0.698,86,0.876,91,0.698,92,1.586,110,1.23,165,1.47,183,2.21,204,3.144,243,3.791,347,4.748,349,4.136,866,5.302,867,4.114,868,4.748,869,5.564,871,5.302,872,4.847,875,3.637,985,3.637,1024,4.847,1072,4.114,1478,4.44,1479,4.877,1480,4.877,1481,4.877,1510,5.54]],["title/classes/UpdateCommentTextDto.html",[0,0.261,1270,3.013]],["body/classes/UpdateCommentTextDto.html",[0,0.389,2,0.991,3,0.172,4,0.156,5,0.14,7,0.172,8,0.01,9,0.008,10,0.008,16,0.242,29,1.799,168,2.226,352,1.505,552,4.23,558,3.506,715,4.785,716,3.242,717,5.165,718,5.165,1270,5.316,1511,5.673]],["title/classes/UpdateConversationDto.html",[0,0.261,638,2.571]],["body/classes/UpdateConversationDto.html",[0,0.479,2,0.755,3,0.131,4,0.119,5,0.107,7,0.204,8,0.01,9,0.007,10,0.007,16,0.227,29,1.37,34,2.292,38,0.625,82,0.68,85,0.907,86,1.288,91,0.618,101,1.387,105,1.9,109,2.018,132,3.371,168,1.695,352,1.785,419,2.565,554,2.166,571,3.127,573,3.019,574,1.793,577,3.056,579,3.657,580,3.506,582,3.369,609,4.337,622,2.913,638,3.825,642,2.913,646,2.913,720,2.785,722,2.469,784,2.785,785,3.056,789,3.413,790,5.316,793,5.316,794,3.644,795,3.221,1512,4.907,1513,4.907,1514,4.907]],["title/classes/UpdateMembersConversationDto.html",[0,0.261,642,2.571]],["body/classes/UpdateMembersConversationDto.html",[0,0.488,2,0.799,3,0.138,4,0.126,5,0.113,7,0.208,8,0.01,9,0.007,10,0.007,16,0.234,29,1.449,34,1.653,38,0.546,82,0.49,85,0.654,91,0.654,101,1.383,105,2.01,109,2.135,132,2.431,168,1.793,352,1.824,419,2.713,554,2.247,571,3.243,573,3.131,574,1.897,577,3.233,579,3.794,580,4.248,582,3.494,609,4.432,622,3.081,638,3.081,642,3.968,646,3.081,720,2.946,722,2.612,784,2.946,785,3.233,789,3.61,790,4.65,793,5.432,794,3.855,795,3.407,1515,5.191]],["title/classes/UpdateMessageDto.html",[0,0.261,1115,3.013]],["body/classes/UpdateMessageDto.html",[0,0.361,2,0.919,3,0.159,4,0.145,5,0.13,7,0.159,8,0.01,9,0.008,10,0.008,16,0.231,38,0.597,82,0.69,91,0.753,101,1.299,168,2.725,352,1.396,419,3.124,554,2.454,626,5.486,764,4.794,766,4.79,770,5.261,793,5.08,1115,5.08,1516,6.943,1517,5.976,1518,5.261,1519,4.438,1520,5.976]],["title/classes/UpdatePasswordDto.html",[0,0.261,425,3.013]],["body/classes/UpdatePasswordDto.html",[0,0.389,2,0.991,3,0.172,4,0.156,5,0.14,7,0.172,8,0.01,9,0.008,10,0.008,16,0.242,29,1.799,352,1.505,425,5.316,485,3.825,716,3.242,1082,4.23,1083,5.165,1084,5.165,1521,5.673,1522,5.673,1523,5.673]],["title/classes/UpdatePostDto.html",[0,0.261,1274,2.843]],["body/classes/UpdatePostDto.html",[0,0.449,2,0.948,3,0.164,4,0.149,5,0.134,7,0.198,8,0.01,9,0.008,10,0.008,16,0.235,29,1.721,34,1.962,352,1.738,555,4.222,716,3.101,774,4.045,775,4.045,776,4.939,777,5.964,778,4.286,779,3.497,780,4.045,1210,4.939,1211,4.939,1265,4.045,1274,4.884,1477,4.939]],["title/classes/UpdateRolesConversationDto.html",[0,0.261,646,2.571]],["body/classes/UpdateRolesConversationDto.html",[0,0.481,2,0.766,3,0.133,4,0.121,5,0.109,7,0.205,8,0.01,9,0.007,10,0.007,16,0.229,29,1.391,34,1.586,38,0.628,82,0.685,85,0.628,91,0.628,101,1.39,105,1.929,109,2.049,132,2.333,168,1.721,352,1.795,419,2.604,554,2.188,571,3.158,573,3.049,574,1.82,577,4.516,579,4.363,580,4.182,582,3.402,609,4.363,622,2.957,638,2.957,642,2.957,646,3.863,720,2.827,722,2.506,784,2.827,785,3.103,789,3.465,790,5.347,793,5.347,794,3.699,795,3.27,1524,4.981,1525,4.981,1526,4.981]],["title/classes/UserAvatarDto.html",[0,0.261,130,2.843]],["body/classes/UserAvatarDto.html",[0,0.393,2,1.001,3,0.173,4,0.158,5,0.142,7,0.173,8,0.01,9,0.008,10,0.008,16,0.243,29,1.817,130,5.046,132,3.048,352,1.52,716,3.274,1190,4.053,1191,4.832,1192,5.216,1527,5.216,1528,5.729]],["title/classes/UserCoverDto.html",[0,0.261,136,2.843]],["body/classes/UserCoverDto.html",[0,0.393,2,1.001,3,0.173,4,0.158,5,0.142,7,0.173,8,0.01,9,0.008,10,0.008,16,0.243,29,1.817,136,5.046,138,3.863,352,1.52,716,3.274,1190,4.053,1191,4.832,1192,5.216,1527,5.216,1529,5.729]],["title/classes/UserEntity.html",[0,0.261,1082,2.843]],["body/classes/UserEntity.html",[0,0.313,2,0.552,3,0.096,4,0.087,5,0.078,7,0.096,8,0.01,9,0.006,10,0.006,16,0.193,29,1.002,34,2.487,38,0.66,82,0.67,85,0.842,91,0.452,101,1.373,102,2.668,217,4.163,374,1.875,427,4.516,485,3.621,519,4.419,554,1.745,563,3.495,571,3.588,573,3.131,574,1.311,582,3.866,596,5.432,619,5.492,721,2.129,722,4.066,730,4.965,731,3.855,733,4.965,735,3.158,736,3.855,740,3.158,741,4.57,742,5.686,745,4.57,746,4.57,747,2.876,748,2.876,749,2.876,750,2.496,751,2.496,752,2.876,753,2.876,754,2.876,755,4.965,756,4.57,757,3.158,1082,3.408,1522,5.37,1523,5.37,1530,3.158,1531,3.588,1532,7.81,1533,5.192,1534,3.588,1535,5.192,1536,7.094,1537,3.588,1538,3.588,1539,3.588,1540,3.588,1541,3.588,1542,4.57,1543,3.588,1544,5.192,1545,5.192,1546,5.192,1547,5.192,1548,5.192,1549,3.588,1550,3.588,1551,3.588,1552,3.588,1553,3.588,1554,3.588,1555,3.588,1556,3.588]],["title/classes/UserProfileDto.html",[0,0.261,125,2.843]],["body/classes/UserProfileDto.html",[0,0.205,2,0.523,3,0.091,4,0.082,5,0.074,7,0.091,8,0.01,9,0.005,10,0.005,16,0.107,34,1.588,38,0.681,82,0.788,85,0.745,91,0.428,101,1.352,102,3.135,125,3.274,132,2.769,138,3.509,217,3.87,242,3.697,244,3.47,302,2.508,352,1.165,522,1.848,550,2.722,554,1.676,563,4.021,585,2.362,590,4.39,624,3.107,721,4.737,722,4.227,723,2.722,730,2.522,731,2.522,733,4.39,736,2.522,755,3.704,784,1.927,787,6.682,893,2.362,926,2.116,1161,2.522,1190,5.298,1191,2.522,1193,3.998,1194,3.704,1399,5.735,1400,4.391,1401,5.735,1402,3.998,1403,4.391,1404,3.998,1405,4.391,1406,4.391,1407,4.738,1408,2.99,1409,2.99,1410,2.99,1411,2.99,1412,4.391,1414,2.99,1415,2.99,1416,4.391,1417,2.99,1419,4.391,1421,2.99,1422,2.99,1423,2.99,1425,2.99,1426,2.99,1427,2.99,1428,2.99,1431,5.204,1433,2.99,1434,2.99,1435,3.704,1436,2.99,1437,2.99,1438,2.99,1440,2.722,1441,2.722,1442,2.99,1446,2.99,1448,3.704,1449,2.722,1451,2.99,1452,2.99,1557,2.99,1558,2.99,1559,3.397,1560,3.397,1561,3.397,1562,3.397,1563,3.397,1564,3.397,1565,3.397,1566,3.397,1567,3.397,1568,3.397,1569,3.397,1570,3.397,1571,3.397,1572,3.397]],["title/controllers/UsersController.html",[11,1.838,1573,3.217]],["body/controllers/UsersController.html",[0,0.145,3,0.064,4,0.058,5,0.052,7,0.064,8,0.01,9,0.004,10,0.004,11,1.016,13,1.016,15,1.252,16,0.209,17,0.358,18,3.934,19,2.834,20,2.378,21,2.834,22,2.834,23,2.378,24,2.378,25,2.834,26,1.422,27,2.834,28,2.655,29,0.669,34,2.528,35,1.666,36,1.492,37,0.851,38,0.562,39,1.523,40,1.492,41,1.049,42,1.422,43,1.666,44,1.492,45,1.422,46,0.805,47,1.016,48,1.779,49,1.779,50,1.779,51,1.666,52,1.666,53,0.956,82,0.626,84,1.135,85,0.835,86,1.047,88,1.016,91,0.302,92,0.869,93,2.928,96,3.814,97,3.934,98,3.814,99,3.814,101,1.303,102,2.492,104,3.31,105,3.268,106,2.109,107,5.099,109,2.989,110,1.471,111,4.408,116,3.098,119,4.188,120,1.92,122,4.69,125,3.563,129,1.92,130,3.563,132,1.788,135,1.92,136,3.563,138,2.266,140,4.123,141,1.492,142,1.359,143,1.779,144,1.779,145,1.779,146,1.92,147,4.515,148,4.284,152,1.92,153,1.92,154,1.92,155,1.92,157,3.381,161,4.127,162,1.572,163,4.127,165,1.757,168,2.449,170,2.109,172,2.109,174,4.03,175,2.109,177,2.109,388,1.666,404,2.834,412,3.381,427,1.359,435,4.69,485,3.518,519,2.378,911,3.36,917,3.36,1573,2.834,1574,2.109,1575,4.189,1576,4.189,1577,4.189,1578,4.189,1579,2.109,1580,2.396,1581,2.396,1582,2.396,1583,2.109,1584,2.396,1585,2.396,1586,3.36,1587,2.109,1588,2.396,1589,3.36,1590,2.396,1591,2.396,1592,2.396,1593,2.396,1594,2.396,1595,2.396,1596,2.396,1597,2.396,1598,2.109,1599,2.396,1600,2.396,1601,2.396,1602,2.109,1603,2.109,1604,2.109,1605,2.396,1606,2.396,1607,2.396,1608,2.396,1609,2.396,1610,2.396,1611,2.396,1612,2.396,1613,2.396,1614,2.396,1615,2.396,1616,2.396,1617,2.396,1618,2.396]],["title/modules/UsersModule.html",[56,1.629,63,2.571]],["body/modules/UsersModule.html",[0,0.288,3,0.127,4,0.116,5,0.104,7,0.127,8,0.01,9,0.007,10,0.007,13,2.687,16,0.256,17,0.715,38,0.39,40,2.975,56,2.381,58,2.237,59,3.072,63,5.122,65,3.444,66,2.599,67,2.403,69,3.186,71,3.944,75,4.205,82,0.451,84,0.819,85,0.602,86,0.755,92,1.087,110,1.06,116,3.31,157,5.412,162,3.135,200,4.156,231,3.322,261,5.308,267,4.589,269,4.205,270,5.574,271,6.658,273,5.574,323,4.205,326,4.205,464,4.205,881,3.547,882,3.828,1039,5.075,1573,5.274,1603,4.205,1619,4.205,1620,4.777,1621,4.205,1622,4.205,1623,4.777,1624,4.777,1625,4.777,1626,4.777,1627,4.777,1628,4.777]],["title/injectables/UsersService.html",[76,0.914,157,2.698]],["body/injectables/UsersService.html",[0,0.127,3,0.056,4,0.051,5,0.046,7,0.056,8,0.01,9,0.004,10,0.004,16,0.188,17,0.315,37,1.787,38,0.57,76,0.725,77,0.791,79,0.669,80,1.462,81,3.11,82,0.659,84,1.195,85,0.878,86,1.102,88,0.892,91,0.265,92,0.782,93,2.955,94,3.024,95,3.024,96,2.753,97,2.713,98,3.491,99,3.491,100,3.024,101,1.297,105,2.304,109,3.356,110,1.504,111,4.467,112,3.024,113,3.499,119,4.115,120,2.753,122,5.033,125,3.302,129,1.685,130,3.302,132,0.985,135,1.685,136,3.302,138,1.248,151,1.851,152,1.685,153,1.685,154,1.685,155,1.685,157,2.14,162,2.859,165,1.798,168,2.561,210,2.662,228,2.843,242,1.949,243,1.869,302,3.419,388,1.462,412,3.133,419,1.099,427,1.193,485,3.888,496,0.952,497,1.685,498,2.551,500,1.851,502,4.379,513,3.024,517,2.753,519,3.454,522,1.869,523,4.368,534,4.419,535,3.024,536,3.024,539,1.851,563,1.099,578,3.491,581,1.851,704,5.033,802,1.02,811,0.952,895,4.031,926,2.14,993,1.099,1353,4.428,1448,1.561,1575,3.024,1576,3.835,1577,3.024,1578,3.835,1579,3.024,1583,1.851,1586,4.428,1587,3.024,1598,1.851,1602,1.851,1604,1.851,1629,1.851,1630,2.102,1631,2.102,1632,2.102,1633,2.102,1634,2.102,1635,2.102,1636,2.102,1637,2.102,1638,2.102,1639,2.102,1640,3.435,1641,2.102,1642,2.102,1643,4.356,1644,3.435,1645,2.102,1646,3.435,1647,3.435,1648,2.102,1649,2.102,1650,2.102,1651,2.102,1652,2.102,1653,2.102,1654,2.102,1655,3.435,1656,2.102,1657,3.435,1658,3.435,1659,3.435,1660,2.102,1661,4.356,1662,2.102,1663,2.102,1664,1.685,1665,2.102,1666,3.435,1667,2.102]],["title/injectables/ValidationPipe.html",[76,0.914,1668,3.472]],["body/injectables/ValidationPipe.html",[0,0.428,3,0.127,4,0.115,5,0.104,7,0.127,8,0.01,9,0.007,10,0.007,16,0.224,17,0.711,38,0.673,76,1.331,77,1.788,82,0.596,84,1.082,85,0.795,86,0.998,91,0.599,92,1.437,93,2.517,101,0.752,110,1.401,165,1.879,183,1.896,186,4.413,210,2.758,228,2.152,374,2.485,502,2.697,522,2.586,523,3.306,563,2.485,574,1.737,615,2.821,807,2.152,922,3.12,993,3.703,1011,4.702,1198,5.058,1199,5.556,1200,6.05,1201,6.645,1203,5.556,1207,4.185,1208,4.185,1454,3.53,1519,3.53,1668,5.058,1669,4.185,1670,6.312,1671,6.312,1672,4.754,1673,7.548,1674,4.754,1675,4.754,1676,4.754,1677,5.556,1678,4.754,1679,4.754,1680,4.754,1681,4.754,1682,4.754]],["title/coverage.html",[1683,4.751]],["body/coverage.html",[0,0.52,1,0.878,5,0.035,6,1.421,8,0.01,9,0.003,10,0.003,11,2.487,12,1.199,14,1.421,31,1.199,38,0.132,64,1.123,70,1.199,76,1.596,78,1.421,81,0.844,89,1.421,90,1.421,105,0.625,113,1.123,116,0.844,125,1.06,130,1.06,136,1.06,157,1.005,181,1.294,182,1.421,191,1.005,193,1.06,204,0.916,228,0.731,234,1.199,235,1.421,250,1.06,279,1.199,287,1.199,293,1.199,298,1.199,334,2.653,335,1.421,342,1.421,372,1.123,373,1.421,394,1.199,395,1.421,412,1.005,417,1.123,425,1.123,432,1.06,434,1.294,435,1.199,436,1.199,462,1.123,478,1.421,498,1.199,499,1.294,522,4.942,552,1.06,553,1.421,575,1.199,576,1.421,597,1.199,598,1.421,609,0.916,617,1.123,622,0.958,624,1.716,628,1.005,633,1.06,638,0.958,642,0.958,646,0.958,651,1.06,683,1.421,713,1.123,714,1.421,715,2.676,719,1.421,720,3.326,750,1.123,751,1.123,764,1.06,765,1.421,766,2.208,772,1.123,773,1.421,774,3.139,775,1.06,781,1.123,782,1.421,783,1.421,790,2.963,796,1.123,797,1.421,800,0.756,801,3.25,816,0.756,818,0.756,820,0.756,822,0.756,825,0.756,827,0.756,830,0.756,832,0.756,834,0.756,838,0.756,839,0.756,864,1.294,865,1.421,881,1.199,882,1.294,883,1.421,896,1.199,897,1.421,932,1.294,933,1.294,934,1.294,935,1.06,964,1.421,976,2.208,978,1.123,979,1.421,980,1.294,981,1.421,985,1.808,986,1.199,987,1.421,998,4.849,1022,1.199,1024,1.123,1026,1.421,1027,1.421,1031,1.421,1035,1.294,1040,1.421,1069,1.421,1081,1.421,1082,1.06,1085,1.199,1086,1.421,1094,1.06,1115,1.123,1148,1.421,1189,1.421,1190,1.005,1195,1.294,1196,1.421,1197,1.421,1209,1.421,1221,1.199,1222,1.421,1265,1.06,1270,1.123,1274,1.06,1278,1.06,1321,1.421,1376,1.421,1398,1.421,1458,1.199,1459,1.199,1477,2.208,1478,2.208,1482,1.294,1483,1.421,1495,1.421,1497,1.421,1505,1.421,1506,1.294,1507,1.421,1511,1.421,1516,1.421,1521,1.421,1527,2.208,1528,1.421,1529,1.421,1530,1.421,1557,1.421,1558,1.421,1573,1.199,1574,1.421,1629,1.421,1668,1.294,1669,1.421,1683,1.294,1684,1.199,1685,1.614,1686,1.614,1687,8.051,1688,7.107,1689,2.425,1690,8.548,1691,1.421,1692,8.815,1693,1.421,1694,1.614,1695,1.614,1696,1.421,1697,1.421,1698,7.183,1699,7.183,1700,1.421,1701,1.421,1702,1.421,1703,1.421,1704,1.421,1705,1.421,1706,1.421,1707,1.421,1708,1.421,1709,1.421,1710,1.421,1711,1.421,1712,1.421,1713,1.421,1714,1.421,1715,1.421,1716,1.421,1717,1.421,1718,1.421,1719,1.421,1720,1.421,1721,1.421,1722,1.421,1723,1.421,1724,1.421,1725,1.421,1726,1.421,1727,1.421,1728,1.421,1729,1.421,1730,1.421,1731,1.421,1732,4.26,1733,1.421,1734,1.421,1735,3.172,1736,1.421,1737,2.208,1738,1.421,1739,3.172,1740,1.421,1741,1.421,1742,4.26,1743,1.421,1744,1.421,1745,1.421,1746,1.421,1747,1.421,1748,1.421,1749,1.421,1750,2.208,1751,2.208,1752,1.294,1753,1.294,1754,2.208,1755,2.208,1756,2.208,1757,2.755,1758,3.604,1759,3.604,1760,2.425,1761,1.421,1762,1.421,1763,1.421,1764,2.755,1765,3.604,1766,1.421,1767,2.888,1768,1.294,1769,1.421,1770,1.614,1771,1.614,1772,2.755,1773,1.614,1774,1.421,1775,1.421,1776,1.614,1777,1.614]],["title/dependencies.html",[59,2.53,1778,3.177]],["body/dependencies.html",[0,0.395,8,0.01,9,0.007,10,0.007,17,0.753,29,1.405,59,2.441,188,3.5,209,2.738,276,3.5,285,3.303,296,4.43,351,3.5,378,3.737,386,4.865,387,4.557,468,4.033,574,1.839,694,3.737,875,3.303,931,5.768,1122,4.43,1124,5.768,1125,4.033,1200,4.033,1388,4.033,1454,3.737,1518,4.43,1519,3.737,1779,5.032,1780,6.552,1781,5.032,1782,5.032,1783,8.003,1784,5.032,1785,6.552,1786,5.032,1787,5.032,1788,6.552,1789,5.032,1790,5.032,1791,4.43,1792,5.032,1793,5.032,1794,5.032,1795,4.43,1796,5.032,1797,4.43,1798,4.43,1799,5.032,1800,5.032,1801,4.43,1802,5.032,1803,4.43,1804,5.032,1805,5.032,1806,5.032,1807,4.033,1808,5.032,1809,5.032,1810,5.032,1811,5.032,1812,5.032,1813,5.032,1814,6.552,1815,5.032,1816,4.43,1817,5.032,1818,5.032]],["title/miscellaneous/enumerations.html",[1819,2.142,1820,4.59]],["body/miscellaneous/enumerations.html",[1,3.856,8,0.01,9,0.006,10,0.006,30,3.546,34,1.813,91,0.515,105,2.745,217,2.864,1011,5.676,1194,4.227,1404,4.563,1440,4.563,1441,3.274,1448,4.227,1449,4.563,1462,4.563,1664,4.563,1819,2.425,1820,3.596,1821,5.693,1822,8.397,1823,5.693,1824,5.693,1825,5.693,1826,5.693,1827,5.693,1828,5.693,1829,4.085,1830,5.693,1831,5.693,1832,5.693,1833,4.085,1834,4.085,1835,4.085,1836,5.693,1837,5.693,1838,5.693,1839,5.693,1840,5.693,1841,5.693,1842,5.693,1843,4.085,1844,5.693,1845,5.693,1846,5.693,1847,5.693,1848,5.693,1849,5.693,1850,5.693,1851,4.085,1852,3.596,1853,6.553,1854,5.693,1855,5.693,1856,5.693,1857,5.693,1858,5.693,1859,4.085,1860,4.085,1861,5.693,1862,5.693,1863,4.085]],["title/classes/fullNameValidator.html",[0,0.261,1458,3.217]],["body/classes/fullNameValidator.html",[0,0.41,2,0.818,3,0.142,4,0.129,5,0.116,7,0.142,8,0.01,9,0.007,10,0.007,16,0.168,38,0.555,82,0.641,84,1.163,85,0.993,86,1.073,91,0.67,92,1.546,93,1.889,101,1.246,110,1.507,165,1.801,183,2.708,210,1.943,334,3.311,374,3.548,558,2.892,574,1.943,589,2.892,993,3.548,1435,3.948,1458,5.041,1750,4.261,1864,5.202,1865,4.722,1866,4.722,1867,5.886,1868,5.317,1869,5.791,1870,5.041,1871,5.317,1872,4.722,1873,4.261,1874,3.948,1875,3.948,1876,3.698]],["title/miscellaneous/functions.html",[1819,2.142,1877,4.59]],["body/miscellaneous/functions.html",[8,0.01,9,0.007,10,0.007,15,3.807,38,0.68,84,1.426,85,1.048,86,1.315,91,0.549,101,1.371,110,1.693,111,3.377,191,3.706,193,4.449,231,5.304,563,4.288,596,4.139,922,2.859,932,4.769,933,4.769,934,4.769,954,5.238,993,3.11,1010,3.234,1011,2.713,1035,5.432,1162,4.769,1383,5.432,1385,3.491,1457,3.834,1737,3.491,1739,3.834,1740,5.238,1741,5.238,1743,3.834,1744,5.238,1746,3.834,1747,5.238,1748,3.834,1749,5.238,1766,3.834,1767,6.309,1768,3.491,1769,3.834,1774,3.834,1775,5.966,1819,2.585,1877,3.834,1878,4.355,1879,4.355,1880,6.778,1881,4.355,1882,3.834,1883,3.834,1884,4.355,1885,4.355,1886,4.355,1887,4.355,1888,4.355,1889,4.355,1890,4.355,1891,4.355,1892,4.355,1893,4.355,1894,4.355,1895,3.834,1896,4.355,1897,4.355,1898,4.355,1899,4.355]],["title/classes/imageValidator.html",[0,0.261,1752,3.472]],["body/classes/imageValidator.html",[0,0.397,2,0.78,3,0.135,4,0.123,5,0.11,7,0.135,8,0.01,9,0.007,10,0.007,16,0.16,38,0.538,82,0.622,84,1.128,85,0.921,86,1.041,91,0.639,92,1.499,93,1.801,101,1.268,110,1.462,111,3.737,165,1.747,174,5.43,183,2.627,210,2.406,302,2.152,374,3.822,544,3.765,574,1.853,589,3.582,993,3.442,1751,4.064,1752,5.278,1753,4.064,1864,5.086,1865,4.58,1866,4.58,1867,5.822,1869,5.718,1872,4.58,1876,3.527,1900,5.071,1901,5.071,1902,5.071,1903,4.464,1904,5.071,1905,7.313,1906,5.071]],["title/index.html",[91,0.455,1907,3.177,1908,3.177]],["body/index.html",[0,0.26,1,1.845,4,0.05,5,0.109,8,0.01,9,0.004,10,0.004,13,0.878,30,1.289,34,1.08,45,1.228,46,0.695,51,1.439,53,0.826,59,1.645,67,1.041,69,1.041,85,0.261,92,0.471,97,4.055,104,4.338,105,3.009,110,0.459,115,2.226,116,1.082,122,4.386,132,1.588,138,1.228,146,1.658,162,2.828,168,2.396,174,1.537,188,2.359,193,1.358,204,1.174,209,1.126,217,2.168,228,2.947,238,3.824,241,3.793,242,1.174,243,1.126,304,1.822,311,1.658,314,3.7,327,1.658,329,3.793,362,2.718,363,1.658,386,1.537,387,2.359,404,1.537,419,3.087,427,1.924,429,4.759,485,2.013,511,1.658,519,1.289,529,1.822,574,0.756,579,1.924,580,1.126,599,2.718,611,5.558,619,1.537,624,3.103,635,2.985,648,2.985,655,1.537,705,1.822,722,1.706,779,2.445,815,0.937,847,3.026,884,1.537,905,5.199,916,1.822,922,1.358,994,1.822,1008,2.985,1014,1.822,1015,4.84,1017,1.822,1125,2.718,1139,1.537,1158,3.793,1198,1.658,1223,2.985,1237,1.822,1238,3.793,1253,1.658,1341,1.822,1388,1.658,1390,4.386,1435,1.537,1454,1.537,1462,3.453,1463,1.822,1519,1.537,1589,2.985,1664,1.658,1677,3.793,1683,1.658,1684,1.537,1791,1.822,1795,1.822,1797,3.793,1798,2.985,1801,1.822,1803,1.822,1807,6.007,1816,1.822,1852,1.822,1909,2.069,1910,1.822,1911,2.985,1912,2.069,1913,3.391,1914,3.391,1915,2.985,1916,4.983,1917,2.069,1918,1.822,1919,1.822,1920,2.069,1921,2.069,1922,2.069,1923,2.069,1924,2.069,1925,2.069,1926,2.069,1927,2.069,1928,3.391,1929,2.069,1930,2.069,1931,2.069,1932,2.069,1933,3.391,1934,2.069,1935,3.391,1936,2.069,1937,2.069,1938,1.822,1939,2.069,1940,2.069,1941,2.069,1942,2.069,1943,2.069,1944,2.069,1945,2.069,1946,2.069,1947,2.069,1948,4.309,1949,2.069,1950,2.069,1951,3.391,1952,2.069,1953,3.391,1954,3.391,1955,2.069,1956,2.069,1957,2.069,1958,2.069,1959,2.069,1960,1.822,1961,2.069,1962,1.822,1963,2.069,1964,2.069,1965,2.069,1966,4.309,1967,2.069,1968,2.069,1969,3.391,1970,1.822,1971,2.069,1972,2.069,1973,2.069,1974,2.069,1975,2.069,1976,2.069,1977,2.069,1978,2.069,1979,2.069,1980,2.069,1981,2.069,1982,3.391,1983,2.069,1984,2.069,1985,2.069,1986,2.069,1987,2.069,1988,2.069,1989,2.069,1990,2.069,1991,2.069,1992,2.069,1993,2.069,1994,3.391,1995,2.069,1996,3.391,1997,2.069,1998,2.069,1999,1.822,2000,2.069,2001,3.793,2002,2.069,2003,2.069,2004,2.069,2005,2.069,2006,2.069,2007,2.069,2008,3.391,2009,2.069,2010,2.069,2011,2.069,2012,2.069,2013,2.069,2014,2.069,2015,2.069,2016,2.069,2017,2.069,2018,2.069,2019,2.069,2020,1.822,2021,2.069,2022,2.069,2023,2.069,2024,3.391,2025,2.069,2026,2.069,2027,2.069,2028,2.069,2029,4.386,2030,3.391,2031,2.069,2032,2.069,2033,2.069,2034,2.069,2035,2.069,2036,2.069,2037,2.069,2038,2.069,2039,2.069,2040,2.069,2041,2.069,2042,5.499,2043,2.069,2044,2.069,2045,2.069,2046,2.069,2047,2.069,2048,2.069,2049,2.069,2050,1.822,2051,1.822,2052,1.822,2053,2.069,2054,2.069,2055,2.069,2056,2.069,2057,1.822,2058,2.069,2059,1.822,2060,2.069,2061,2.069,2062,2.069,2063,2.069,2064,2.069,2065,6.51,2066,3.391,2067,2.069,2068,3.391,2069,4.983,2070,2.069,2071,4.309,2072,4.309,2073,2.069,2074,3.391,2075,3.391,2076,2.069,2077,2.069,2078,2.069,2079,2.069,2080,2.069,2081,5.906,2082,3.391,2083,2.069,2084,3.391,2085,2.069,2086,2.069,2087,2.069,2088,3.793,2089,2.069,2090,2.069,2091,2.069,2092,2.069,2093,2.069,2094,2.069,2095,3.391,2096,3.391,2097,2.069,2098,2.069,2099,2.069,2100,2.718,2101,2.069,2102,2.069,2103,2.069,2104,3.391,2105,2.069,2106,2.069,2107,2.069,2108,2.069,2109,2.069,2110,1.822,2111,2.069,2112,2.069,2113,2.069,2114,2.069,2115,2.069,2116,2.069,2117,2.069,2118,2.069,2119,2.069,2120,2.069,2121,2.069,2122,2.069,2123,2.069,2124,2.069,2125,3.391,2126,3.391,2127,2.069,2128,2.069,2129,1.822,2130,2.069,2131,2.069,2132,2.069,2133,2.069,2134,2.069,2135,2.069,2136,2.069,2137,2.069,2138,3.391,2139,3.391,2140,2.069,2141,2.069,2142,2.069,2143,3.391,2144,2.069,2145,2.069,2146,3.391,2147,2.069,2148,2.069,2149,2.069,2150,2.069,2151,2.069,2152,2.069,2153,2.069,2154,3.391,2155,3.391,2156,3.391,2157,3.391,2158,2.069,2159,2.069,2160,2.069,2161,2.069,2162,2.069,2163,2.518,2164,2.069,2165,2.069,2166,1.822,2167,2.069,2168,1.822]],["title/license.html",[1907,3.177,1908,3.177,2163,2.68]],["body/license.html",[8,0.007,9,0.007,10,0.007,42,3.13,67,2.654,209,2.869,779,2.993,884,5.015,1003,4.643,1466,4.643,1684,3.916,1918,4.643,2100,4.227,2163,3.916,2166,6.559,2168,4.643,2169,4.643,2170,4.643,2171,4.227,2172,4.227,2173,6.754,2174,5.274,2175,5.274,2176,5.274,2177,5.274,2178,5.274,2179,5.274,2180,6.754,2181,8.639,2182,5.274,2183,5.274,2184,7.451,2185,5.274,2186,6.754,2187,5.274,2188,5.274,2189,5.274,2190,5.274,2191,5.274,2192,5.274,2193,5.274,2194,5.274,2195,5.274,2196,6.754,2197,5.274,2198,5.274,2199,5.274,2200,5.274,2201,5.274,2202,5.274,2203,5.274,2204,6.754,2205,6.754,2206,5.274,2207,5.274,2208,5.274,2209,5.274,2210,5.274,2211,5.274,2212,5.274,2213,5.274,2214,5.274,2215,5.274,2216,5.274,2217,5.274,2218,5.274,2219,5.274,2220,5.274,2221,5.274,2222,5.274,2223,5.274,2224,5.274,2225,5.274,2226,5.274,2227,5.274,2228,5.274,2229,5.274,2230,5.274,2231,5.274]],["title/modules.html",[58,2.777]],["body/modules.html",[8,0.008,9,0.008,10,0.008,57,4.169,58,2.808,63,3.558,257,4.451,261,3.935,262,4.169,263,4.169,264,4.169,265,4.169,266,4.169,267,3.402,2001,7.775,2020,5.277,2232,8.833,2233,8.833,2234,8.885,2235,5.994]],["title/overview.html",[2236,5.219]],["body/overview.html",[2,0.625,8,0.01,9,0.006,10,0.006,13,1.723,57,5.499,58,1.902,59,2.75,60,3.574,61,3.574,62,3.574,63,5.061,64,4.543,65,3.084,66,2.209,67,2.043,77,1.527,81,4.132,157,4.924,242,2.304,250,4.287,257,6.579,258,3.574,259,3.574,260,3.574,261,5.555,262,5.699,263,5.172,264,4.543,265,5.172,266,5.699,267,4.709,372,4.543,432,4.287,459,3.574,461,3.574,462,4.543,651,4.287,677,3.574,679,3.574,742,3.254,926,2.529,935,4.287,939,2.824,960,3.574,961,3.574,1094,4.287,1144,3.574,1145,3.574,1161,3.015,1278,4.287,1316,3.574,1318,3.574,1371,3.574,1372,3.574,1373,3.574,1482,3.254,1542,3.574,1619,3.574,1621,3.574,1622,3.574,2236,3.574,2237,4.06]],["title/classes/passwordValidator.html",[0,0.261,750,3.013]],["body/classes/passwordValidator.html",[0,0.408,2,0.811,3,0.141,4,0.128,5,0.115,7,0.141,8,0.01,9,0.007,10,0.007,16,0.167,38,0.552,82,0.638,84,1.157,85,0.939,86,1.068,91,0.665,92,1.538,93,1.873,101,1.284,110,1.499,165,1.791,183,2.694,210,1.927,334,3.285,374,3.53,427,2.993,558,2.869,574,1.927,589,2.869,750,4.698,993,3.53,1754,4.227,1864,5.182,1865,4.698,1866,4.698,1867,5.875,1869,5.779,1870,5.015,1872,4.698,1874,3.916,1875,3.916,1876,3.668,2238,5.274,2239,5.274,2240,4.643,2241,4.643,2242,4.643,2243,4.643]],["title/classes/phoneNumberValidator.html",[0,0.261,1459,3.217]],["body/classes/phoneNumberValidator.html",[0,0.408,2,0.811,3,0.141,4,0.128,5,0.115,7,0.141,8,0.01,9,0.007,10,0.007,16,0.167,38,0.552,82,0.638,84,1.157,85,0.939,86,1.068,91,0.665,92,1.538,93,1.873,101,1.284,110,1.499,165,1.791,183,2.694,210,1.927,334,3.285,374,3.53,522,2.869,558,2.869,563,2.757,574,1.927,589,2.869,993,3.53,1407,4.227,1459,5.015,1755,4.227,1864,5.182,1865,4.698,1866,4.698,1867,5.875,1869,5.779,1870,5.015,1872,4.698,1874,3.916,1875,3.916,1876,3.668,2244,5.274,2245,5.274,2246,4.643,2247,4.643]],["title/properties.html",[554,1.752,1778,3.177]],["body/properties.html",[8,0.01,9,0.008,10,0.008,34,1.981,209,3.384,238,5.205,254,5.476,314,5.96,554,2.091,850,2.914,1350,5.476,1807,4.986,1910,5.476,1911,5.476,1960,5.476,1962,5.476,2059,5.476,2088,5.476,2100,4.986,2129,5.476,2163,4.619,2169,5.476,2170,5.476,2171,4.986,2172,4.986,2248,6.221,2249,6.221,2250,6.221,2251,7.483,2252,6.221]],["title/miscellaneous/typealiases.html",[1819,2.142,2253,5.214]],["body/miscellaneous/typealiases.html",[8,0.009,9,0.009,10,0.009,38,0.557,91,0.86,1767,6.333,1768,5.468,1819,4.049,1883,6.006,1895,6.956,2254,6.823]],["title/classes/usenameValidator.html",[0,0.261,751,3.013]],["body/classes/usenameValidator.html",[0,0.41,2,0.818,3,0.142,4,0.129,5,0.116,7,0.142,8,0.01,9,0.007,10,0.007,16,0.168,38,0.555,82,0.641,84,1.163,85,0.942,86,1.073,91,0.67,92,1.546,93,1.889,101,1.287,110,1.507,165,1.801,183,2.708,210,1.943,334,3.311,374,3.548,519,3.311,558,2.892,574,1.943,589,2.892,751,4.722,993,3.548,1756,4.261,1864,5.202,1865,4.722,1866,4.722,1867,5.886,1869,5.791,1870,5.041,1872,4.722,1873,4.261,1874,3.948,1875,3.948,1876,3.698,2255,5.317,2256,5.317]],["title/miscellaneous/variables.html",[1819,2.142,2257,4.59]],["body/miscellaneous/variables.html",[8,0.01,9,0.004,10,0.004,30,1.246,31,2.449,34,1.05,38,0.696,46,1.108,85,0.252,91,0.252,101,1.356,105,1.277,116,1.724,165,1.295,210,2.347,228,2.21,238,2.294,242,1.135,243,2.937,302,1.785,314,3.124,334,4,347,1.957,349,1.957,362,1.603,363,1.603,376,1.391,378,1.485,387,1.391,434,2.643,435,2.449,498,2.449,499,2.643,511,2.643,522,1.088,563,2.199,585,1.391,589,1.088,624,3.04,815,0.906,850,0.937,890,1.485,893,2.294,922,1.313,926,1.246,986,1.485,992,1.761,998,1.485,1010,6.492,1011,5.438,1018,1.761,1019,2.903,1077,1.761,1126,2.903,1383,1.603,1385,2.643,1402,1.603,1489,2.903,1490,1.761,1684,2.449,1689,1.761,1691,2.903,1693,2.903,1696,1.761,1697,2.903,1698,1.761,1699,7.432,1700,3.704,1701,3.704,1702,2.903,1703,2.903,1704,2.903,1705,2.903,1706,2.903,1707,2.903,1708,2.903,1709,2.903,1710,2.903,1711,2.903,1712,3.704,1713,3.704,1714,3.704,1715,3.704,1716,2.903,1717,2.903,1718,2.903,1719,3.704,1720,3.704,1721,2.903,1722,3.704,1723,3.704,1724,3.704,1725,2.903,1726,2.903,1727,2.903,1728,2.903,1729,2.903,1730,3.704,1731,3.704,1733,1.761,1734,2.903,1735,1.761,1736,3.704,1737,1.603,1738,2.903,1745,1.761,1750,1.603,1751,1.603,1753,2.643,1754,1.603,1755,1.603,1756,1.603,1760,2.903,1761,2.903,1762,2.903,1763,1.761,1819,1.187,1873,2.643,1882,1.761,1903,1.761,1915,2.903,1919,1.761,1938,1.761,1970,2.903,1999,2.903,2029,1.761,2050,1.761,2051,1.761,2052,1.761,2057,2.903,2110,1.761,2171,1.603,2172,1.603,2240,1.761,2241,1.761,2242,1.761,2243,1.761,2246,1.761,2247,1.761,2257,1.761,2258,8.417,2259,4.208,2260,3.298,2261,2,2262,3.298,2263,2,2264,2,2265,2,2266,2,2267,2,2268,2,2269,2,2270,2,2271,2,2272,2,2273,2,2274,2,2275,2,2276,2,2277,2,2278,2,2279,2,2280,2,2281,2,2282,2,2283,2,2284,2,2285,2,2286,2,2287,2,2288,2,2289,2,2290,2,2291,2,2292,2,2293,2,2294,4.881,2295,2,2296,2,2297,2,2298,2,2299,2,2300,2,2301,2,2302,2,2303,2,2304,3.298,2305,2,2306,2,2307,2,2308,3.298,2309,2,2310,2,2311,2,2312,2,2313,2,2314,2,2315,2,2316,2,2317,2,2318,2,2319,2,2320,2,2321,2,2322,2,2323,2,2324,2,2325,2,2326,2,2327,2,2328,2,2329,2,2330,2,2331,2,2332,2,2333,2,2334,2,2335,2,2336,2,2337,2]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":1809,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1794,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1793,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1805,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1692,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1764,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1773,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1770,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1771,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1772,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1687,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1688,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1765,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1732,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1758,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1757,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1742,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1759,"title":{},"body":{"coverage.html":{}}}],["02t05:01:03.938z",{"_index":1470,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["02t05:01:03.938z'})@type(undefined)@isdate",{"_index":1428,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["07",{"_index":1427,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["09999999999",{"_index":1468,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["09999999999'})@isstring()@validate(phonenumbervalidator",{"_index":1451,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["1",{"_index":242,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileController.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.18.0",{"_index":1817,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1799,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2249,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":1796,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":926,"title":{},"body":{"controllers/FileController.html":{},"injectables/ParseIntPipe.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1412,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["120",{"_index":734,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["120)@minlength(2",{"_index":729,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["123",{"_index":784,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserProfileDto.html":{}}}],["150",{"_index":1423,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["17.0.3",{"_index":1780,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1415,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["19",{"_index":1471,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["1970",{"_index":2303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@min(17",{"_index":1414,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["1})@isnumber()@min(0)@max(2",{"_index":1442,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["2",{"_index":1161,"title":{},"body":{"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"overview.html":{}}}],["2.2.0",{"_index":1784,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":1800,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":742,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"overview.html":{}}}],["20)@minlength(2",{"_index":740,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["200",{"_index":240,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":1426,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["2022",{"_index":2168,"title":{},"body":{"index.html":{},"license.html":{}}}],["21",{"_index":1553,"title":{},"body":{"classes/UserEntity.html":{}}}],["21)@minlength(7",{"_index":1541,"title":{},"body":{"classes/UserEntity.html":{}}}],["3",{"_index":731,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["3.0.0",{"_index":1786,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1811,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":1790,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1806,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":1788,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":1813,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":247,"title":{},"body":{"controllers/AppController.html":{}}}],["45",{"_index":1437,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1434,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["456",{"_index":785,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["5.0.1",{"_index":1792,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1695,"title":{},"body":{"coverage.html":{}}}],["54",{"_index":2237,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":1802,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1787,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":1815,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1812,"title":{},"body":{"dependencies.html":{}}}],["789",{"_index":795,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["789'})@isstring()@isnotempty",{"_index":786,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["8",{"_index":1542,"title":{},"body":{"classes/UserEntity.html":{},"overview.html":{}}}],["8.0.1",{"_index":1804,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1818,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1694,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1783,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":1785,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2247,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2246,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../documentation",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["_not_verified",{"_index":2272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ab*cd",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1421,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["abc'})@isstring()@length(3",{"_index":1433,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["above",{"_index":2203,"title":{},"body":{"license.html":{}}}],["acceptable",{"_index":824,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["access",{"_index":362,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"classes/ProfileEntity.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["account'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{}}}],["account'})@isstring()@maxlength(151",{"_index":1422,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["action",{"_index":2225,"title":{},"body":{"license.html":{}}}],["add",{"_index":1237,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["addbasicauth",{"_index":2327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":2321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1224,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(@body",{"_index":1308,"title":{},"body":{"controllers/PostsController.html":{}}}],["addcomment(dto",{"_index":1235,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["additional",{"_index":999,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["address",{"_index":1399,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin.controller",{"_index":73,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":72,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin01",{"_index":761,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admin02",{"_index":762,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admincontroller",{"_index":12,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":57,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":577,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["adminservice",{"_index":64,"title":{"injectables/AdminService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adminuserscontroller",{"_index":70,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["advancing",{"_index":1937,"title":{},"body":{"index.html":{}}}],["age",{"_index":1400,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["agedate",{"_index":2300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alcohol",{"_index":1857,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["alcoholenum",{"_index":1821,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":2254,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":906,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":911,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":181,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allexceptionsfilter.handleresponse(request",{"_index":216,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"controllers/UsersController.html":{}}}],["already",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["amazing",{"_index":2105,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":2035,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2194,"title":{},"body":{"license.html":{}}}],["api",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2252,"title":{},"body":{"properties.html":{}}}],["api:latest",{"_index":2090,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":2330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":1909,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":771,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimethodnotallowedresponse",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apinotacceptableresponse",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":147,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":148,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":582,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({example",{"_index":1425,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["apiproperty({required",{"_index":588,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apiproperty({type",{"_index":721,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["apipropertyoptional",{"_index":744,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["apirequesttimeoutresponse",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":249,"title":{},"body":{"controllers/AppController.html":{},"controllers/ConversationsController.html":{}}}],["apiresponse({status",{"_index":246,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":1975,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["apitags('auth",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":654,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":940,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('home",{"_index":253,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('posts",{"_index":1281,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1605,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":1385,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1397,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.service",{"_index":251,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":1021,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":234,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1911,"title":{},"body":{"index.html":{},"properties.html":{}}}],["applications",{"_index":1959,"title":{},"body":{"index.html":{}}}],["apply",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":1628,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":257,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1847,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps",{"_index":2003,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":250,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":2157,"title":{},"body":{"index.html":{}}}],["args",{"_index":1869,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1201,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":197,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2229,"title":{},"body":{"license.html":{}}}],["array",{"_index":922,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":932,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":950,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":1887,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":1448,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["associated",{"_index":2182,"title":{},"body":{"license.html":{}}}],["async",{"_index":93,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["atguard",{"_index":279,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":372,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["auth.controller",{"_index":465,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/decorators",{"_index":149,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["authcontroller",{"_index":394,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":1992,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":350,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authguard('jwt",{"_index":353,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authmodule",{"_index":261,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1350,"title":{},"body":{"injectables/PostsService.html":{},"properties.html":{}}}],["authorid",{"_index":780,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authors",{"_index":2218,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":432,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1964,"title":{},"body":{"index.html":{}}}],["available",{"_index":2235,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":132,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["avatar.dto.ts",{"_index":1528,"title":{},"body":{"classes/UserAvatarDto.html":{},"coverage.html":{}}}],["await",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/MessagesGateway.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["awesome",{"_index":2058,"title":{},"body":{"index.html":{}}}],["b",{"_index":1409,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["backend",{"_index":1932,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2106,"title":{},"body":{"index.html":{}}}],["badgatewayexception",{"_index":806,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["badrequestexception",{"_index":807,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1207,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1361,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":2056,"title":{},"body":{"index.html":{}}}],["based",{"_index":1017,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["bcrypt",{"_index":1791,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":2291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":2292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":2145,"title":{},"body":{"index.html":{}}}],["bee",{"_index":2115,"title":{},"body":{"index.html":{}}}],["begin",{"_index":736,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["begining",{"_index":2132,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":2147,"title":{},"body":{"index.html":{}}}],["better",{"_index":2159,"title":{},"body":{"index.html":{}}}],["bio",{"_index":1401,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["birthdate",{"_index":1402,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["bodies",{"_index":2007,"title":{},"body":{"index.html":{}}}],["body",{"_index":140,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":848,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["boolean",{"_index":993,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"classes/MessagesGateway.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["bootstrap",{"_index":1775,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2234,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2232,"title":{},"body":{"modules.html":{}}}],["buddhism",{"_index":1849,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["build",{"_index":2050,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":1963,"title":{},"body":{"index.html":{}}}],["building",{"_index":1955,"title":{},"body":{"index.html":{}}}],["built",{"_index":2038,"title":{},"body":{"index.html":{}}}],["bwrzn7qrlxw",{"_index":852,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["bằng",{"_index":361,"title":{},"body":{"injectables/AtGuard.html":{}}}],["c",{"_index":1466,"title":{},"body":{"classes/ProfileEntity.html":{},"license.html":{}}}],["c'})@isstring()@maxlength(101",{"_index":1411,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["call",{"_index":2021,"title":{},"body":{"index.html":{}}}],["callback",{"_index":2293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callhandler",{"_index":869,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["can_not_block_when_is",{"_index":2271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can_not_create_user_hobby",{"_index":2273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can_not_delete_hobby",{"_index":2274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can_not_find_image",{"_index":2275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can_not_get_user_album",{"_index":2276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can_not_get_user_hobbies",{"_index":2277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can_not_get_user_images",{"_index":2278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can_not_save_user_image",{"_index":2279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can_not_save_user_image_in_cloud",{"_index":2280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["can_not_update_user_profile",{"_index":2281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["canactivate",{"_index":343,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":346,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canceled",{"_index":1848,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["card",{"_index":2155,"title":{},"body":{"index.html":{}}}],["catch",{"_index":185,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":194,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":983,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":873,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["catcherror((err",{"_index":878,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["categories",{"_index":1339,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1341,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["change",{"_index":648,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["character",{"_index":1548,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters",{"_index":755,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["characters!'})@maxlength(121",{"_index":732,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["characters!'})@maxlength(21",{"_index":741,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(46",{"_index":1436,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1438,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":1543,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":735,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["charge",{"_index":2177,"title":{},"body":{"license.html":{}}}],["chat",{"_index":2061,"title":{},"body":{"index.html":{}}}],["chats",{"_index":1947,"title":{},"body":{"index.html":{}}}],["check_phone_get_otp",{"_index":1700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["checkexist",{"_index":1357,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1360,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1365,"title":{},"body":{"injectables/PostsService.html":{}}}],["children",{"_index":1856,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cho",{"_index":357,"title":{},"body":{"injectables/AtGuard.html":{}}}],["city",{"_index":1408,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["claim",{"_index":2221,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":2046,"title":{},"body":{"index.html":{}}}],["client",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"classes/MessagesGateway.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1137,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.id",{"_index":1130,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["clientid",{"_index":1150,"title":{},"body":{"injectables/MessagesService.html":{}}}],["cluster_adminmodule",{"_index":60,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":61,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":62,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":459,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":460,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":461,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":677,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":678,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":679,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":960,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":961,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1144,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1145,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1316,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1317,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1318,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1371,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1373,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1372,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1619,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1621,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1620,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1622,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":241,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["college",{"_index":1841,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comment",{"_index":1238,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["comment.dto.ts",{"_index":715,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":552,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1253,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["commitlint",{"_index":2044,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":1779,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":1781,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":2160,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepassword(dto.password",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{}}}],["compatible",{"_index":1991,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":2028,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2092,"title":{},"body":{"index.html":{}}}],["compress",{"_index":2006,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1795,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computer",{"_index":2156,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2202,"title":{},"body":{"license.html":{}}}],["config",{"_index":378,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('access_token_secret",{"_index":393,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["config.get('refresh_token_secret",{"_index":1501,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["configmodule",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":376,"title":{},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"jwt_expiration_time",{"_index":476,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"jwt_secret",{"_index":473,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":269,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["conflictexception",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["conflictexception('user",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1914,"title":{},"body":{"index.html":{}}}],["connectedsocket",{"_index":1121,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["connection",{"_index":2230,"title":{},"body":{"license.html":{}}}],["console.log('before",{"_index":1073,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":1074,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":1079,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":1029,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":1030,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(postid",{"_index":1305,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["const",{"_index":210,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"injectables/AdminService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/MessagesGateway.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@logger('appservice",{"_index":340,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(config",{"_index":375,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":481,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(error",{"_index":803,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["constructor(logger",{"_index":190,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(messagesservice",{"_index":1093,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["constructor(prismaservice",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":88,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":344,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":1544,"title":{},"body":{"classes/UserEntity.html":{}}}],["container",{"_index":2091,"title":{},"body":{"index.html":{}}}],["content",{"_index":2025,"title":{},"body":{"index.html":{}}}],["context",{"_index":349,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":370,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":1075,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":369,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":1027,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":1028,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1489,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["continuous",{"_index":2039,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2226,"title":{},"body":{"license.html":{}}}],["controller",{"_index":11,"title":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":55,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":656,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":941,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('posts",{"_index":1282,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":1606,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":1018,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":1012,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":1782,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":2030,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":611,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"index.html":{}}}],["conversation.dto",{"_index":789,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":720,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:11",{"_index":977,"title":{},"body":{"classes/GetAllConversationDto.html":{}}}],["conversation.dto.ts:14",{"_index":1515,"title":{},"body":{"classes/UpdateMembersConversationDto.html":{}}}],["conversation.dto.ts:20",{"_index":791,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:27",{"_index":792,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:32",{"_index":743,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:33",{"_index":1525,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:34",{"_index":1524,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:35",{"_index":1526,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:52",{"_index":737,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:59",{"_index":738,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:6",{"_index":1514,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:66",{"_index":724,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":1513,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:73",{"_index":726,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":1512,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversationentity",{"_index":575,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"coverage.html":{}}}],["conversationid",{"_index":626,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{}}}],["conversationid).members",{"_index":1169,"title":{},"body":{"injectables/MessagesService.html":{}}}],["conversations",{"_index":599,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/MessagesService.html":{},"index.html":{}}}],["conversations.controller",{"_index":681,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":652,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":597,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":262,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":651,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":1797,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":1994,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2196,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2180,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2166,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/interceptors/interceptor.module",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":338,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":294,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":339,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":288,"title":{},"body":{"modules/AppModule.html":{}}}],["core/roles",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["correct",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["cors",{"_index":1125,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":1691,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1410,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["course",{"_index":2137,"title":{},"body":{"index.html":{}}}],["cover",{"_index":138,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["cover.dto.ts",{"_index":1529,"title":{},"body":{"classes/UserCoverDto.html":{},"coverage.html":{}}}],["coverage",{"_index":1683,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["createat",{"_index":1340,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":713,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":600,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":659,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":608,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":609,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{}}}],["createdat",{"_index":578,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":1740,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":1889,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":1035,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1087,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(conversationid",{"_index":1097,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":764,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.text",{"_index":1173,"title":{},"body":{"injectables/MessagesService.html":{}}}],["createparamdecorator",{"_index":2304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1225,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":1283,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(dto",{"_index":1240,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":772,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["creator",{"_index":579,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["creator01",{"_index":763,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["creator01'})@isstring",{"_index":725,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["criteria",{"_index":1990,"title":{},"body":{"index.html":{}}}],["crud",{"_index":2051,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":211,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":213,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":214,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":624,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":1734,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":1013,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":2335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customeimage",{"_index":1904,"title":{},"body":{"classes/imageValidator.html":{}}}],["customtext",{"_index":1874,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["cập",{"_index":360,"title":{},"body":{"injectables/AtGuard.html":{}}}],["damages",{"_index":2222,"title":{},"body":{"license.html":{}}}],["data",{"_index":243,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["data_deleted",{"_index":1701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":1916,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1389,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":585,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":229,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":2299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":2301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":1077,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1390,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":2183,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2231,"title":{},"body":{"license.html":{}}}],["debug",{"_index":1041,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":1046,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":1980,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":1982,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":102,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/MessagesGateway.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":988,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":1010,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1865,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":1866,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defined",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definition",{"_index":1972,"title":{},"body":{"index.html":{}}}],["delete",{"_index":104,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":668,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":618,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete('comments",{"_index":1313,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1246,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1297,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1249,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile",{"_index":1617,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile')@apibearerauth()@apioperation({summary",{"_index":1580,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('users/:userid",{"_index":178,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete('users/:userid')@apibearerauth()@apioperation({summary",{"_index":103,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deletecomment",{"_index":1226,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1314,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1245,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":781,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationbyid",{"_index":601,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":616,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":617,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleted",{"_index":1666,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteoneadminconversation",{"_index":602,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":621,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":622,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":796,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deletepost",{"_index":1227,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@body",{"_index":1298,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(dto",{"_index":1248,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuser",{"_index":1575,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1579,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":94,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":179,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deleteuserbyid(userid",{"_index":100,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":59,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":2019,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1449,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":1971,"title":{},"body":{"index.html":{}}}],["description",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":1989,"title":{},"body":{"index.html":{}}}],["design",{"_index":1974,"title":{},"body":{"index.html":{}}}],["dev",{"_index":2073,"title":{},"body":{"index.html":{}}}],["development",{"_index":2080,"title":{},"body":{"index.html":{}}}],["devices",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":1917,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["directly",{"_index":2022,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":2192,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2164,"title":{},"body":{"index.html":{}}}],["divorced",{"_index":1845,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["docker",{"_index":2088,"title":{},"body":{"index.html":{},"properties.html":{}}}],["document",{"_index":1915,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":1684,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":2309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doe",{"_index":1160,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto",{"_index":119,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":700,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1335,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":707,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.creator",{"_index":701,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":698,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.favouritorid",{"_index":1359,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1338,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1369,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.members",{"_index":699,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":697,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":1647,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":1662,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password.localecompare(user.password",{"_index":1660,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1352,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1364,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.text",{"_index":1367,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.title",{"_index":1337,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.userid",{"_index":703,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.username",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/comment",{"_index":1280,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/response",{"_index":388,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dynamicmodule",{"_index":1034,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":2122,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":2097,"title":{},"body":{"index.html":{}}}],["easily",{"_index":1929,"title":{},"body":{"index.html":{}}}],["education",{"_index":1861,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["educationenum",{"_index":1823,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":1956,"title":{},"body":{"index.html":{}}}],["element.id",{"_index":1168,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.foreach((item",{"_index":1179,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.splice(element.messages.indexof(item",{"_index":1187,"title":{},"body":{"injectables/MessagesService.html":{}}}],["email",{"_index":485,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["email'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1590,"title":{},"body":{"controllers/UsersController.html":{}}}],["enable",{"_index":1968,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1378,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1382,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":2126,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":2052,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["enhance",{"_index":2124,"title":{},"body":{"index.html":{}}}],["entities",{"_index":653,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["entities/comment.entity",{"_index":717,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["entities/profile.entity",{"_index":1191,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["entities/user.entity",{"_index":1083,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["enumerations",{"_index":1820,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.${process.env.node_env",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":2017,"title":{},"body":{"index.html":{}}}],["error",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"controllers/UsersController.html":{}}}],["error(message",{"_index":1048,"title":{},"body":{"injectables/LoggerService.html":{}}}],["error_can_not_block_when_is_not_verified",{"_index":1702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_can_not_create_user_hobby",{"_index":1703,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_can_not_delete_hobby",{"_index":1704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_can_not_find_image",{"_index":1705,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_can_not_get_user_album",{"_index":1706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_can_not_get_user_hobbies",{"_index":1707,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_can_not_get_user_images",{"_index":1708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_can_not_save_user_image",{"_index":1709,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_can_not_save_user_image_in_cloud",{"_index":1710,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_can_not_update_user_profile",{"_index":1711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_change_user_avatar",{"_index":1712,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_data_existed_please_using_update",{"_index":1713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_data_not_found",{"_index":1714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_email_conflict",{"_index":1715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_exceed_max_favorite_image",{"_index":1716,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_hobby_name_already_existed",{"_index":1717,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_hobby_not_found",{"_index":1718,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_in_delete_image_cloud",{"_index":1719,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_internal_server",{"_index":1720,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_missing_field",{"_index":1721,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_unknown",{"_index":1722,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_user_existed",{"_index":1723,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_user_not_exist",{"_index":1724,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_user_not_found",{"_index":1725,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_user_not_match_with_hobby",{"_index":1726,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_user_not_match_with_image",{"_index":1727,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_wrong_username_or_password",{"_index":1728,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["error_your_album_is_full",{"_index":1729,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["erroracceptableexception",{"_index":800,"title":{"classes/ErrorAcceptableException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorbadgatewayexception",{"_index":838,"title":{"classes/ErrorBadGatewayException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorbadrequestexception",{"_index":822,"title":{"classes/ErrorBadRequestException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorforbiddenexception",{"_index":820,"title":{"classes/ErrorForbiddenException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorgatewaytimeoutexception",{"_index":839,"title":{"classes/ErrorGatewayTimeoutException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorinternalserverexception",{"_index":830,"title":{"classes/ErrorInternalServerException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errormethodnotallowedexception",{"_index":832,"title":{"classes/ErrorMethodNotAllowedException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errornotfoundexception",{"_index":816,"title":{"classes/ErrorNotFoundException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorrequesttimeoutexception",{"_index":825,"title":{"classes/ErrorRequestTimeoutException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errors",{"_index":1679,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":1681,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorserviceunavailableexception",{"_index":834,"title":{"classes/ErrorServiceUnavailableException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorsintereptor",{"_index":864,"title":{"injectables/ErrorsIntereptor.html":{}},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["errorunauthorizedexception",{"_index":818,"title":{"classes/ErrorUnauthorizedException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorunsupportedmediatypeexception",{"_index":827,"title":{"classes/ErrorUnsupportedMediaTypeException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["eslint",{"_index":2034,"title":{},"body":{"index.html":{}}}],["eval",{"_index":2009,"title":{},"body":{"index.html":{}}}],["event",{"_index":2217,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":1922,"title":{},"body":{"index.html":{}}}],["example",{"_index":722,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"index.html":{}}}],["example@gmail.com",{"_index":1533,"title":{},"body":{"classes/UserEntity.html":{}}}],["exceed_max_favorite_image",{"_index":2282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exception",{"_index":199,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":225,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":226,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":230,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":220,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":184,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["executes",{"_index":2014,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":347,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["existed",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["existedusermiddleware",{"_index":881,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["exists",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["experiences",{"_index":1926,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":475,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":1039,"title":{},"body":{"classes/LoggerModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":209,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":903,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":1996,"title":{},"body":{"index.html":{}}}],["extends",{"_index":352,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["extra",{"_index":1000,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extractjwt",{"_index":384,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":391,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":989,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["facebook",{"_index":1854,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["failed",{"_index":1208,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":589,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favouritorid",{"_index":1210,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":1940,"title":{},"body":{"index.html":{}}}],["feels",{"_index":1924,"title":{},"body":{"index.html":{}}}],["femail",{"_index":1843,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["female",{"_index":1441,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["field",{"_index":1944,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":1767,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":1888,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":972,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":970,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":974,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":896,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":971,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":779,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{}}}],["files.controller",{"_index":963,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":975,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":936,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":942,"title":{},"body":{"controllers/FileController.html":{}}}],["filesmodule",{"_index":263,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":935,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":1876,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["filters",{"_index":851,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["find",{"_index":1589,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["find((element",{"_index":1175,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findallmessages",{"_index":1088,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["findallmessages(@messagebody('conversationid",{"_index":1131,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["findallmessages(conversationid",{"_index":1101,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["finduser",{"_index":1334,"title":{},"body":{"injectables/PostsService.html":{}}}],["fitness",{"_index":2214,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2054,"title":{},"body":{"index.html":{}}}],["flip",{"_index":2154,"title":{},"body":{"index.html":{}}}],["fo",{"_index":2152,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2116,"title":{},"body":{"index.html":{}}}],["following",{"_index":2201,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["forbiddenexception",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception('access",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception('you",{"_index":1349,"title":{},"body":{"injectables/PostsService.html":{}}}],["form",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["format",{"_index":1973,"title":{},"body":{"index.html":{}}}],["formattedmessage",{"_index":1063,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":2033,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":1032,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1954,"title":{},"body":{"index.html":{}}}],["free",{"_index":2176,"title":{},"body":{"license.html":{}}}],["front",{"_index":2125,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1913,"title":{},"body":{"index.html":{}}}],["full",{"_index":1435,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1403,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1458,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":998,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1877,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2199,"title":{},"body":{"license.html":{}}}],["game",{"_index":2143,"title":{},"body":{"index.html":{}}}],["gateway",{"_index":837,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["gatewaytimeoutexception",{"_index":808,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["gender",{"_index":1404,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["genderenum",{"_index":1824,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["generate",{"_index":1015,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["generated",{"_index":1965,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":663,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":634,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1291,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1262,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1303,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all",{"_index":1288,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1259,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('find/:email",{"_index":1611,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile/:useridorusername",{"_index":1608,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('users/:userid",{"_index":167,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get('users/all",{"_index":160,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":1592,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":629,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1228,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(@param('postid",{"_index":1304,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallcomments(postid",{"_index":1251,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":628,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversationdto:11",{"_index":788,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["getallconversations",{"_index":603,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@body",{"_index":661,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(dto",{"_index":627,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallpostofuserdto",{"_index":978,"title":{"classes/GetAllPostOfUserDto.html":{}},"body":{"classes/GetAllPostOfUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getallpostsofuser",{"_index":1229,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(@body",{"_index":1286,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallpostsofuser(dto",{"_index":1255,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1230,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(@param('userid",{"_index":1289,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallpublicposts(userid",{"_index":1258,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallusers",{"_index":95,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":164,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["getallusers(dto",{"_index":112,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getconversationbyid",{"_index":604,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":632,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":236,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember",{"_index":1149,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmember(conversationid",{"_index":1153,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getoneconversationdto",{"_index":633,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1231,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(@param('postid",{"_index":1292,"title":{},"body":{"controllers/PostsController.html":{}}}],["getonepostbyid(postid",{"_index":1261,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpublicuserbyidorusername",{"_index":1576,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getpublicuserbyidorusername(useridorusername",{"_index":1583,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":1907,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":479,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":484,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyemail",{"_index":1577,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1587,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile",{"_index":96,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile(userid",{"_index":120,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["gitbox",{"_index":2131,"title":{},"body":{"index.html":{}}}],["github",{"_index":2129,"title":{},"body":{"index.html":{},"properties.html":{}}}],["global",{"_index":1006,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["god",{"_index":1850,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["goneexception",{"_index":841,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["google",{"_index":1855,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["granted",{"_index":2175,"title":{},"body":{"license.html":{}}}],["graph",{"_index":2020,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group01",{"_index":727,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["group01'})@isstring()@isnotempty()@length(3",{"_index":739,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["grow",{"_index":2102,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1482,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":876,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessage",{"_index":187,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessage(exception",{"_index":201,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse",{"_index":189,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse(request",{"_index":203,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hash",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1491,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":1999,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":2005,"title":{},"body":{"index.html":{}}}],["height",{"_index":1858,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":244,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["helmet",{"_index":1801,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helmetmiddleware",{"_index":1744,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["helmetmiddleware(app",{"_index":1892,"title":{},"body":{"miscellaneous/functions.html":{}}}],["help",{"_index":1978,"title":{},"body":{"index.html":{}}}],["here",{"_index":2110,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["hereby",{"_index":2174,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":2060,"title":{},"body":{"index.html":{}}}],["high_school",{"_index":1840,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hobby_already_existed",{"_index":2283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hobby_not_found",{"_index":2284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["holders",{"_index":2219,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":254,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":239,"title":{},"body":{"controllers/AppController.html":{}}}],["host",{"_index":196,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":208,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":212,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":815,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpargumentshost",{"_index":206,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcode",{"_index":141,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":163,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":195,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorsIntereptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception('new",{"_index":879,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpexceptionfilter",{"_index":980,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":469,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2251,"title":{},"body":{"properties.html":{}}}],["https://github.dev/narhakobyan/awesome",{"_index":846,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["https://viblo.asia/p/framework",{"_index":849,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":657,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":142,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":880,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpstatus.internal_server_error",{"_index":224,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["husky",{"_index":1803,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iallusers",{"_index":151,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["iarrayfile",{"_index":937,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["id",{"_index":168,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["id'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":106,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["id.decorator.ts",{"_index":1761,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":2113,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1685,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1353,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identify.length",{"_index":1652,"title":{},"body":{"injectables/UsersService.html":{}}}],["identify[0",{"_index":1653,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifinduserbyemail",{"_index":1604,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["igetuserprofile",{"_index":152,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignore",{"_index":1005,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreglobalprefix",{"_index":990,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ijwtpayload",{"_index":380,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":174,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":133,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["image.match(parttern",{"_index":1906,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":924,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":1752,"title":{"classes/imageValidator.html":{}},"body":{"coverage.html":{},"classes/imageValidator.html":{}}}],["imateapotexception",{"_index":845,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["impact",{"_index":2162,"title":{},"body":{"index.html":{}}}],["implements",{"_index":183,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implied",{"_index":2210,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["imported",{"_index":997,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":71,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":1934,"title":{},"body":{"index.html":{}}}],["include",{"_index":991,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":1003,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2186,"title":{},"body":{"license.html":{}}}],["index",{"_index":91,"title":{"index.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1383,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["information",{"_index":635,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["informations",{"_index":2130,"title":{},"body":{"index.html":{}}}],["infrastructure/admin/admin.module",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/auth.module",{"_index":278,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":252,"title":{},"body":{"controllers/AppController.html":{}}}],["infrastructure/auth/guards",{"_index":280,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":283,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/prisma/prisma.module",{"_index":281,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":787,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UserProfileDto.html":{}}}],["init",{"_index":2068,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":1697,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":477,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["inject(configservice",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":76,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputs",{"_index":655,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"index.html":{}}}],["inspect",{"_index":2018,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":1002,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":2114,"title":{},"body":{"index.html":{}}}],["install",{"_index":2066,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2064,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1986,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":218,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["int.pipe.ts",{"_index":1197,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1202,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":2079,"title":{},"body":{"index.html":{}}}],["integration",{"_index":2040,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":2016,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":866,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":867,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptormodule",{"_index":264,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1405,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["interface",{"_index":985,"title":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":939,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":52,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["internalservererrorexception",{"_index":809,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["invalid",{"_index":1452,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["ipublicuser",{"_index":153,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric",{"_index":745,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isarray",{"_index":569,"title":{},"body":{"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isarray()@isnotempty",{"_index":564,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{}}}],["isdate",{"_index":1455,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["isemail",{"_index":746,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isglobal",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":938,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isjson",{"_index":570,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ismatched",{"_index":1905,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1206,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":571,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1539,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isemail()@apiproperty({type",{"_index":1531,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isstring",{"_index":559,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":1535,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnumber",{"_index":1220,"title":{},"body":{"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isnumber()@isnotempty",{"_index":1217,"title":{},"body":{"classes/PostEntity.html":{}}}],["isobject",{"_index":572,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isoptional",{"_index":1456,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["ispublic",{"_index":367,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":573,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isstring()@isnotempty",{"_index":561,"title":{},"body":{"classes/CommentEntity.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/PostEntity.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":1431,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["istyping",{"_index":1111,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["iswaggeroptions",{"_index":986,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item.id",{"_index":1180,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item.text",{"_index":1182,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item1item2",{"_index":1949,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":953,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":955,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":956,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":957,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":958,"title":{},"body":{"controllers/FileController.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["iupdateavatar",{"_index":154,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatecover",{"_index":155,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["java",{"_index":2146,"title":{},"body":{"index.html":{}}}],["john",{"_index":1159,"title":{},"body":{"injectables/MessagesService.html":{}}}],["join",{"_index":1948,"title":{},"body":{"index.html":{}}}],["join(__dirname",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["joinconversation",{"_index":1089,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["joinconversation(conversationid",{"_index":1104,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["jpeg|jpg|gif|png",{"_index":1903,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["json.stringify(exception.getresponse",{"_index":219,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":387,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":390,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":467,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":470,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":482,"title":{},"body":{"injectables/AuthService.html":{}}}],["keywords",{"_index":2250,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2209,"title":{},"body":{"license.html":{}}}],["latest",{"_index":2118,"title":{},"body":{"index.html":{}}}],["league",{"_index":2151,"title":{},"body":{"index.html":{}}}],["learn",{"_index":2139,"title":{},"body":{"index.html":{}}}],["learning",{"_index":2135,"title":{},"body":{"index.html":{}}}],["legend",{"_index":2153,"title":{},"body":{"index.html":{}}}],["length",{"_index":747,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(3",{"_index":753,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(8",{"_index":1552,"title":{},"body":{"classes/UserEntity.html":{}}}],["letter",{"_index":1546,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":2223,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2220,"title":{},"body":{"license.html":{}}}],["library",{"_index":1977,"title":{},"body":{"index.html":{}}}],["license",{"_index":2163,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2101,"title":{},"body":{"index.html":{}}}],["life",{"_index":1930,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1193,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["limitation",{"_index":2187,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2211,"title":{},"body":{"license.html":{}}}],["linter",{"_index":2045,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":2043,"title":{},"body":{"index.html":{}}}],["list",{"_index":115,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["list.authorid",{"_index":1348,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":711,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list.writtenposts.find((post",{"_index":1354,"title":{},"body":{"injectables/PostsService.html":{}}}],["list['creator",{"_index":709,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter((admin",{"_index":712,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["load",{"_index":995,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":2078,"title":{},"body":{"index.html":{}}}],["log",{"_index":1042,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":1051,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":193,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger(prefix",{"_index":1893,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":1036,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":1037,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":287,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":1741,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":1891,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":293,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":191,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":1022,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":412,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuserid",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":733,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["looking",{"_index":2158,"title":{},"body":{"index.html":{}}}],["loop",{"_index":2011,"title":{},"body":{"index.html":{}}}],["lại",{"_index":366,"title":{},"body":{"injectables/AtGuard.html":{}}}],["main.ts",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":1928,"title":{},"body":{"index.html":{}}}],["male",{"_index":1440,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["many",{"_index":50,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["map",{"_index":1480,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marital_status",{"_index":1859,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maritalstatus",{"_index":1860,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maritalstatusenum",{"_index":1825,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["marriagestatus",{"_index":1406,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["married",{"_index":1844,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["master",{"_index":2138,"title":{},"body":{"index.html":{}}}],["match",{"_index":1664,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["match_you",{"_index":1730,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["matchemail",{"_index":1659,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":1661,"title":{},"body":{"injectables/UsersService.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":2302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1162,"title":{},"body":{"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["max(101",{"_index":1473,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(2",{"_index":1476,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxcount",{"_index":954,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":748,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(101",{"_index":1467,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(121",{"_index":758,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["maxlength(151",{"_index":1474,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(21",{"_index":756,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["maxlength(46",{"_index":1460,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["media",{"_index":829,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["meet",{"_index":1165,"title":{},"body":{"injectables/MessagesService.html":{}}}],["member",{"_index":649,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["members",{"_index":580,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["members[clientid",{"_index":1171,"title":{},"body":{"injectables/MessagesService.html":{}}}],["merchantability",{"_index":2213,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2190,"title":{},"body":{"license.html":{}}}],["message",{"_index":217,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["message.dto",{"_index":1520,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":766,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:5",{"_index":768,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":769,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:7",{"_index":770,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1517,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.ts",{"_index":1699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["message['conversationid",{"_index":1185,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message['messageid",{"_index":1186,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagebody",{"_index":1120,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1127,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1135,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1128,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messages",{"_index":1158,"title":{},"body":{"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1147,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.push(message",{"_index":1176,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages.service",{"_index":1123,"title":{},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":1085,"title":{"classes/MessagesGateway.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":265,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1094,"title":{"injectables/MessagesService.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":2128,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1200,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":1673,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"interfaces/ISwaggerOptions.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["methodkey",{"_index":1019,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methodnotallowedexception",{"_index":810,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["methods",{"_index":92,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["middleware",{"_index":329,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":2072,"title":{},"body":{"index.html":{}}}],["min",{"_index":1457,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["min(0",{"_index":1475,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["min(17",{"_index":1472,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["minlength",{"_index":749,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(2",{"_index":754,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(7",{"_index":1554,"title":{},"body":{"classes/UserEntity.html":{}}}],["miscellaneous",{"_index":1819,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing_field",{"_index":2285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mit",{"_index":2100,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":2084,"title":{},"body":{"index.html":{}}}],["models",{"_index":1001,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2189,"title":{},"body":{"license.html":{}}}],["module",{"_index":56,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":58,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2109,"title":{},"body":{"index.html":{}}}],["ms",{"_index":1899,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multer",{"_index":1997,"title":{},"body":{"index.html":{}}}],["multi",{"_index":916,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":934,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":1894,"title":{},"body":{"miscellaneous/functions.html":{}}}],["music",{"_index":1463,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["mustermann",{"_index":1163,"title":{},"body":{"injectables/MessagesService.html":{}}}],["name",{"_index":85,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":847,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"index.html":{}}}],["nestinterceptor",{"_index":872,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":850,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":207,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":468,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1518,"title":{},"body":{"classes/UpdateMessageDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":351,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":931,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":296,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1122,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":891,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":1920,"title":{},"body":{"index.html":{}}}],["never",{"_index":1837,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["new",{"_index":228,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newavatar",{"_index":1657,"title":{},"body":{"injectables/UsersService.html":{}}}],["newconversation",{"_index":695,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newcover",{"_index":1658,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":1523,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["newprofile",{"_index":1655,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":868,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1481,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(timeout(1000",{"_index":1509,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["nextfunction",{"_index":888,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2170,"title":{},"body":{"license.html":{},"properties.html":{}}}],["ngược",{"_index":365,"title":{},"body":{"injectables/AtGuard.html":{}}}],["nice",{"_index":1164,"title":{},"body":{"injectables/MessagesService.html":{}}}],["node.js",{"_index":1993,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1953,"title":{},"body":{"index.html":{}}}],["non",{"_index":1852,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["non_religions",{"_index":1851,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":2216,"title":{},"body":{"license.html":{}}}],["notacceptableexception",{"_index":802,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/UsersService.html":{}}}],["notacceptableexception('password",{"_index":1663,"title":{},"body":{"injectables/UsersService.html":{}}}],["notedev",{"_index":2134,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":811,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('post",{"_index":1347,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":895,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2204,"title":{},"body":{"license.html":{}}}],["notificationenum",{"_index":1826,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["notimplementedexception",{"_index":844,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["now",{"_index":1076,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1080,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2065,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2069,"title":{},"body":{"index.html":{}}}],["null",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/imageValidator.html":{}}}],["nullable",{"_index":590,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["number",{"_index":563,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number(dto.current",{"_index":1644,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":1643,"title":{},"body":{"injectables/UsersService.html":{}}}],["nếu",{"_index":355,"title":{},"body":{"injectables/AtGuard.html":{}}}],["object",{"_index":1677,"title":{},"body":{"injectables/ValidationPipe.html":{},"index.html":{}}}],["object.values",{"_index":1170,"title":{},"body":{"injectables/MessagesService.html":{}}}],["observable",{"_index":871,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2179,"title":{},"body":{"license.html":{}}}],["official",{"_index":1910,"title":{},"body":{"index.html":{},"properties.html":{}}}],["old",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["old!'})@max(101",{"_index":1417,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["oldpassword",{"_index":1522,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["one",{"_index":619,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":1379,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1380,"title":{},"body":{"injectables/PrismaService.html":{}}}],["oop",{"_index":2144,"title":{},"body":{"index.html":{}}}],["open",{"_index":2074,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":1016,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":992,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":2032,"title":{},"body":{"index.html":{}}}],["option",{"_index":2294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":86,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["options",{"_index":1970,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1194,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["orderby",{"_index":1646,"title":{},"body":{"injectables/UsersService.html":{}}}],["oriented",{"_index":2140,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1126,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":969,"title":{},"body":{"classes/FilesService.html":{}}}],["otherwise",{"_index":2228,"title":{},"body":{"license.html":{}}}],["otpstatusenum",{"_index":1827,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["out",{"_index":67,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2236,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1778,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":2026,"title":{},"body":{"index.html":{}}}],["pagecurrent",{"_index":1651,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":1648,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":1650,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":113,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":143,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('conversationid",{"_index":671,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('email",{"_index":1612,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":664,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('userid",{"_index":169,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["param('useridorusername",{"_index":1609,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":84,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":1998,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1205,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1195,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parser",{"_index":1798,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1277,"title":{},"body":{"controllers/PostsController.html":{}}}],["parsing",{"_index":1995,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":793,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createconversationdto",{"_index":794,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["particular",{"_index":2215,"title":{},"body":{"license.html":{}}}],["parttern",{"_index":1753,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":386,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":383,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":389,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":1502,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["password",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{}}}],["password'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1581,"title":{},"body":{"controllers/UsersController.html":{}}}],["password123",{"_index":1536,"title":{},"body":{"classes/UserEntity.html":{}}}],["password123'})@length(8",{"_index":1540,"title":{},"body":{"classes/UserEntity.html":{}}}],["passwordmatches",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":1979,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":750,"title":{"classes/passwordValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":144,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":673,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":623,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":670,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":643,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":675,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":647,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":666,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":639,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile",{"_index":1614,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@apibearerauth()@apioperation({summary",{"_index":1599,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1294,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1275,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('users/profile/:userid",{"_index":171,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["patch('users/profile/:userid')@apibearerauth()@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["path",{"_index":231,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":1875,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["payload",{"_index":382,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["payloadtoolargeexception",{"_index":842,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["pending",{"_index":1846,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["perform",{"_index":1983,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2173,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2197,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":2334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2178,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2198,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1407,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1459,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["phép",{"_index":358,"title":{},"body":{"injectables/AtGuard.html":{}}}],["picktype",{"_index":716,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{}}}],["picktype(commententity",{"_index":718,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(postentity",{"_index":777,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["picktype(profileentity",{"_index":1192,"title":{},"body":{"classes/PaginationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{}}}],["picktype(userentity",{"_index":1084,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["pipe",{"_index":877,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["pipe(tap",{"_index":1078,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":2041,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1203,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":1985,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":1675,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":1678,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":1921,"title":{},"body":{"index.html":{}}}],["playground",{"_index":2047,"title":{},"body":{"index.html":{}}}],["please",{"_index":2108,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":1952,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2207,"title":{},"body":{"license.html":{}}}],["post",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["post('avatar",{"_index":943,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":904,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1307,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1236,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":946,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":910,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":952,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":915,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":949,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":923,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1285,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1256,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1300,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1266,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1241,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":610,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto.ts",{"_index":774,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":798,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post.dto.ts:6",{"_index":799,"title":{},"body":{"classes/DeleteOnePost.html":{},"classes/GetAllPostOfUserDto.html":{}}}],["post.id",{"_index":1355,"title":{},"body":{"injectables/PostsService.html":{}}}],["postentity",{"_index":775,"title":{"classes/PostEntity.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["postgre",{"_index":2059,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1392,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":555,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":2055,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1223,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["posts.controller",{"_index":1320,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1279,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1221,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":266,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1278,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":1931,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":2149,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":1038,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":1738,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":1816,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":1912,"title":{},"body":{"index.html":{}}}],["primary",{"_index":1838,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["print",{"_index":2010,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":1807,"title":{},"body":{"dependencies.html":{},"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1375,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1388,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma/prisma.module",{"_index":682,"title":{},"body":{"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["prisma/prisma.service",{"_index":87,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["prisma@latest",{"_index":2067,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1377,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":267,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":81,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":186,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LoggerService.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":2037,"title":{},"body":{"index.html":{}}}],["process.env.database_url",{"_index":1393,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.white_list",{"_index":2297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":2086,"title":{},"body":{"index.html":{}}}],["profile",{"_index":122,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":127,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["profile.dto.ts",{"_index":1558,"title":{},"body":{"classes/UserProfileDto.html":{},"coverage.html":{}}}],["profileentity",{"_index":1190,"title":{"classes/ProfileEntity.html":{}},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"coverage.html":{}}}],["profileentity:103",{"_index":1572,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:108",{"_index":1563,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:121",{"_index":1560,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:131",{"_index":1562,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:141",{"_index":1567,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:23",{"_index":1565,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:28",{"_index":1569,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:38",{"_index":1571,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:55",{"_index":1566,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:63",{"_index":1561,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:71",{"_index":1564,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:78",{"_index":1570,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:85",{"_index":1568,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profileentity:95",{"_index":1559,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["programming",{"_index":1935,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":2117,"title":{},"body":{"index.html":{}}}],["project",{"_index":2029,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":111,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":554,"title":{"properties.html":{}},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"properties.html":{}}}],["property",{"_index":1532,"title":{},"body":{"classes/UserEntity.html":{}}}],["provide",{"_index":320,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["provider",{"_index":1890,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":69,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":116,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1252,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get('find/:email')@apioperation({summary",{"_index":1588,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('profile/:useridorusername')@apioperation({summary",{"_index":1584,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('users/:userid')@apioperation({summary",{"_index":121,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get('users/all')@apioperation({summary",{"_index":114,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":237,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('signin')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":418,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":919,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":927,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":2191,"title":{},"body":{"license.html":{}}}],["published",{"_index":1344,"title":{},"body":{"injectables/PostsService.html":{}}}],["pull",{"_index":2071,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1918,"title":{},"body":{"index.html":{},"license.html":{}}}],["purposeid",{"_index":1862,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pushrunning",{"_index":2077,"title":{},"body":{"index.html":{}}}],["put",{"_index":145,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1310,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1271,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar",{"_index":1615,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar')@apibearerauth()@apioperation({summary",{"_index":1594,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover",{"_index":1616,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover')@apibearerauth()@apioperation({summary",{"_index":1596,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('users/avatar/:userid",{"_index":173,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":131,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid",{"_index":176,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":137,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["query",{"_index":146,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["quickly",{"_index":2036,"title":{},"body":{"index.html":{}}}],["randomint",{"_index":1749,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomint(min",{"_index":1896,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rapidy",{"_index":2053,"title":{},"body":{"index.html":{}}}],["reach",{"_index":2161,"title":{},"body":{"index.html":{}}}],["react",{"_index":1267,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1362,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":1946,"title":{},"body":{"index.html":{}}}],["reactionpost",{"_index":1232,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1301,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1264,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":556,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1265,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1211,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":2008,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":159,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{}}}],["references",{"_index":2048,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1808,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":1139,"title":{},"body":{"classes/MessagesGateway.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{}}}],["refreshtoken",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["religion",{"_index":1853,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["religionenum",{"_index":1828,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["remove",{"_index":1090,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["remove(@messagebody",{"_index":1142,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["remove(message",{"_index":1107,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":2012,"title":{},"body":{"index.html":{}}}],["replies",{"_index":557,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repository",{"_index":1962,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":890,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.get('authorization').replace('bearer",{"_index":1503,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["req.params.userid",{"_index":892,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["request",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":232,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1490,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod",{"_index":1625,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":51,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["requesttimeoutexception",{"_index":812,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["required",{"_index":596,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/FileController.html":{},"classes/UserEntity.html":{},"miscellaneous/functions.html":{}}}],["requiredroles",{"_index":1487,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":887,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["reset",{"_index":66,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":204,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["response.status(status).json",{"_index":984,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":233,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":222,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["rest",{"_index":1938,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["restriction",{"_index":2185,"title":{},"body":{"license.html":{}}}],["result",{"_index":2015,"title":{},"body":{"index.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":165,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":110,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2188,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1810,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roledecorator",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(role.admin",{"_index":54,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["roles",{"_index":2057,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["roles.enum",{"_index":1486,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":298,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":996,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["rt",{"_index":493,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":436,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":462,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2081,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":875,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1072,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":1736,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["sample_image",{"_index":1945,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1957,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1976,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1966,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":1060,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":1061,"title":{},"body":{"injectables/LoggerService.html":{}}}],["secondary",{"_index":1839,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secret",{"_index":472,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":392,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":2002,"title":{},"body":{"index.html":{}}}],["see",{"_index":1950,"title":{},"body":{"index.html":{}}}],["select",{"_index":704,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2195,"title":{},"body":{"license.html":{}}}],["senderid",{"_index":767,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["serialize",{"_index":1988,"title":{},"body":{"index.html":{}}}],["serve",{"_index":2024,"title":{},"body":{"index.html":{}}}],["server",{"_index":53,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/MessagesGateway.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["servestaticmodule",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceunavailableexception",{"_index":813,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["set",{"_index":1007,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setcontact",{"_index":2314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":1009,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setmetadata('ispublic",{"_index":2336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":2337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":1043,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":1053,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setting",{"_index":2004,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2063,"title":{},"body":{"index.html":{}}}],["setversion('1.5.0",{"_index":2319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2205,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":1923,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":2123,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":2120,"title":{},"body":{"index.html":{}}}],["short",{"_index":730,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{}}}],["side",{"_index":1958,"title":{},"body":{"index.html":{}}}],["signed",{"_index":2000,"title":{},"body":{"index.html":{}}}],["signin",{"_index":1942,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":474,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":1943,"title":{},"body":{"index.html":{}}}],["signup",{"_index":1941,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":417,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["single",{"_index":1462,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["single'})@isstring",{"_index":1446,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["singlefielddecorator",{"_index":933,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":944,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":947,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":1897,"title":{},"body":{"miscellaneous/functions.html":{}}}],["size",{"_index":973,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":1933,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1642,"title":{},"body":{"injectables/UsersService.html":{}}}],["snake",{"_index":2142,"title":{},"body":{"index.html":{}}}],["social",{"_index":2062,"title":{},"body":{"index.html":{}}}],["socialenum",{"_index":1830,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["socket",{"_index":1098,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["socket.io",{"_index":1124,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2181,"title":{},"body":{"license.html":{}}}],["someone_like_you",{"_index":1731,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["sometime",{"_index":1835,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sometimes",{"_index":1834,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["spa",{"_index":2027,"title":{},"body":{"index.html":{}}}],["special",{"_index":1547,"title":{},"body":{"classes/UserEntity.html":{}}}],["specification",{"_index":1004,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":2104,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1464,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/.../age.ts",{"_index":2261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":1878,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../cors.config.ts",{"_index":2260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delay.ts",{"_index":1886,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../enum.ts",{"_index":1822,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../fullname.validator.ts",{"_index":2265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":2259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helmet.middleware.ts",{"_index":1881,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../image.validator.ts",{"_index":2264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":1882,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":1880,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1879,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multi",{"_index":1883,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../password.validator.ts",{"_index":2266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":2267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":1884,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":2270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":1829,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../single",{"_index":1885,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../status",{"_index":2258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":2263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":2268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":235,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":248,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:59",{"_index":272,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":335,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":336,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":337,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/configs/cors.config.ts",{"_index":1689,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":987,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/swagger.ts",{"_index":1696,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants/enum.ts",{"_index":1833,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/constants/status",{"_index":1698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/custom.filter.ts",{"_index":801,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["src/core/filters/custom.filter.ts:16",{"_index":859,"title":{},"body":{"classes/ErrorNotFoundException.html":{}}}],["src/core/filters/custom.filter.ts:22",{"_index":862,"title":{},"body":{"classes/ErrorUnauthorizedException.html":{}}}],["src/core/filters/custom.filter.ts:28",{"_index":855,"title":{},"body":{"classes/ErrorForbiddenException.html":{}}}],["src/core/filters/custom.filter.ts:34",{"_index":854,"title":{},"body":{"classes/ErrorBadRequestException.html":{}}}],["src/core/filters/custom.filter.ts:40",{"_index":804,"title":{},"body":{"classes/ErrorAcceptableException.html":{}}}],["src/core/filters/custom.filter.ts:46",{"_index":860,"title":{},"body":{"classes/ErrorRequestTimeoutException.html":{}}}],["src/core/filters/custom.filter.ts:52",{"_index":863,"title":{},"body":{"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["src/core/filters/custom.filter.ts:58",{"_index":857,"title":{},"body":{"classes/ErrorInternalServerException.html":{}}}],["src/core/filters/custom.filter.ts:64",{"_index":858,"title":{},"body":{"classes/ErrorMethodNotAllowedException.html":{}}}],["src/core/filters/custom.filter.ts:70",{"_index":861,"title":{},"body":{"classes/ErrorServiceUnavailableException.html":{}}}],["src/core/filters/custom.filter.ts:77",{"_index":853,"title":{},"body":{"classes/ErrorBadGatewayException.html":{}}}],["src/core/filters/custom.filter.ts:83",{"_index":856,"title":{},"body":{"classes/ErrorGatewayTimeoutException.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":182,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:13",{"_index":192,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:16",{"_index":198,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:26",{"_index":202,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:38",{"_index":205,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":981,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":982,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/helpers/age.ts",{"_index":1733,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":1735,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/exception.interceptor.ts",{"_index":865,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["src/core/interceptors/exception.interceptor.ts:13",{"_index":870,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":1020,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":1023,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":1069,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":1070,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":1507,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":1508,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":1025,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":1478,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1510,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":1737,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":1031,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":1033,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":1739,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":1040,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":1052,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":1050,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":1058,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":1047,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":1056,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":1059,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":1054,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":882,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/helmet.middleware.ts",{"_index":1743,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/middlewares/logger",{"_index":1026,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1196,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":1669,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":1674,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":1672,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":1745,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.enum.ts",{"_index":1863,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":1483,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:6",{"_index":1484,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:9",{"_index":1485,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/utils/delay.ts",{"_index":1746,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/utils/random.ts",{"_index":1748,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators",{"_index":752,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":1750,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":1871,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":1868,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":1751,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":1902,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":1900,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":1754,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2239,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2238,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":1755,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2245,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2244,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":1756,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":2256,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":2255,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/infrastructure/admin/admin",{"_index":89,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.controller.ts",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.module.ts",{"_index":68,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/infrastructure/admin/admin.service.ts",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.service.ts:5",{"_index":83,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/infrastructure/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:105",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:65",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:74",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:83",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:93",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":1627,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":463,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":478,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:102",{"_index":487,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:114",{"_index":488,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:134",{"_index":491,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:15",{"_index":483,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:23",{"_index":486,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:49",{"_index":494,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:61",{"_index":490,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:86",{"_index":489,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1601,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":1760,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":1763,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto",{"_index":1602,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts",{"_index":1521,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/sigin.dto.ts",{"_index":1081,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/signup.dto.ts",{"_index":1505,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/entities/user.entity.ts",{"_index":1530,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/infrastructure/auth/entities/user.entity.ts:22",{"_index":1534,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/auth/entities/user.entity.ts:41",{"_index":1549,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/auth/entities/user.entity.ts:50",{"_index":1538,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/auth/entities/user.entity.ts:59",{"_index":1537,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/auth/entities/user.entity.ts:78",{"_index":1551,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":342,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:12",{"_index":348,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:6",{"_index":345,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":1495,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:3",{"_index":1496,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":373,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:16",{"_index":381,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:8",{"_index":377,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":1497,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:20",{"_index":1500,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:8",{"_index":1498,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":598,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:102",{"_index":640,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:117",{"_index":620,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:132",{"_index":644,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:151",{"_index":625,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:170",{"_index":650,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:62",{"_index":614,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:74",{"_index":631,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:87",{"_index":636,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":680,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":683,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:103",{"_index":686,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:120",{"_index":691,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:135",{"_index":687,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:16",{"_index":684,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:168",{"_index":692,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:19",{"_index":685,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:34",{"_index":688,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:62",{"_index":689,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:88",{"_index":690,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":719,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":783,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":976,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":790,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":576,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:11",{"_index":591,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:14",{"_index":584,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:17",{"_index":586,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:20",{"_index":595,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:23",{"_index":593,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:26",{"_index":587,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:29",{"_index":583,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:5",{"_index":592,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:8",{"_index":594,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":1766,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":1768,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":1769,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":897,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:49",{"_index":908,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:60",{"_index":913,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:71",{"_index":928,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:91",{"_index":920,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":962,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":964,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":966,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":968,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":967,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":965,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/create",{"_index":765,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/update",{"_index":1516,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1086,"title":{},"body":{"classes/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:15",{"_index":1095,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:19",{"_index":1106,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1103,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:37",{"_index":1100,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:52",{"_index":1113,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:66",{"_index":1117,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:73",{"_index":1109,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1146,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1148,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:32",{"_index":1155,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:42",{"_index":1152,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:47",{"_index":1154,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:52",{"_index":1151,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:68",{"_index":1157,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1166,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:81",{"_index":1156,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/posts/dto/comment/create",{"_index":714,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/delete",{"_index":782,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/update",{"_index":1511,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/create",{"_index":773,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/delete",{"_index":797,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/get",{"_index":979,"title":{},"body":{"classes/GetAllPostOfUserDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/update",{"_index":1477,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":553,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:12",{"_index":560,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":567,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:20",{"_index":568,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:24",{"_index":562,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:28",{"_index":565,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:32",{"_index":566,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity",{"_index":776,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1209,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:10",{"_index":1213,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:14",{"_index":1215,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:18",{"_index":1212,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:22",{"_index":1216,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:26",{"_index":1214,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:30",{"_index":1218,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:6",{"_index":1219,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1222,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:101",{"_index":1276,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:111",{"_index":1250,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:121",{"_index":1268,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:131",{"_index":1254,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:142",{"_index":1239,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:152",{"_index":1272,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:162",{"_index":1247,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:57",{"_index":1244,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:70",{"_index":1257,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:81",{"_index":1260,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:91",{"_index":1263,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1319,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1321,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:130",{"_index":1330,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:138",{"_index":1333,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:161",{"_index":1326,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:187",{"_index":1331,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:207",{"_index":1327,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:22",{"_index":1322,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:220",{"_index":1323,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:239",{"_index":1332,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:24",{"_index":1324,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:250",{"_index":1325,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:59",{"_index":1328,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:94",{"_index":1329,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/prisma/prisma.module",{"_index":464,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/infrastructure/prisma/prisma.module.ts",{"_index":1374,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/infrastructure/prisma/prisma.service",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts",{"_index":1376,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:13",{"_index":1381,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:25",{"_index":1387,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:29",{"_index":1386,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:33",{"_index":1384,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/users/dto/request/pagination.dto.ts",{"_index":1189,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/dto/request/user",{"_index":1527,"title":{},"body":{"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/dto/request/users",{"_index":1557,"title":{},"body":{"classes/UserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts",{"_index":1398,"title":{},"body":{"classes/ProfileEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:103",{"_index":1453,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:108",{"_index":1429,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:121",{"_index":1418,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:131",{"_index":1424,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:141",{"_index":1443,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:23",{"_index":1432,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:28",{"_index":1445,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:38",{"_index":1450,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:55",{"_index":1439,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:63",{"_index":1420,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:71",{"_index":1430,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:78",{"_index":1447,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:85",{"_index":1444,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:95",{"_index":1413,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":1574,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:107",{"_index":1600,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:121",{"_index":1595,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:135",{"_index":1597,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:147",{"_index":1582,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:70",{"_index":1585,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:83",{"_index":1591,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:96",{"_index":1593,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":1623,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:15",{"_index":1624,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":1629,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:107",{"_index":1639,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:127",{"_index":1637,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:156",{"_index":1638,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:185",{"_index":1631,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:217",{"_index":1632,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:26",{"_index":1630,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:29",{"_index":1633,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:54",{"_index":1634,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:73",{"_index":1635,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:88",{"_index":1636,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":1774,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":2082,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2085,"title":{},"body":{"index.html":{}}}],["start:prodrunning",{"_index":2087,"title":{},"body":{"index.html":{}}}],["started",{"_index":1908,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1961,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1686,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":188,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":255,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":223,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":2111,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":466,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":385,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":101,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1951,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2075,"title":{},"body":{"index.html":{}}}],["style",{"_index":2121,"title":{},"body":{"index.html":{}}}],["sub",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2200,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2193,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1119,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1099,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1102,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('joinconversation",{"_index":1105,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1108,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1112,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('updatemessage",{"_index":1116,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["substantial",{"_index":2206,"title":{},"body":{"license.html":{}}}],["success",{"_index":107,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["success'})@apicreatedresponse({description",{"_index":1242,"title":{},"body":{"controllers/PostsController.html":{}}}],["success'})@arrayfielddecorator('files",{"_index":925,"title":{},"body":{"controllers/FileController.html":{}}}],["success'})@multifielddecorator(['undefined",{"_index":918,"title":{},"body":{"controllers/FileController.html":{}}}],["success'})@singlefielddecorator('./public/avatars",{"_index":907,"title":{},"body":{"controllers/FileController.html":{}}}],["success'})@singlefielddecorator('./public/covers",{"_index":912,"title":{},"body":{"controllers/FileController.html":{}}}],["success.'})@apicreatedresponse({description",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["success.'})@apicreatedresponse({type",{"_index":613,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["success.'})@apioperation({summary",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["success.'})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfuly",{"_index":1243,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":161,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":354,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super('bad",{"_index":823,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('forbidden",{"_index":821,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('gateway",{"_index":840,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('internal",{"_index":831,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('method",{"_index":833,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('not",{"_index":817,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('request",{"_index":826,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('service",{"_index":835,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('unauthorized",{"_index":819,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('unsupported",{"_index":828,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super.canactivate(context",{"_index":371,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":1067,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":1065,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":1064,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":1068,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":1066,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":2001,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2233,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":994,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":2331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":2332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":2076,"title":{},"body":{"index.html":{}}}],["t",{"_index":1479,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1777,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1776,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":1967,"title":{},"body":{"index.html":{}}}],["take",{"_index":1645,"title":{},"body":{"injectables/UsersService.html":{}}}],["takes",{"_index":2013,"title":{},"body":{"index.html":{}}}],["tap",{"_index":1071,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["teneno",{"_index":238,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":2023,"title":{},"body":{"index.html":{}}}],["test",{"_index":2096,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2099,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2098,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2095,"title":{},"body":{"index.html":{}}}],["text",{"_index":558,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateMessageDto.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["th",{"_index":356,"title":{},"body":{"injectables/AtGuard.html":{}}}],["thanks",{"_index":2103,"title":{},"body":{"index.html":{}}}],["thinking",{"_index":1936,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":1925,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1394,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1395,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1396,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":256,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(dto",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword(dto",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('access_token_secret",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('refresh_token_secret",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversations",{"_index":1174,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.find((element",{"_index":1167,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.foreach((element",{"_index":1177,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversationsservice",{"_index":658,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":660,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":669,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":674,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(dto",{"_index":662,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":665,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":667,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":672,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":676,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":945,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":948,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":959,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":951,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findallmessages(message['conversationid",{"_index":1188,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.findallmessages(updatemessagedto['conversationid",{"_index":1184,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmember(conversationid",{"_index":1172,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1346,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getpublicuserbyidorusername(userid",{"_index":1656,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettokens(newuser.id",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handlemessage(exception",{"_index":215,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.signasync",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":221,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":341,"title":{},"body":{"injectables/AppService.html":{}}}],["this.messagesservice.createmessage",{"_index":1133,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.findallmessages(conversationid",{"_index":1132,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.getmember",{"_index":1136,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.joinconversation",{"_index":1129,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.remove(message",{"_index":1143,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.updatemessage(updatemessagedto",{"_index":1140,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.postsservice.addcomment(dto",{"_index":1309,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(dto",{"_index":1284,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1315,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(dto",{"_index":1299,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1306,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(dto",{"_index":1287,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1290,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1293,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1302,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1312,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1296,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":1062,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1366,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1370,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1368,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":696,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":710,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":702,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":708,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.update",{"_index":706,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.post.create",{"_index":1336,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1356,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1343,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1345,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1351,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1363,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1358,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":1641,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":1667,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":1665,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":1654,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":368,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.reflector.getallandoverride('roles",{"_index":1488,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.server.emit('message",{"_index":1134,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.server.emit('refresh",{"_index":1141,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.tovalidate(metatype",{"_index":1676,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":1607,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":1618,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":180,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":166,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getpublicuserbyidorusername(useridorusername",{"_index":1610,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":1613,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserprofile(userid",{"_index":170,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":175,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":177,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":172,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["through",{"_index":1008,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":874,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["thuong",{"_index":2171,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":2167,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":2089,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/TimeoutInterceptor.html":{},"controllers/UsersController.html":{}}}],["timeoutinterceptor",{"_index":1506,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":227,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["tips",{"_index":2049,"title":{},"body":{"index.html":{}}}],["title",{"_index":778,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":1927,"title":{},"body":{"index.html":{}}}],["token",{"_index":363,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["tools",{"_index":2031,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2227,"title":{},"body":{"license.html":{}}}],["total",{"_index":1640,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":2112,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1670,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1671,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":1049,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trading",{"_index":2119,"title":{},"body":{"index.html":{}}}],["training",{"_index":2148,"title":{},"body":{"index.html":{}}}],["tran",{"_index":2169,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1198,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1199,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1454,"title":{},"body":{"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":1024,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["travel",{"_index":1465,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["trim",{"_index":1504,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":302,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@isnotempty()@length(3",{"_index":728,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["truong",{"_index":2172,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["truy",{"_index":359,"title":{},"body":{"injectables/AtGuard.html":{}}}],["tslint",{"_index":1814,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":2070,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":2141,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":2127,"title":{},"body":{"index.html":{}}}],["type",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2253,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1519,"title":{},"body":{"classes/UpdateMessageDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":1682,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":1789,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1960,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1091,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["typing(conversationid",{"_index":1110,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["ui/ux",{"_index":2150,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["unavailable",{"_index":836,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["undefined",{"_index":893,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isarray",{"_index":723,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["under",{"_index":2165,"title":{},"body":{"index.html":{}}}],["unit",{"_index":2094,"title":{},"body":{"index.html":{}}}],["university",{"_index":1842,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unknown",{"_index":615,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["unprocessableentityexception",{"_index":843,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["unsupportedmediatypeexception",{"_index":814,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["update",{"_index":97,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["update(userid",{"_index":124,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["updatecomment",{"_index":1233,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(@body",{"_index":1311,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatecomment(dto",{"_index":1269,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1270,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":605,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":637,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":638,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updated",{"_index":705,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":581,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":606,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":641,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":642,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updatemessage",{"_index":1092,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessage(@messagebody",{"_index":1138,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["updatemessage(updatemessagedto",{"_index":1114,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessagedto",{"_index":1115,"title":{"classes/UpdateMessageDto.html":{}},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto['conversationid",{"_index":1178,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['messageid",{"_index":1181,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['text",{"_index":1183,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatepassword",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":425,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1234,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1295,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1273,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1274,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updaterolesconversation",{"_index":607,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":645,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":646,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":480,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":492,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuserprofileenum",{"_index":1831,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["updateusersavatar",{"_index":98,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":129,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":99,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":135,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":1578,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":1598,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":905,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":898,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatar(file",{"_index":902,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcover",{"_index":899,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcover(file",{"_index":909,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadedfile",{"_index":929,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":930,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":1895,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":900,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":914,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts",{"_index":901,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":921,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uppercase",{"_index":1545,"title":{},"body":{"classes/UserEntity.html":{}}}],["uptest",{"_index":2093,"title":{},"body":{"index.html":{}}}],["url",{"_index":1391,"title":{},"body":{"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{}}}],["url'})@isstring()@isnotempty",{"_index":1419,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["use",{"_index":884,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":886,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["useclass",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["used",{"_index":1014,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["usefactory",{"_index":471,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(rtguard",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{}}}],["usenamevalidator",{"_index":751,"title":{"classes/usenameValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":105,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user)'})@apiokresponse({description",{"_index":612,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":630,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":917,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1762,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.middleware",{"_index":1626,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":883,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":885,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":889,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":1494,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.includes(role",{"_index":1493,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":1492,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user01",{"_index":759,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user02",{"_index":760,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user_not_found",{"_index":2286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_not_match_with_hobby",{"_index":2287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_not_match_with_image",{"_index":2288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useravatardto",{"_index":130,"title":{"classes/UserAvatarDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UserAvatarDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usercoverdto",{"_index":136,"title":{"classes/UserCoverDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UserCoverDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userentity",{"_index":1082,"title":{"classes/UserEntity.html":{}},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexist",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":894,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":109,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridorusername",{"_index":1586,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":1556,"title":{},"body":{"classes/UserEntity.html":{}}}],["username123'})@isstring()@isnotempty()@isalphanumeric()@length(3",{"_index":1550,"title":{},"body":{"classes/UserEntity.html":{}}}],["userprofiledto",{"_index":125,"title":{"classes/UserProfileDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrolesenum",{"_index":1832,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["users",{"_index":162,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["users'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":117,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller",{"_index":75,"title":{},"body":{"modules/AdminModule.html":{},"modules/UsersModule.html":{}}}],["users.controller.ts",{"_index":90,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["users.controller.ts:108",{"_index":134,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:122",{"_index":139,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:136",{"_index":108,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:72",{"_index":118,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:83",{"_index":123,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:94",{"_index":128,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.length",{"_index":1649,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":1603,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto",{"_index":150,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/dto/response",{"_index":156,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/users.module",{"_index":74,"title":{},"body":{"modules/AdminModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["users/users.service",{"_index":158,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["userscontroller",{"_index":1573,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":63,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":157,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usually",{"_index":1836,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uuid",{"_index":694,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["v",{"_index":364,"title":{},"body":{"injectables/AtGuard.html":{}}}],["v4",{"_index":693,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["val",{"_index":1204,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":374,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"injectables/RtStrategy.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(fullnamevalidator",{"_index":1461,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(image",{"_index":1901,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(object",{"_index":1680,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":1555,"title":{},"body":{"classes/UserEntity.html":{}}}],["validate(payload",{"_index":379,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1469,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(req",{"_index":1499,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":1870,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":757,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["validation",{"_index":1984,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":1867,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":1668,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":574,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":1872,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":1864,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":1011,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1690,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2257,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1969,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":1044,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":1055,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":1981,"title":{},"body":{"index.html":{}}}],["versa",{"_index":1987,"title":{},"body":{"index.html":{}}}],["version",{"_index":2248,"title":{},"body":{"properties.html":{}}}],["view",{"_index":2313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":200,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"modules/UsersModule.html":{}}}],["vue",{"_index":2133,"title":{},"body":{"index.html":{}}}],["wait",{"_index":1747,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wait(ms",{"_index":1898,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warn",{"_index":1045,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":1057,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warranties",{"_index":2212,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2208,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2083,"title":{},"body":{"index.html":{}}}],["web",{"_index":2136,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":1919,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["websocket",{"_index":1939,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":1118,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["websocketserver",{"_index":1096,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["whether",{"_index":2224,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":1693,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":2184,"title":{},"body":{"license.html":{}}}],["world",{"_index":245,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{}}}],["writtenposts",{"_index":1342,"title":{},"body":{"injectables/PostsService.html":{}}}],["wrong_username_or_password",{"_index":2289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":2042,"title":{},"body":{"index.html":{}}}],["years",{"_index":1416,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UserProfileDto.html":{}}}],["yes",{"_index":805,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/LoggerService.html":{}}}],["you'd",{"_index":2107,"title":{},"body":{"index.html":{}}}],["your_album_is_full",{"_index":2290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2243,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2240,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2241,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":1873,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2242,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":65,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ROLE, RoleDecorator } from 'src/core/roles';\n\n@ApiTags('Admin')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@RoleDecorator(ROLE.ADMIN)\n@Controller('admin')\nexport class AdminController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AdminUsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AdminUsersController } from './admin-users.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController, AdminUsersController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/admin/admin.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class AdminService {\n  constructor(private prismaService: PrismaService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/all')@ApiOperation({summary: 'Get list all public users'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/:userId')@ApiOperation({summary: 'Get user profile by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, dto: UserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('users/profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ROLE, RoleDecorator } from 'src/core/roles';\nimport { Public } from '../auth/decorators';\nimport {\n  PaginationDto,\n  UserAvatarDto,\n  UserCoverDto,\n  UserProfileDto,\n} from '../users/dto';\nimport {\n  IAllUsers,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from '../users/dto/response';\nimport { UsersService } from '../users/users.service';\n\n@ApiTags('Admin')\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@RoleDecorator(ROLE.ADMIN)\n@Controller('admin')\nexport class AdminUsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Get('users/all')\n  @ApiOperation({ summary: 'Get list all public users' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getAllUsers(@Query() dto: PaginationDto): Promise {\n    return this.usersService.getAllUsers(dto);\n  }\n\n  @Public()\n  @Get('users/:userId')\n  @ApiOperation({\n    summary: 'Get user profile by user-id',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getUserProfile(\n    @Param('userId') userId: string,\n  ): Promise {\n    return this.usersService.getUserProfile(userId);\n  }\n\n  @Patch('users/profile/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async update(\n    @Param('userId') userId: string,\n    @Body() dto: UserProfileDto,\n  ): Promise {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('users/avatar/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersAvatar(\n    @Param() userId: string,\n    @Body() dto: UserAvatarDto,\n  ): Promise {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('users/cover/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersCover(\n    @Param() userId: string,\n    @Body() dto: UserCoverDto,\n  ): Promise {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('users/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user by user-id' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deleteUserById(@Param('userId') userId: string): Promise {\n    return this.usersService.deleteUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                    Private\n                                    Static\n                                handleResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(request, response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    request: Request,\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        timestamp: new Date().toISOString(),\n        message: exception.stack,\n        path: request.url,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: '{code: 1, data: {Hello world}, message: \"\"'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Home')\n@Controller('/')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Teneno homepage' })\n  @ApiResponse({\n    status: 200,\n    description: '{code: 1, data: {Hello world}, message: \"\"',\n  })\n  @ApiResponse({ status: 404, description: 'Not found' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './infrastructure/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AdminModule } from './infrastructure/admin/admin.module';\nimport { RolesGuard } from './core/roles';\n\n@Module({\n  imports: [\n    InterceptorModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      // envFilePath: ['.env'],\n      // envFilePath: `.env.${process.env.NODE_ENV} || .env`,\n    }),\n    LoggerModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: `${__dirname}/../documentation`, // join(__dirname, '..', 'client'),\n      renderPath: '/',\n      // exclude: ['/api*'],\n    }),\n    PrismaModule,\n    AuthModule,\n    AdminModule,\n    UsersModule,\n    FilesModule,\n    PostsModule,\n    ConversationsModule,\n    MessagesModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n    {\n      provide: APP_GUARD,\n      useClass: AtGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule implements NestModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    consumer.apply(LoggerContextMiddleware).forRoutes('*');\n    //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n    //   .forRoutes(UsersController);\n    // .forRoutes('users');\n    // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n    // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\nexport class AppService {\n  constructor(@Logger('AppService') private logger: LoggerService) {}\n\n  getHello(): string {\n    this.logger.log('Hello World', '200');\n    return 'Hello World from Teneno!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AtGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  // nếu true thì cho phép truy cập bằng access-token , và ngược lại\n  public canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) return true;\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../dto/response';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  validate(payload: IJwtPayload): IJwtPayload {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success.'})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: 'Success.'})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success.'})@ApiOperation({summary: 'Login to user account'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: 'Success.'})@ApiCreatedResponse({description: 'The new account has been created.', type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success.'})@ApiOperation({summary: 'Update user password'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto';\nimport { ITokens } from './dto/response';\n\n@ApiTags('Auth')\n@ApiOkResponse({ description: 'Success.' })\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden.' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {\n    this.authService = authService;\n  }\n\n  @Public()\n  @Post('signup')\n  @ApiOperation({ summary: 'Create new user account' })\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiCreatedResponse({\n    description: 'The new account has been created.',\n    type: SignupDto,\n  })\n  async signupLocal(@Body() dto: SignupDto): Promise {\n    return this.authService.signupLocal(dto);\n  }\n\n  @Public()\n  @Post('signin')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiOperation({ summary: 'Login to user account' })\n  async signinLocal(@Body() dto: LoginDto): Promise {\n    return this.authService.signinLocal(dto);\n  }\n\n  @Post('logout')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiOperation({ summary: 'Logout user account (user)' })\n  async logout(@GetCurrentUserId() userId: string): Promise {\n    return this.authService.logout(userId);\n  }\n\n  @Post('refresh')\n  @ApiBearerAuth()\n  @UseGuards(RtGuard)\n  @ApiOkResponse({ description: 'Success.' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Logout account on all devices' })\n  async refreshToken(\n    @GetCurrentUserId() userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n    return this.authService.refreshToken(userId, refreshToken);\n  }\n\n  @Put('password')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiOperation({ summary: 'Update user password' })\n  async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n    return this.authService.updatePassWord(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    PrismaModule,\n    JwtModule,\n    // HttpModule,\n    // JwtModule.registerAsync({\n    //   imports: [ConfigModule],\n    //   useFactory: async (configService: ConfigService) => ({\n    //     secret: configService.get(\"JWT_SECRET\"),\n    //     signOptions: { expiresIn: configService.get(\"JWT_EXPIRATION_TIME\") },\n    //   }),\n    //   inject: [ConfigService],\n    // })\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, AtStrategy, RtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  ForbiddenException,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport { ITokens } from './dto/response';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { comparePassword, hashPassword } from 'src/core/helpers/hash';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(ConfigService)\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getTokens(userId: string, email: string): Promise {\n    const [at, rt] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get('ACCESS_TOKEN_SECRET'),\n          expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n        },\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get('REFRESH_TOKEN_SECRET'),\n          expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n        },\n      ),\n    ]);\n    return { accessToken: at, refreshToken: rt };\n  }\n\n  async updateRtHash(userId: string, rt: string) {\n    const hash = await hashPassword(rt);\n    await this.prismaService.user.update({\n      where: {\n        id: userId,\n      },\n      data: {\n        hashedRefreshToken: hash,\n      },\n    });\n  }\n\n  async signupLocal(dto: SignupDto): Promise {\n    const hash = await hashPassword(dto.password);\n\n    const userExist = await this.prismaService.user.findMany({\n      where: {\n        OR: [{ email: dto.email }, { username: dto.username }],\n      },\n    });\n\n    if (userExist.length > 0)\n      throw new ConflictException('User already exists');\n\n    const newUser = await this.prismaService.user.create({\n      data: {\n        email: dto.email,\n        password: hash,\n        username: dto.username,\n      },\n    });\n\n    const tokens = await this.getTokens(newUser.id, newUser.email);\n    await this.updateRtHash(newUser.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async signinLocal(dto: LoginDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n    if (!user) throw new ForbiddenException('Access denied');\n\n    const passwordMatches = await comparePassword(dto.password, user.password);\n    if (!passwordMatches) throw new ForbiddenException('Access denied');\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async logout(userId: string): Promise {\n    await this.prismaService.user.updateMany({\n      where: {\n        id: userId,\n        hashedRefreshToken: {\n          not: null,\n        },\n      },\n      data: { hashedRefreshToken: null },\n    });\n  }\n\n  async refreshToken(userId: string, refreshToken: string): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n    if (!user || !user.hashedRefreshToken)\n      throw new ForbiddenException('Access denied');\n\n    const hashMatches = await comparePassword(\n      refreshToken,\n      user.hashedRefreshToken,\n    );\n    if (!hashMatches) throw new ForbiddenException('Access denied');\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async updatePassWord(dto: UpdatePasswordDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n\n    const passwordMatches = await comparePassword(\n      dto.oldPassword,\n      user.password,\n    );\n\n    if (!passwordMatches) throw new ForbiddenException('Access denied');\n\n    if (dto.newPassword === dto.oldPassword)\n      throw new ForbiddenException(\n        'New password must be different from old password',\n      );\n\n    if (passwordMatches) {\n      await this.prismaService.user.update({\n        where: { email: dto.email },\n        data: {\n          password: await hashPassword(dto.newPassword),\n        },\n      });\n    }\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\n\nexport class CommentEntity {\n  @IsNotEmpty()\n  @IsString()\n  id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  reactions: number[];\n\n  @IsArray()\n  @IsNotEmpty()\n  replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ConversationEntity {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty({ required: false, nullable: true })\n  description: string | null;\n\n  @ApiProperty()\n  avatar: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n\n  @ApiProperty()\n  members: string[];\n\n  @ApiProperty()\n  creator: string;\n\n  @ApiProperty()\n  admins: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: 'Success.'})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { ConversationsService } from './conversations.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiForbiddenResponse({ description: 'Forbidden.' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n})\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n  constructor(private conversationsService: ConversationsService) {\n    this.conversationsService = conversationsService;\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new conversation (user)' })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  @ApiCreatedResponse({\n    type: ConversationEntity,\n    description: 'The new conversation has been created.',\n  })\n  async createConversation(@Body() dto: CreateConversationDto) {\n    return await this.conversationsService.createConversation(dto);\n  }\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    isArray: true,\n    description: 'Success.',\n  })\n  async getAllConversations(@Body() dto: GetAllConversationDto) {\n    return this.conversationsService.getAllConversations(dto);\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    description: 'Success.',\n  })\n  async getConversationById(\n    @Param('id') id: string,\n    @Body() dto: GetOneConversationDto,\n  ) {\n    return this.conversationsService.getConversationById(id, dto);\n  }\n\n  @Patch(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  updateConversationById(\n    @Param('id') id: string,\n    @Body() dto: UpdateConversationDto,\n  ) {\n    return this.conversationsService.updateConversationById(id, dto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Delete one conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async deleteConversationById(\n    @Param('id') id: string,\n    @Body() dto: DeleteConversationDto,\n  ) {\n    return this.conversationsService.deleteConversationById(id, dto);\n  }\n\n  @Patch(':conversationId/updateMembers')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update members list of current conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async updateMembersConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateMembersConversationDto,\n  ) {\n    return this.conversationsService.updateMembersConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/deleteAdmins')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Delete one admin of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async deleteOneAdminConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: DeleteOneAdminConversationDto,\n  ) {\n    return this.conversationsService.deleteOneAdminConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/updateRoles')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Change role of any member of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async updateRolesConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateRolesConversationDto,\n  ) {\n    return this.conversationsService.updateRolesConversation(\n      conversationId,\n      dto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_imports\n\n\n\ncluster_ConversationsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [ConversationsController],\n  providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class ConversationsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async createConversation(dto: CreateConversationDto) {\n    const newConversation = await this.prismaService.conversation.create({\n      data: {\n        id: uuid(),\n        name: dto.name,\n        description: dto.description,\n        avatar: '',\n        members: dto.members,\n        admins: dto.admins,\n        creator: dto.creator,\n      },\n    });\n    return newConversation;\n  }\n\n  async getAllConversations(dto: GetAllConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n      },\n      select: {\n        id: true,\n        name: true,\n        avatar: true,\n      },\n    });\n    return list;\n  }\n\n  async getConversationById(id: string, dto: GetOneConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n        AND: {\n          id: id,\n        },\n      },\n    });\n    return list;\n  }\n\n  updateConversationById(id: string, dto: UpdateConversationDto) {\n    const updated = this.prismaService.conversation.update({\n      where: {\n        id: id,\n      },\n      data: {\n        name: dto.name,\n        description: dto.description,\n        avatar: dto.avatar,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteConversationById(id: string, dto: DeleteConversationDto) {\n    const list = await this.prismaService.conversation.findUnique({\n      where: {\n        id: id,\n      },\n    });\n    if (list['creator'] === dto.userId) {\n      await this.prismaService.conversation.delete({\n        where: {\n          id: id,\n        },\n      });\n      return '';\n    }\n    return false;\n  }\n\n  async updateMembersConversation(\n    conversationId: string,\n    dto: UpdateMembersConversationDto,\n  ) {\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteOneAdminConversation(\n    conversationId: string,\n    dto: DeleteOneAdminConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n\n    if (list.length === 0) {\n      return 'You not creator of this conversation';\n    }\n    const updated = list[0]['admins'].filter((admin) => admin !== dto.userId);\n\n    await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: updated,\n      },\n    });\n    return updated;\n  }\n\n  async updateRolesConversation(\n    conversationId: string,\n    dto: UpdateRolesConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n    if (list.length === 0) {\n      return 'You not creator of this conversation';\n    }\n\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: dto.admins,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n  'text',\n  'postId',\n  'userId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'creator01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01', required: false, nullable: true})@IsString()@IsNotEmpty()@Length(3, 120)@MinLength(2, {message: 'Description is too short, must be at least 3 characters!'})@MaxLength(121, {message: 'Description is too long, must be at most 120 characters!'})@Validate(usenameValidator, {message: 'Description must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01'})@IsString()@IsNotEmpty()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class CreateConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Name must be not begin with number!',\n  })\n  name: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n    required: false,\n    nullable: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 120)\n  @MinLength(2, {\n    message: 'Description is too short, must be at least 3 characters!',\n  })\n  @MaxLength(121, {\n    message: 'Description is too long, must be at most 120 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Description must be not begin with number!',\n  })\n  description?: string;\n\n  @ApiProperty({\n    type: String,\n    example: ['user01', 'user02'],\n  })\n  @IsArray()\n  members: string[];\n\n  @ApiProperty({\n    type: String,\n    example: ['admin01', 'admin02'],\n  })\n  @IsArray()\n  admins: string[];\n\n  @ApiProperty({\n    type: String,\n    example: 'creator01',\n  })\n  @IsString()\n  creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels } from '@nestjs/swagger';\n\n@ApiExtraModels()\nexport class CreateMessageDto {\n  id: string;\n  senderId: string;\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class CreatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'authorId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetAllConversationDto } from './get-conversation.dto';\n\nexport class DeleteConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorAcceptableException.html":{"url":"classes/ErrorAcceptableException.html","title":"class - ErrorAcceptableException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorAcceptableException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotAcceptableException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorBadGatewayException.html":{"url":"classes/ErrorBadGatewayException.html","title":"class - ErrorBadGatewayException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorBadGatewayException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BadGatewayException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:77\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorBadRequestException.html":{"url":"classes/ErrorBadRequestException.html","title":"class - ErrorBadRequestException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorBadRequestException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorForbiddenException.html":{"url":"classes/ErrorForbiddenException.html","title":"class - ErrorForbiddenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorForbiddenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ForbiddenException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorGatewayTimeoutException.html":{"url":"classes/ErrorGatewayTimeoutException.html","title":"class - ErrorGatewayTimeoutException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorGatewayTimeoutException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    GatewayTimeoutException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:83\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorInternalServerException.html":{"url":"classes/ErrorInternalServerException.html","title":"class - ErrorInternalServerException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorInternalServerException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    InternalServerErrorException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorMethodNotAllowedException.html":{"url":"classes/ErrorMethodNotAllowedException.html","title":"class - ErrorMethodNotAllowedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorMethodNotAllowedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    MethodNotAllowedException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:64\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorNotFoundException.html":{"url":"classes/ErrorNotFoundException.html","title":"class - ErrorNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorRequestTimeoutException.html":{"url":"classes/ErrorRequestTimeoutException.html","title":"class - ErrorRequestTimeoutException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorRequestTimeoutException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    RequestTimeoutException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorServiceUnavailableException.html":{"url":"classes/ErrorServiceUnavailableException.html","title":"class - ErrorServiceUnavailableException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorServiceUnavailableException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ServiceUnavailableException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:70\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorUnauthorizedException.html":{"url":"classes/ErrorUnauthorizedException.html","title":"class - ErrorUnauthorizedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorUnauthorizedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ForbiddenException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorUnsupportedMediaTypeException.html":{"url":"classes/ErrorUnsupportedMediaTypeException.html","title":"class - ErrorUnsupportedMediaTypeException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorUnsupportedMediaTypeException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    UnsupportedMediaTypeException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsIntereptor.html":{"url":"injectables/ErrorsIntereptor.html","title":"injectable - ErrorsIntereptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsIntereptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/exception.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n@Injectable()\nexport class ErrorsIntereptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError((err) =>\n          throwError(\n            () => new HttpException('New message', HttpStatus.BAD_GATEWAY),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n  constructor(private prismaService: PrismaService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const userId = req.params.userId;\n    const userExist = await this.prismaService.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n      },\n    });\n    if (userExist === null || userExist === undefined || userExist.id === '') {\n      throw new NotFoundException('User not found');\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: 'Success'})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UploadedFile,\n  UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n  ApiBearerAuth,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport {\n  ArrayFieldDecorator,\n  SingleFieldDecorator,\n  MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('files')\nexport class FileController {\n  constructor(private readonly fileService: FilesService) {}\n\n  @Post('avatar')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n  @ApiOkResponse({ description: 'Success' })\n  @SingleFieldDecorator('./public/avatars')\n  async uploadAvatar(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadAvatar(file);\n  }\n\n  @Post('cover')\n  @ApiOperation({ summary: 'Upload cover file form data (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  @SingleFieldDecorator('./public/covers')\n  async uploadCover(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadCover(file);\n  }\n\n  @Post('posts')\n  @ApiOperation({ summary: 'Upload post with multi images (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  @ArrayFieldDecorator('files', true, 10, './public/posts')\n  async uploadPosts(\n    @UploadedFiles() files: Array,\n  ): Promise {\n    return this.fileService.uploadPosts(files);\n  }\n\n  @Post('multi')\n  @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  @MultiFieldDecorator(\n    [\n      { name: 'item_1', maxCount: 1, required: true },\n      { name: 'item_2', maxCount: 1 },\n      { name: 'item_3', maxCount: 1 },\n      { name: 'item_4', maxCount: 1 },\n      { name: 'item_5', maxCount: 1 },\n    ],\n    './public/multi',\n  )\n  async uploadMulti(\n    @UploadedFiles() files: Express.Multer.File[],\n  ): Promise {\n    return this.fileService.uploadMulti(files);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/get-conversation.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllPostOfUserDto.html":{"url":"classes/GetAllPostOfUserDto.html","title":"class - GetAllPostOfUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllPostOfUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/get-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/get-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllPostOfUserDto {\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport type { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void): void {\n    console.log(`Request ${req}...`);\n    console.log(`Response ${res}...`);\n    return next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/sigin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../entities/user.entity';\n\nexport class LoginDto extends PickType(UserEntity, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesGateway.html":{"url":"classes/MessagesGateway.html","title":"class - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                typing\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(conversationId: string, createMessageDto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinConversation')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(conversationId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  WebSocketServer,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\n\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n  @WebSocketServer() server: Server;\n  constructor(private readonly messagesService: MessagesService) {}\n\n  @SubscribeMessage('joinConversation')\n  joinConversation(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('senderId') senderId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    return this.messagesService.joinConversation(\n      conversationId,\n      senderId,\n      client.id,\n    );\n  }\n\n  @SubscribeMessage('findAllMessages')\n  findAllMessages(@MessageBody('conversationId') conversationId: string) {\n    return this.messagesService.findAllMessages(conversationId);\n  }\n\n  @SubscribeMessage('createMessage')\n  async createMessage(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody() createMessageDto: CreateMessageDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const message = await this.messagesService.createMessage(\n      conversationId,\n      createMessageDto,\n      client.id,\n    );\n    this.server.emit('message', message);\n    return message;\n  }\n\n  @SubscribeMessage('typing')\n  async typing(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('isTyping') isTyping: boolean,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const name = await this.messagesService.getMember(\n      conversationId,\n      client.id,\n    );\n\n    client.broadcast.emit('typing', { senderId: name, isTyping });\n  }\n\n  @SubscribeMessage('updateMessage')\n  updateMessage(@MessageBody() updateMessageDto: UpdateMessageDto) {\n    const refresh = this.messagesService.updateMessage(updateMessageDto);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n\n  @SubscribeMessage('removeMessage')\n  async remove(@MessageBody() message: string) {\n    const refresh = await this.messagesService.remove(message);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                getMember\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMessage\n                        \n                    \n                \n            \n            \n                \ncreateMessage(conversationId: string, createMessageDto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { id: any; senderId: any; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMember\n                        \n                    \n                \n            \n            \n                \ngetMember(conversationId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class MessagesService {\n  conversations = [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ];\n\n  joinConversation(conversationId: string, senderId: string, clientId: string) {\n    this.conversations.find((element) => element.id === conversationId).members[\n      clientId\n    ] = senderId;\n    return Object.values(\n      this.conversations.find((element) => element.id === conversationId)\n        .members,\n    );\n  }\n\n  findAllMessages(conversationId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .messages;\n  }\n\n  getMember(conversationId: string, clientId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .members[clientId];\n  }\n\n  createMessage(\n    conversationId: string,\n    createMessageDto: CreateMessageDto,\n    clientId: string,\n  ) {\n    const message = {\n      id: uuid(),\n      senderId: this.getMember(conversationId, clientId),\n      text: createMessageDto.text,\n    };\n    this.conversations\n      .find((element) => element.id === conversationId)\n      .messages.push(message);\n    return message;\n  }\n\n  updateMessage(updateMessageDto: UpdateMessageDto) {\n    this.conversations.forEach((element) => {\n      if (element.id === updateMessageDto['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === updateMessageDto['messageId']) {\n            item.text = updateMessageDto['text'];\n          }\n        });\n      }\n    });\n    return this.findAllMessages(updateMessageDto['conversationId']);\n  }\n\n  async remove(message: string) {\n    this.conversations.forEach((element) => {\n      if (element.id === message['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === message['messageId']) {\n            element.messages.splice(element.messages.indexOf(item), 1);\n          }\n        });\n      }\n    });\n\n    return this.findAllMessages(message['conversationId']);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/pagination.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PickType } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class PaginationDto extends PickType(ProfileEntity, [\n  'current',\n  'limit',\n  'order',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                favouritorId\n                            \n                            \n                                files\n                            \n                            \n                                postId\n                            \n                            \n                                reactionType\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, IsNumber, IsString } from 'class-validator';\n\nexport class PostEntity {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  files: string[];\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:142\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id (all)'})@ApiOkResponse({description: 'Success'})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:162\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(dto: GetAllPostOfUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllPostOfUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n  ParseUUIDPipe,\n  Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { Public } from '../auth/decorators';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  UpdatePostDto,\n  ReactionsPost,\n  GetAllPostOfUserDto,\n} from './dto';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment';\n\n@ApiTags('Posts')\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({ description: 'Not found' })\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('posts')\nexport class PostsController {\n  constructor(private postsService: PostsService) {}\n\n  @Post()\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Get all posts of user by user-id (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  @ApiCreatedResponse({ description: 'Create new post successfuly' })\n  async createPost(@Body() dto: CreatePostDto) {\n    return this.postsService.createPost(dto);\n  }\n\n  @Post('private/all')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get all public and private posts of user (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getAllPostsOfUser(@Body() dto: GetAllPostOfUserDto) {\n    return this.postsService.getAllPostsOfUser(dto);\n  }\n\n  @Get(':userId/all')\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all public posts of user by user-id (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getAllPublicPosts(@Param('userId') userId: string) {\n    return this.postsService.getAllPublicPosts(userId);\n  }\n\n  @Get(':postId')\n  @Public()\n  @ApiOperation({ summary: 'Get one post of user (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getOnePostById(@Param('postId', new ParseUUIDPipe()) postId: string) {\n    return this.postsService.getOnePostById(postId);\n  }\n\n  @Patch('update')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update one post of user (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updatePost(@Body() dto: UpdatePostDto) {\n    return this.postsService.updatePost(dto);\n  }\n\n  @Delete('delete')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete one post of user (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deletePost(@Body() dto: DeleteOnePost) {\n    return this.postsService.deletePost(dto);\n  }\n\n  @Post('reaction')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'React to post of user (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async reactionPost(@Body() dto: ReactionsPost) {\n    return this.postsService.reactionPost(dto);\n  }\n\n  @Public()\n  @Get(':postId/comments')\n  @ApiOperation({ summary: 'Get all comments of the post (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getAllComments(@Param('postId', new ParseUUIDPipe()) postId: string) {\n    console.log(postId);\n    return this.postsService.getAllComments(postId);\n  }\n\n  @Post('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Add a new comment to post of user (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async addComment(@Body() dto: CreateCommentDto) {\n    return this.postsService.addComment(dto);\n  }\n\n  @Put('comments/update/text')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update a comment in post (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateComment(@Body() dto: UpdateCommentTextDto) {\n    return this.postsService.updateComment(dto);\n  }\n\n  @Delete('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete a comment in post (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deleteComment(@Body() dto: DeleteCommentDto) {\n    return this.postsService.deleteComment(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:220\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:250\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:161\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(dto: GetAllPostOfUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllPostOfUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  GetAllPostOfUserDto,\n  ReactionsPost,\n  UpdatePostDto,\n} from './dto';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prismaService: PrismaService) {}\n  async createPost(dto: CreatePostDto) {\n    const findUser = await this.prismaService.user.findUnique({\n      where: {\n        id: dto.authorId,\n      },\n    });\n\n    if (!findUser) {\n      return new NotFoundException('User not found');\n    }\n\n    const post = await this.prismaService.post.create({\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n        authorId: dto.authorId,\n        // categories: {\n        //   create: [\n        //     {\n        //       createAt: new Date(),\n        //       category: {\n        //         create: {\n        //           id: uuid(),\n        //           name: 'New category',\n        //         },\n        //       },\n        //     },\n        //   ],\n        // },\n      },\n    });\n    return post;\n  }\n\n  async getAllPostsOfUser(dto: GetAllPostOfUserDto) {\n    const list = await this.prismaService.user.findMany({\n      where: {\n        id: dto.userId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    if (!list) {\n      return new NotFoundException('User not found');\n    }\n    if (list.length === 0) {\n      return new NotFoundException('User not have post!');\n    }\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: dto.userId,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getAllPublicPosts(userId: string) {\n    const list = await this.prismaService.user.findMany({\n      where: {\n        id: userId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    if (!list) {\n      return new NotFoundException('User not found');\n    }\n    if (list.length === 0) {\n      return new NotFoundException('User not have post!');\n    }\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: userId,\n        published: true,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getOnePostById(postId: string) {\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n    });\n  }\n\n  async updatePost(dto: UpdatePostDto) {\n    const list = await this.getOnePostById(dto.postId);\n\n    if (!list) {\n      return new NotFoundException('Post not found');\n    }\n\n    if (list.authorId !== dto.authorId) {\n      return new ForbiddenException('You are not author of this post');\n    }\n\n    return await this.prismaService.post.update({\n      where: {\n        id: dto.postId,\n      },\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n      },\n    });\n  }\n\n  async deletePost(dto: DeleteOnePost) {\n    const list = await this.prismaService.user.findUnique({\n      where: {\n        id: dto.authorId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    const identify = list.writtenPosts.find((post) => post.id === dto.postId);\n    if (!identify) {\n      return new NotFoundException('Post not found');\n    }\n\n    await this.prismaService.post.delete({\n      where: {\n        id: dto.postId,\n      },\n    });\n    return '';\n  }\n\n  async reactionPost(dto: ReactionsPost) {\n    const checkExist = await this.prismaService.reaction.findMany({\n      where: {\n        postId: dto.postId,\n        userId: dto.favouritorId,\n      },\n    });\n\n    if (checkExist.length > 0) {\n      return new BadRequestException('You already reacted to this post');\n    }\n    return await this.prismaService.reaction.create({\n      data: {\n        userId: dto.favouritorId,\n        postId: dto.postId,\n        type: dto.reactionType,\n      },\n    });\n  }\n\n  async getAllComments(postId: string) {\n    console.log(postId);\n\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n      select: {\n        comments: true,\n      },\n    });\n  }\n\n  async addComment(dto: CreateCommentDto) {\n    const checkPost = await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n    });\n\n    if (!checkPost) {\n      return new NotFoundException('Post not found');\n    }\n    return this.prismaService.comment.create({\n      data: {\n        text: dto.text,\n        postId: dto.postId,\n        authorId: dto.userId,\n      },\n    });\n  }\n\n  async updateComment(dto: UpdateCommentTextDto) {\n    return await this.prismaService.comment.update({\n      where: {\n        id: dto.id,\n      },\n      data: {\n        text: dto.text,\n      },\n    });\n  }\n\n  async deleteComment(dto: DeleteCommentDto) {\n    await this.prismaService.comment.delete({\n      where: {\n        id: dto.id,\n      },\n    });\n    return '';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService, ConfigModule],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor() {\n    super({\n      datasources: {\n        db: {\n          url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n          // url: process.env.DATABASE_URL,\n        },\n      },\n    });\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileEntity.html":{"url":"classes/ProfileEntity.html","title":"class - ProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                current\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                limit\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                order\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:131\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:108\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 1, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 10, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, description: 'asc, desc', example: 'asc', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:103\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsDate,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { fullNameValidator, phoneNumberValidator } from 'src/core/validators';\n\nexport class ProfileEntity {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({ type: Number, example: 1, nullable: true })\n  current: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({ type: Number, example: 10, nullable: true })\n  limit: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    description: 'asc, desc',\n    example: 'asc',\n    nullable: true,\n  })\n  order: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Hello ABC',\n  })\n  @IsString()\n  @Length(3, 45)\n  @MinLength(2, {\n    message: 'Full name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(46, {\n    message: 'Name is too long, must be at most 45 characters!',\n  })\n  @Validate(fullNameValidator, {\n    message: 'Full name must be not begin with number!',\n  })\n  fullName: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  avatar: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  cover: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Single',\n  })\n  @IsString()\n  marriageStatus: string;\n\n  @ApiProperty({\n    type: [],\n    example: ['Music', 'Sport', 'Travel'],\n  })\n  @IsArray()\n  interests: [];\n\n  @ApiProperty({\n    type: String,\n    example: '123, Address A, City B, Country C',\n  })\n  @IsString()\n  @MaxLength(101, {\n    message: 'Address is too long, must be at most 100 characters!',\n  })\n  address: string;\n\n  @ApiProperty({\n    type: String,\n    example: '09999999999',\n  })\n  @IsString()\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n  phone: string;\n\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\n  @Type(() => Date)\n  @IsDate()\n  birthdate: Date;\n\n  @ApiProperty({\n    type: Number,\n    example: 19,\n  })\n  @IsNumber()\n  @Min(17, {\n    message: 'You must be at least 18 years old!',\n  })\n  @Max(101, {\n    message: 'You must be at most 100 years old!',\n  })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    example: 'This is bio of Hello ABC account',\n  })\n  @IsString()\n  @MaxLength(151, {\n    message: 'Bio is too long, must be at most 150 characters!',\n  })\n  bio: string;\n\n  @ApiProperty({\n    type: Number,\n    description: '1: male, 2: female, 0: other',\n    example: 1,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(2)\n  gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE } from './roles.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    // return false;\n    const { request } = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () => user.roles.some((role) => user.roles.includes(role));\n\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class RtGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n  constructor(\n    @Inject(ConfigService)\n    private config: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('authorization').replace('Bearer', '').trim();\n    return {\n      ...payload,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/signup.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../entities/user.entity';\n\nexport class SignupDto extends PickType(UserEntity, [\n  'email',\n  'password',\n  'username',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(timeout(1000));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/update-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMessageDto } from './create-message.dto';\n\nexport class UpdateMessageDto extends PartialType(\n  CreateMessageDto,\n) {\n  id: string;\n  conversationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/password.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../entities/user.entity';\n\nexport class UpdatePasswordDto extends PickType(UserEntity, [\n  'email',\n  'oldPassword',\n  'newPassword',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAvatarDto.html":{"url":"classes/UserAvatarDto.html","title":"class - UserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/user-avatar.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCoverDto.html":{"url":"classes/UserCoverDto.html","title":"class - UserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/user-cover.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123'})@IsString()@IsNotEmpty()@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class UserEntity {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  @Length(8, 21)\n  @MinLength(7, {\n    message: 'Password is too short, must be at least 8 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Password is too long, must be at most 20 characters!',\n  })\n  @Validate(passwordValidator, {\n    message:\n      'Password must be at contain at least one number, one uppercase letter and one special character',\n  })\n  password: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'username123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Username must be not begin with number!',\n  })\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileDto.html":{"url":"classes/UserProfileDto.html","title":"class - UserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/users-profile.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ProfileEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                current\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                limit\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                order\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:95\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:63\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:131\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:108\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:71\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 1, nullable: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:23\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:55\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:141\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:85\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 10, nullable: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:28\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:78\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, description: 'asc, desc', example: 'asc', nullable: true})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:38\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:103\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('profile/:userIdOrUsername')@ApiOperation({summary: 'Get public user by user-id or username (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find/:email')@ApiOperation({summary: 'Find user account by email'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user-id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { GetCurrentUserId, Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto';\nimport { UserAvatarDto, UserCoverDto, UserProfileDto } from './dto';\nimport { UsersService } from './users.service';\nimport {\n  IFindUserByEmail,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from './dto/response';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {\n    this.usersService = usersService;\n  }\n\n  @Public()\n  @Get('profile/:userIdOrUsername')\n  @ApiOperation({ summary: 'Get public user by user-id or username (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getPublicUserByIdOrUsername(\n    @Param('userIdOrUsername') userIdOrUsername: string,\n  ): Promise {\n    return this.usersService.getPublicUserByIdOrUsername(userIdOrUsername);\n  }\n\n  @Public()\n  @Get('find/:email')\n  @ApiOperation({ summary: 'Find user account by email' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getUserByEmail(\n    @Param('email') email: string,\n  ): Promise {\n    return this.usersService.getUserByEmail(email);\n  }\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Get user profile by user-id (all)',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getUserProfile(\n    @GetCurrentUserId() userId: string,\n  ): Promise {\n    return this.usersService.getUserProfile(userId);\n  }\n\n  @Patch('profile')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async updateUsersProfile(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UserProfileDto,\n  ): Promise {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('profile/avatar')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersAvatar(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UserAvatarDto,\n  ): Promise {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('profile/cover')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image by user id' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersCover(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UserCoverDto,\n  ): Promise {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('profile')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user profile by email & password' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async deleteUser(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: LoginDto,\n  ): Promise {\n    return this.usersService.deleteUser(userId, dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [PrismaModule, AuthModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    // consumer\n    //   .apply(ExistedUserMiddleware)\n    //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:185\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:217\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:127\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  NotAcceptableException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport {\n  PaginationDto,\n  UserAvatarDto,\n  UserCoverDto,\n  UserProfileDto,\n} from './dto';\nimport {\n  IAllUsers,\n  IFindUserByEmail,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from './dto/response';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prismaService: PrismaService) {}\n\n  async getAllUsers(dto: PaginationDto): Promise {\n    const total = await this.prismaService.user.count();\n    const users = await this.prismaService.user.findMany({\n      // skip: Number(dto.limit) * (Number(dto.current) - 1),\n      take: Number(dto.limit) || 10,\n      orderBy: {\n        id: dto.order as any,\n      },\n      select: {\n        id: true,\n        email: true,\n        username: true,\n        createdAt: true,\n      },\n    });\n    return {\n      total,\n      orderBy: dto.order || 'asc',\n      pageItems: users.length,\n      pageLimit: Number(dto.limit) || 10,\n      pageCurrent: Number(dto.current) || 1,\n      users: users,\n    };\n  }\n\n  async getPublicUserByIdOrUsername(\n    userIdOrUsername: string,\n  ): Promise {\n    const identify = await this.prismaService.user.findMany({\n      where: {\n        OR: [{ id: userIdOrUsername }, { username: userIdOrUsername }],\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n      },\n    });\n    if (identify.length === 0) throw new NotFoundException('User not found');\n    return identify[0];\n  }\n\n  async getUserByEmail(email: string): Promise {\n    const identify = await this.prismaService.user.findUnique({\n      where: {\n        email: email,\n      },\n      select: {\n        username: true,\n        email: true,\n      },\n    });\n\n    if (!identify) throw new NotFoundException('User not found');\n    return identify;\n  }\n\n  async getUserProfile(userId: string): Promise {\n    const profile = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n\n    if (!profile) throw new NotFoundException('User not found');\n    return profile;\n  }\n\n  async updateUsersProfile(\n    userId: string,\n    dto: UserProfileDto,\n  ): Promise {\n    await this.prismaService.userProfile.upsert({\n      where: {\n        userId: userId,\n      },\n      create: {\n        ...dto,\n        userId: userId,\n      },\n      update: {\n        ...dto,\n      },\n    });\n    const newProfile = await this.getPublicUserByIdOrUsername(userId);\n    return newProfile;\n  }\n\n  async updateUsersAvatar(\n    userId: string,\n    dto: UserAvatarDto,\n  ): Promise {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newAvatar = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        profile: {\n          select: {\n            avatar: true,\n          },\n        },\n      },\n    });\n    return newAvatar;\n  }\n\n  async updateUsersCover(\n    userId: string,\n    dto: UserCoverDto,\n  ): Promise {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newCover = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        profile: {\n          select: {\n            cover: true,\n          },\n        },\n      },\n    });\n    return newCover;\n  }\n\n  async deleteUser(userId: string, dto: LoginDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        email: true,\n        password: true,\n      },\n    });\n\n    if (!user) throw new ForbiddenException('Access denied');\n\n    const matchEmail: number = dto.password.localeCompare(user.password);\n    const matchPassword: boolean = await comparePassword(\n      dto.password,\n      user.password,\n    );\n\n    if (matchEmail === 0 || !matchPassword)\n      throw new ForbiddenException('Access denied');\n\n    if (!matchPassword) throw new NotAcceptableException('Password not match!');\n\n    await this.prismaService.userProfile.delete({\n      where: {\n        userId: userId,\n      },\n    });\n    return 'User deleted';\n  }\n\n  async deleteUserById(userId: string): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException('User not found!');\n\n    await this.prismaService.user.delete({\n      where: {\n        id: userId,\n      },\n    });\n    return 'User deleted';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            CHECK_PHONE_GET_OTP\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            DATA_DELETED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_BLOCK_WHEN_IS_NOT_VERIFIED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_CREATE_USER_HOBBY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_DELETE_HOBBY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_FIND_IMAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_GET_USER_ALBUM\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_GET_USER_HOBBIES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_GET_USER_IMAGES\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_SAVE_USER_IMAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_SAVE_USER_IMAGE_IN_CLOUD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CAN_NOT_UPDATE_USER_PROFILE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_CHANGE_USER_AVATAR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_DATA_EXISTED_PLEASE_USING_UPDATE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_DATA_NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_EMAIL_CONFLICT\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_EXCEED_MAX_FAVORITE_IMAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_HOBBY_NAME_ALREADY_EXISTED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_HOBBY_NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_IN_DELETE_IMAGE_CLOUD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_INTERNAL_SERVER\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_MISSING_FIELD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_UNKNOWN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_USER_EXISTED\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_USER_NOT_EXIST\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_USER_NOT_FOUND\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_USER_NOT_MATCH_WITH_HOBBY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_USER_NOT_MATCH_WITH_IMAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_WRONG_USERNAME_OR_PASSWORD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            ERROR_YOUR_ALBUM_IS_FULL\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            MATCH_YOU\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            SOMEONE_LIKE_YOU\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorAcceptableException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorBadGatewayException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorBadRequestException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorForbiddenException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorGatewayTimeoutException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorInternalServerException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorMethodNotAllowedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorRequestTimeoutException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorServiceUnavailableException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorUnauthorizedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorUnsupportedMediaTypeException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/exception.interceptor.ts\n            \n            injectable\n            ErrorsIntereptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/helmet.middleware.ts\n            \n            function\n            helmetMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/utils/delay.ts\n            \n            function\n            wait\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/random.ts\n            \n            function\n            randomInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            class\n            MessagesGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/get-post.dto.ts\n            \n            class\n            GetAllPostOfUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/user-avatar.dto.ts\n            \n            class\n            UserAvatarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/user-cover.dto.ts\n            \n            class\n            UserCoverDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/users-profile.dto.ts\n            \n            class\n            UserProfileDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/profile.entity.ts\n            \n            class\n            ProfileEntity\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.2.1\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : ^4.2.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AlcoholEnum   (src/.../enum.ts)\n                        \n                        \n                            EducationEnum   (src/.../enum.ts)\n                        \n                        \n                            GenderEnum   (src/.../enum.ts)\n                        \n                        \n                            MaritalStatusEnum   (src/.../enum.ts)\n                        \n                        \n                            NotificationEnum   (src/.../enum.ts)\n                        \n                        \n                            Order   (src/.../enum.ts)\n                        \n                        \n                            OtpStatusEnum   (src/.../enum.ts)\n                        \n                        \n                            ReligionEnum   (src/.../enum.ts)\n                        \n                        \n                            ROLE   (src/.../roles.enum.ts)\n                        \n                        \n                            SocialEnum   (src/.../enum.ts)\n                        \n                        \n                            UpdateUserProfileEnum   (src/.../enum.ts)\n                        \n                        \n                            UserRolesEnum   (src/.../enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/enum.ts\n    \n        \n            \n                \n                    \n                        \n                        AlcoholEnum\n                    \n                \n                        \n                            \n                                 SOMETIMES\n                            \n                        \n                        \n                            \n                                Value : sometime\n                            \n                        \n                        \n                            \n                                 USUALLY\n                            \n                        \n                        \n                            \n                                Value : usually\n                            \n                        \n                        \n                            \n                                 NEVER\n                            \n                        \n                        \n                            \n                                Value : never\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EducationEnum\n                    \n                \n                        \n                            \n                                 PRIMARY\n                            \n                        \n                        \n                            \n                                Value : primary\n                            \n                        \n                        \n                            \n                                 SECONDARY\n                            \n                        \n                        \n                            \n                                Value : secondary\n                            \n                        \n                        \n                            \n                                 HIGH_SCHOOL\n                            \n                        \n                        \n                            \n                                Value : high_school\n                            \n                        \n                        \n                            \n                                 COLLEGE\n                            \n                        \n                        \n                            \n                                Value : college\n                            \n                        \n                        \n                            \n                                 UNIVERSITY\n                            \n                        \n                        \n                            \n                                Value : university\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        GenderEnum\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n                        \n                            \n                                Value : femail\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        MaritalStatusEnum\n                    \n                \n                        \n                            \n                                 SINGLE\n                            \n                        \n                        \n                            \n                                Value : single\n                            \n                        \n                        \n                            \n                                 MARRIED\n                            \n                        \n                        \n                            \n                                Value : married\n                            \n                        \n                        \n                            \n                                 DIVORCED\n                            \n                        \n                        \n                            \n                                Value : divorced\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        NotificationEnum\n                    \n                \n                        \n                            \n                                 LIKE\n                            \n                        \n                        \n                            \n                                Value : like\n                            \n                        \n                        \n                            \n                                 MESSAGE\n                            \n                        \n                        \n                            \n                                Value : message\n                            \n                        \n                        \n                            \n                                 MATCH\n                            \n                        \n                        \n                            \n                                Value : match\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Order\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        OtpStatusEnum\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : approved\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : canceled\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ReligionEnum\n                    \n                \n                        \n                            \n                                 BUDDHISM\n                            \n                        \n                        \n                            \n                                Value : buddhism\n                            \n                        \n                        \n                            \n                                 GOD\n                            \n                        \n                        \n                            \n                                Value : god\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 NON_RELIGIONS\n                            \n                        \n                        \n                            \n                                Value : non-religion\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        SocialEnum\n                    \n                \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UpdateUserProfileEnum\n                    \n                \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 GENDER\n                            \n                        \n                        \n                            \n                                Value : gender\n                            \n                        \n                        \n                            \n                                 DESCRIPTION\n                            \n                        \n                        \n                            \n                                Value : description\n                            \n                        \n                        \n                            \n                                 CHILDREN\n                            \n                        \n                        \n                            \n                                Value : children\n                            \n                        \n                        \n                            \n                                 ALCOHOL\n                            \n                        \n                        \n                            \n                                Value : alcohol\n                            \n                        \n                        \n                            \n                                 RELIGION\n                            \n                        \n                        \n                            \n                                Value : religion\n                            \n                        \n                        \n                            \n                                 HEIGHT\n                            \n                        \n                        \n                            \n                                Value : height\n                            \n                        \n                        \n                            \n                                 MARITAL_STATUS\n                            \n                        \n                        \n                            \n                                Value : maritalStatus\n                            \n                        \n                        \n                            \n                                 EDUCATION\n                            \n                        \n                        \n                            \n                                Value : education\n                            \n                        \n                        \n                            \n                                 PURPOSEID\n                            \n                        \n                        \n                            \n                                Value : purposeId\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        UserRolesEnum\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n    src/core/roles/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            helmetMiddleware   (src/.../helmet.middleware.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            randomInt   (src/.../random.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                        \n                            wait   (src/.../delay.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/middlewares/helmet.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        helmetMiddleware\n                        \n                    \n                \n            \n            \n                \nhelmetMiddleware(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     INestApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/random.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        randomInt\n                        \n                    \n                \n            \n            \n                \nrandomInt(min: number, max: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/delay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\nAPI document\n\n\n\n\n\nDatabase diagram\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\nAdvancing about REST API and WebSocket\n\nFeatures\n\n\n\nAdmin\nAuth\nFiles\n\n\n\n\n✅ Get list all users\n✅  Signup\n✅  Upload single file (avatar, cover)\n\n\n✅ Get user profile by id\n✅  Signin\n✅  Upload multi files\n\n\n✅ Update user profile\n✅  Signout\n✅  Upload array-field files (post, sample_image)\n\n\n✅ Update user profile\n✅  Refresh access-token\n\n\n\n✅ Delete user by user-id\n✅  Update password\n\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅ Get public user by user-id or username\n✅  Create a new post\n\n\n✅ Find user account by email\n✅  Get all posts of user by user-id\n\n\n✅ Get user profile by id\n✅  Match a new category with new post\n\n\n✅ Update user profile\n✅ Get a post by post-id\n\n\n✅ Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n\n✅ Reaction to post\n\n\n\n✅ Get all comments of post\n\n\n\n✅ Add a new comment to post\n\n\n\n✅ Update a comment of post\n\n\n\n✅ Delete a comment of post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅ Create new conversation\n✅  Join conversation by conversation-id\n\n\n✅ Get all conversations of user\n✅  Get all messages in conversation\n\n\n✅ Get one conversation information has current user\n✅  Create new messages\n\n\n✅ Update members to current conversation\n✅ Update message by message-id\n\n\n✅ Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅ Delete admin out of current conversation by creator\n\n\n\n✅ Delete conversation by creator\n\n\n\n✅ Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nNest example\nNest awesome\nNest structure\nPostgre x Heroku\nNest x Prisma\nDatabase for chat\nDatabase for social\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nprisma db pull\n\n# generate the Prisma Client\nprisma generate# Create env and migrate db\nnpx prisma migrate dev --create-only# Open prisma studio\nnpx prisma studio# Sync migrate change to db\nnpx prisma db pushRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    54 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.5.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CHECK_PHONE_GET_OTP   (src/.../status-message.ts)\n                        \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            DATA_DELETED   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_BLOCK_WHEN_IS_NOT_VERIFIED   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_CREATE_USER_HOBBY   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_DELETE_HOBBY   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_FIND_IMAGE   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_GET_USER_ALBUM   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_GET_USER_HOBBIES   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_GET_USER_IMAGES   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_SAVE_USER_IMAGE   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_SAVE_USER_IMAGE_IN_CLOUD   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CAN_NOT_UPDATE_USER_PROFILE   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_CHANGE_USER_AVATAR   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_DATA_EXISTED_PLEASE_USING_UPDATE   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_DATA_NOT_FOUND   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_EMAIL_CONFLICT   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_EXCEED_MAX_FAVORITE_IMAGE   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_HOBBY_NAME_ALREADY_EXISTED   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_HOBBY_NOT_FOUND   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_IN_DELETE_IMAGE_CLOUD   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_INTERNAL_SERVER   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_MISSING_FIELD   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_UNKNOWN   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_USER_EXISTED   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_USER_NOT_EXIST   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_USER_NOT_FOUND   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_USER_NOT_MATCH_WITH_HOBBY   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_USER_NOT_MATCH_WITH_IMAGE   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_WRONG_USERNAME_OR_PASSWORD   (src/.../status-message.ts)\n                        \n                        \n                            ERROR_YOUR_ALBUM_IS_FULL   (src/.../status-message.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.ts)\n                        \n                        \n                            MATCH_YOU   (src/.../status-message.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            SOMEONE_LIKE_YOU   (src/.../status-message.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/status-message.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CHECK_PHONE_GET_OTP\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'check_phone_get_otp'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATA_DELETED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'data_deleted'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_BLOCK_WHEN_IS_NOT_VERIFIED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_block_when_is _not_verified'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_CREATE_USER_HOBBY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_create_user_hobby'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_DELETE_HOBBY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_delete_hobby'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_FIND_IMAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_find_image'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_GET_USER_ALBUM\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_get_user_album'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_GET_USER_HOBBIES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_get_user_hobbies'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_GET_USER_IMAGES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_get_user_images'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_SAVE_USER_IMAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_save_user_image'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_SAVE_USER_IMAGE_IN_CLOUD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_save_user_image_in_cloud'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CAN_NOT_UPDATE_USER_PROFILE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'can_not_update_user_profile'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_CHANGE_USER_AVATAR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'error_change_user_avatar'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_DATA_EXISTED_PLEASE_USING_UPDATE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'error_data_existed_please_using_update'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_DATA_NOT_FOUND\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'error_data_not_found'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_EMAIL_CONFLICT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ERROR_EMAIL_CONFLICT'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_EXCEED_MAX_FAVORITE_IMAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'exceed_max_favorite_image'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_HOBBY_NAME_ALREADY_EXISTED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hobby_already_existed'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_HOBBY_NOT_FOUND\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'hobby_not_found'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_IN_DELETE_IMAGE_CLOUD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'error_in_delete_image_cloud'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_INTERNAL_SERVER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'error_internal_server'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_MISSING_FIELD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'missing_field'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_UNKNOWN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'error_unknown'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_USER_EXISTED\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'error_user_existed'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_USER_NOT_EXIST\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ERROR_USER_NOT_EXIST'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_USER_NOT_FOUND\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user_not_found'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_USER_NOT_MATCH_WITH_HOBBY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user_not_match_with_hobby'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_USER_NOT_MATCH_WITH_IMAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'user_not_match_with_image'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_WRONG_USERNAME_OR_PASSWORD\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'wrong_username_or_password'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ERROR_YOUR_ALBUM_IS_FULL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'your_album_is_full'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MATCH_YOU\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'match_you'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SOMEONE_LIKE_YOU\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'someone_like_you'\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n  let option;\n\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n    option = { origin: true };\n  } else {\n    option = { origin: false };\n  }\n  callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n  const config: ConfigService = app.get(ConfigService);\n\n  const swaggerConfig = new DocumentBuilder()\n    .setTitle('Teneno API')\n    .setDescription(\n      `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n    )\n    .setContact(\n      'Thuong Truong',\n      'https://github.com/thuongtruong1009',\n      'ititiu19228@student.hcmiu.edu.vn',\n    )\n    .addServer(config.get('BASE_URL'))\n    .addServer(config.get('HOST_URL'))\n    .setVersion('1.5.0')\n    .addTag('cats', 'default description')\n    .addBearerAuth({\n      type: 'http',\n      scheme: 'Bearer',\n      bearerFormat: 'JWT',\n      description: 'Paste a valid access token here.',\n      in: 'Header',\n    })\n    .addBasicAuth()\n    .addSecurity('api_key', {\n      type: 'apiKey',\n      name: 'api_key',\n      in: 'header',\n    })\n    .build();\n\n  const options: ISwaggerOptions = {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  };\n  const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n  SwaggerModule.setup('api', app, document, {\n    swaggerOptions: {\n      persistAuthorization: true,\n    },\n  });\n}\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: ROLE[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
