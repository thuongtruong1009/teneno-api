var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Admin.html",[0,0.228,1,2.23]],["body/classes/Admin.html",[0,0.357,1,4.052,2,1.266,3,0.189,4,0.189,5,0.17,6,5.783,7,0.208,8,0.01,9,0.01,10,0.01]],["title/controllers/AdminController.html",[11,1.71,12,3.091]],["body/controllers/AdminController.html",[0,0.278,1,2.718,3,0.147,4,0.147,5,0.132,7,0.162,8,0.011,9,0.008,10,0.008,11,2.084,12,4.82,13,2.084,14,4.497,15,2.605,16,0.271,17,0.927,18,4.01,19,4.01,20,4.01,21,4.01,22,4.01,23,4.01,24,4.01,25,4.01,26,2.98,27,4.01,28,4.01,29,1.279,30,3.135,31,3.768,32,4.497,33,4.497,34,2.417,35,4.08,36,4.08,37,3.519,38,0.486,39,3.476,40,3.312,41,4.08,42,3.768,43,3.768,44,4.497,45,3.768,46,2.605,47,3.768,48,4.08,49,4.497,50,4.08,51,3.768,52,3.768,53,3.312,54,4.497,55,4.497]],["title/modules/AdminModule.html",[56,1.41,57,2.887]],["body/modules/AdminModule.html",[0,0.289,1,2.829,3,0.153,4,0.153,5,0.138,7,0.168,8,0.011,9,0.009,10,0.009,12,5.415,13,2.735,16,0.299,17,0.965,56,2.255,57,5.739,58,2.412,59,3.157,60,4.681,61,4.681,62,4.681,63,4.731,64,5.589,65,3.566,66,2.829,67,2.604,68,5.34,69,3.282,70,5.415,71,4.113,72,5.34,73,5.34,74,4.247,75,4.681]],["title/injectables/AdminService.html",[64,2.887,76,0.784]],["body/injectables/AdminService.html",[0,0.324,3,0.171,4,0.171,5,0.154,7,0.189,8,0.011,9,0.009,10,0.009,16,0.271,17,1.083,38,0.568,64,4.957,76,1.346,77,2.136,78,5.25,79,2.609,80,4.109,81,4.254,82,0.662,83,5.99,84,1.255,85,0.899,86,1.149,87,4.763,88,2.434]],["title/controllers/AdminUsersController.html",[11,1.71,70,3.091]],["body/controllers/AdminUsersController.html",[0,0.135,1,1.317,3,0.071,4,0.071,5,0.064,7,0.078,8,0.011,9,0.005,10,0.005,11,1.01,13,1.01,15,1.262,16,0.256,17,0.449,18,3.63,19,2.386,20,2.386,21,2.386,22,2.386,23,2.386,24,2.386,25,2.386,26,1.444,27,2.386,28,2.386,29,0.62,30,1.519,31,1.826,32,2.179,33,2.179,34,2.23,35,1.977,36,1.977,37,1.705,38,0.625,39,2.069,40,1.605,41,1.977,42,1.826,43,1.826,44,2.179,45,1.826,46,1.262,47,1.826,48,1.977,49,2.179,50,1.977,51,1.826,52,1.826,53,1.605,54,2.179,55,2.179,70,2.868,82,0.697,84,1.321,85,0.947,86,1.21,88,1.01,89,5.781,90,2.179,91,0.245,92,0.795,93,2.657,94,3.423,95,3.423,96,3.835,97,4.293,98,3.835,99,3.835,100,2.179,101,1.483,102,2.248,103,2.486,104,3.309,105,2.815,106,3.423,107,6.53,108,2.486,109,2.921,110,1.246,111,3.783,112,2.179,113,3.749,114,2.486,115,2.521,116,3.016,117,2.486,118,2.486,119,3.884,120,1.977,121,2.486,122,3.542,123,2.486,124,2.486,125,3.174,126,2.486,127,2.486,128,2.486,129,1.977,130,3.174,131,2.486,132,1.701,133,3.905,134,2.486,135,1.977,136,3.174,137,2.486,138,2.163,139,2.486,140,3.749,141,1.519,142,1.377,143,3.542,144,1.826,145,1.826,146,1.977,147,4.258,148,4.03,149,2.179,150,2.179,151,2.486,152,2.179,153,1.977,154,1.977,155,1.977,156,1.977,157,2.486,158,2.947,159,2.486,160,1.605,161,2.486,162,3.853,163,1.605,164,3.853,165,2.486,166,1.527,167,2.486,168,2.486,169,1.269,170,3.423,171,2.179,172,2.486,173,2.179,174,2.486,175,2.868,176,2.179,177,2.486,178,2.179,179,2.486,180,2.486,181,2.486]],["title/classes/AllExceptionsFilter.html",[0,0.228,182,3.347]],["body/classes/AllExceptionsFilter.html",[0,0.191,2,0.677,3,0.101,4,0.101,5,0.091,7,0.111,8,0.011,9,0.007,10,0.007,16,0.223,17,0.638,38,0.619,39,4.3,46,3.86,52,3.737,53,3.285,79,1.538,82,0.721,84,1.368,85,0.98,86,1.252,88,1.434,91,0.348,92,1.035,110,1.179,142,1.955,182,4.046,183,3.094,184,1.934,185,5.228,186,5.721,187,4.404,188,5.088,189,4.092,190,5.965,191,3.094,192,3.988,193,3.53,194,3.285,195,4.459,196,6.398,197,5.228,198,5.721,199,3.53,200,6.978,201,4.653,202,5.088,203,3.53,204,3.53,205,4.355,206,3.53,207,5.088,208,3.53,209,3.53,210,1.87,211,2.061,212,3.094,213,3.094,214,3.094,215,3.094,216,3.53,217,3.53,218,2.467,219,6.527,220,3.53,221,3.53,222,3.53,223,5.965,224,5.721,225,3.53,226,3.53,227,3.094,228,3.094,229,1.538,230,3.094,231,3.53,232,2.422,233,3.094,234,3.53]],["title/controllers/AppController.html",[11,1.71,235,3.091]],["body/controllers/AppController.html",[0,0.267,3,0.141,4,0.141,5,0.127,7,0.156,8,0.011,9,0.008,10,0.008,11,2.6,13,2.005,15,2.506,16,0.282,17,0.892,26,2.867,29,1.231,34,2.168,37,4.391,82,0.545,88,2.005,91,0.487,92,1.302,101,1.228,102,1.76,110,0.975,116,3.25,141,3.016,142,2.734,148,3.911,160,3.187,162,3.016,164,3.016,166,1.196,218,2.282,235,4.701,236,4.326,237,6.589,238,4.936,239,4.391,240,4.936,241,5.611,242,5.611,243,3.391,244,3.391,245,4.391,246,5.09,247,4.936,248,6.401,249,4.936,250,7.104,251,4.586,252,4.326,253,4.936,254,4.936,255,4.326,256,5.611,257,4.936]],["title/modules/AppModule.html",[56,1.41,258,3.091]],["body/modules/AppModule.html",[0,0.167,3,0.088,4,0.088,5,0.08,7,0.097,8,0.011,9,0.006,10,0.007,13,1.873,16,0.309,17,0.558,38,0.293,40,3.563,46,1.568,56,1.545,57,4.714,58,1.395,59,2.163,63,3.991,65,2.443,66,1.636,67,1.506,69,2.248,71,2.818,82,0.341,84,0.647,85,0.464,86,0.592,92,0.628,110,0.61,116,2.341,163,2.977,184,1.174,189,2.118,201,2.977,232,3.786,235,4.054,251,4.437,252,2.707,258,6.184,259,2.707,260,2.707,261,2.707,262,4.437,263,4.714,264,4.714,265,4.714,266,4.714,267,4.714,268,3.806,269,3.088,270,2.707,271,4.042,272,5.366,273,3.088,274,2.707,275,4.611,276,5.519,277,2.118,278,3.088,279,3.088,280,3.387,281,3.088,282,3.088,283,3.088,284,3.088,285,2.455,286,1.993,287,3.088,288,2.268,289,3.088,290,3.088,291,3.088,292,3.088,293,3.088,294,2.268,295,3.088,296,3.088,297,2.707,298,3.088,299,3.387,300,3.088,301,3.088,302,3.088,303,1.298,304,4.611,305,4.042,306,3.088,307,3.088,308,3.088,309,3.088,310,3.088,311,3.088,312,2.455,313,3.088,314,4.611,315,2.268,316,3.088,317,3.088,318,3.088,319,2.455,320,3.088,321,4.042,322,4.042,323,3.088,324,4.042,325,3.088,326,3.088,327,4.042,328,3.667,329,4.611,330,4.042,331,3.088,332,4.611,333,3.088,334,3.088,335,1.887]],["title/injectables/AppService.html",[76,0.784,251,2.717]],["body/injectables/AppService.html",[0,0.297,3,0.157,4,0.157,5,0.141,7,0.173,8,0.011,9,0.009,10,0.009,16,0.28,17,0.991,38,0.52,76,1.275,77,1.956,79,2.389,82,0.757,84,1.149,85,0.824,86,1.052,91,0.541,92,1.393,101,1.313,110,1.084,166,1.329,187,3.352,191,4.808,192,4.775,194,4.818,237,6.85,239,3.763,241,4.808,245,3.763,246,5.444,251,4.42,336,4.808,337,5.485,338,5.485,339,5.485,340,5.485,341,5.485,342,5.485]],["title/injectables/AtGuard.html",[76,0.784,280,3.091]],["body/injectables/AtGuard.html",[0,0.269,3,0.142,4,0.142,5,0.128,7,0.157,8,0.011,9,0.008,10,0.008,16,0.267,17,0.897,38,0.609,76,1.196,77,1.769,79,2.162,82,0.71,84,1.346,85,0.965,86,1.232,88,2.016,91,0.489,92,1.307,110,0.981,116,3.616,166,1.556,211,1.715,277,3.404,280,4.718,303,2.701,319,6.355,343,4.35,344,5.63,345,4.35,346,4.962,347,5.63,348,4.375,349,4.962,350,2.882,351,4.35,352,3.404,353,1.518,354,4.35,355,3.404,356,4.962,357,4.962,358,4.962,359,4.962,360,4.962,361,4.962,362,4.962,363,3.946,364,3.946,365,4.962,366,4.962,367,4.962,368,6.423,369,4.962,370,4.35,371,4.35,372,4.962]],["title/injectables/AtStrategy.html",[76,0.784,373,2.887]],["body/injectables/AtStrategy.html",[0,0.276,3,0.146,4,0.146,5,0.131,7,0.161,8,0.011,9,0.008,10,0.008,16,0.295,17,0.922,38,0.62,76,1.218,77,1.819,79,2.222,82,0.723,84,1.37,85,0.982,86,1.254,88,2.073,91,0.503,92,1.331,110,1.008,166,1.236,286,3.294,352,3.5,353,1.561,355,3.5,373,4.485,374,4.472,375,3.32,376,4.472,377,5.221,378,5.101,379,4.803,380,6.539,381,8.051,382,5.101,383,5.2,384,4.472,385,4.472,386,4.472,387,3.747,388,4.485,389,3.5,390,4.472,391,4.472,392,4.472,393,4.472,394,5.101]],["title/controllers/AuthController.html",[11,1.71,395,3.091]],["body/controllers/AuthController.html",[0,0.15,3,0.079,4,0.079,5,0.072,7,0.088,8,0.011,9,0.005,10,0.005,11,1.128,13,1.128,15,1.41,16,0.265,17,0.502,18,3.544,19,2.601,20,2.601,21,2.601,22,2.601,23,2.601,24,2.601,25,2.601,26,1.613,27,2.601,28,2.601,29,0.692,34,2.279,38,0.672,39,1.471,82,0.691,84,1.31,85,0.939,86,1.2,88,1.128,91,0.274,92,0.866,93,2.648,97,2.601,101,1.394,102,2.352,105,2.729,109,2.356,110,1.236,111,3.765,116,2.627,119,3.35,140,1.905,141,1.697,142,1.538,145,2.04,147,4.26,148,4.032,160,1.793,162,3.821,164,3.544,166,1.515,218,0.99,229,1.854,328,2.208,389,1.905,395,3.126,396,2.434,397,5.784,398,5.462,399,3.731,400,3.731,401,3.731,402,2.434,403,2.777,404,5.174,405,4.712,406,2.777,407,2.434,408,2.777,409,2.777,410,4.256,411,2.777,412,2.434,413,3.544,414,2.777,415,4.256,416,2.777,417,2.434,418,4.526,419,2.777,420,2.161,421,2.777,422,2.434,423,1.538,424,2.777,425,2.434,426,3.979,427,2.777,428,2.254,429,2.777,430,1.697,431,2.777,432,3.384,433,3.745,434,2.434,435,2.208,436,2.92,437,2.04,438,2.434,439,2.04,440,2.434,441,1.905,442,1.697,443,1.538,444,1.41,445,2.777,446,1.905,447,1.905,448,1.905,449,1.905,450,1.905,451,1.905,452,1.905,453,1.905,454,1.905,455,2.777,456,2.777,457,2.777,458,2.208,459,4.29,460,2.777,461,2.777,462,2.777,463,2.777,464,2.777,465,2.777,466,2.777,467,2.777,468,2.777,469,2.777,470,2.777,471,2.777,472,2.777,473,2.777,474,2.777,475,2.777]],["title/modules/AuthModule.html",[56,1.41,262,2.717]],["body/modules/AuthModule.html",[0,0.251,3,0.133,4,0.133,5,0.119,7,0.146,8,0.011,9,0.008,10,0.008,13,2.495,16,0.294,17,0.838,56,2.058,58,2.093,59,2.881,65,3.254,66,2.455,67,2.26,69,2.995,71,4.209,93,1.553,262,5.44,268,4.344,285,3.685,373,5.38,377,4.726,395,5.06,433,5.064,434,4.062,476,4.062,477,4.634,478,4.062,479,5.38,480,4.634,481,4.062,482,4.634,483,4.634,484,6.142,485,3.685,486,4.634,487,4.634,488,4.634,489,4.062,490,4.634,491,4.634,492,4.062,493,4.634,494,3.685]],["title/injectables/AuthService.html",[76,0.784,433,2.717]],["body/injectables/AuthService.html",[0,0.123,3,0.065,4,0.065,5,0.058,7,0.072,8,0.011,9,0.005,10,0.005,16,0.248,17,0.411,38,0.627,76,0.677,77,0.81,79,1.584,81,3.233,82,0.731,84,1.386,85,0.993,86,1.269,91,0.224,92,0.74,93,2.668,101,1.528,105,2.092,109,2.772,110,1.258,111,3.696,119,2.308,166,1.377,169,1.477,187,2.778,211,2.62,218,0.81,229,2.774,244,2.753,286,1.467,377,4.16,389,1.558,397,3.187,398,5.064,399,3.187,400,3.187,401,3.187,402,3.187,407,3.187,412,3.187,413,3.175,417,3.187,418,3.565,425,3.187,426,3.565,428,1.926,433,2.348,439,1.669,440,1.991,443,1.258,444,1.153,485,1.807,489,3.187,492,3.187,494,1.807,495,1.991,496,3.636,497,3.636,498,2.272,499,6.368,500,2.272,501,3.636,502,4.228,503,2.272,504,2.272,505,2.272,506,2.272,507,2.272,508,2.272,509,3.636,510,5.684,511,2.272,512,2.272,513,1.807,514,1.807,515,3.339,516,1.807,517,1.991,518,1.669,519,1.558,520,1.991,521,4.459,522,2.272,523,3.636,524,3.636,525,2.272,526,2.272,527,2.272,528,2.272,529,2.272,530,4.132,531,2.272,532,3.187,533,4.546,534,2.272,535,1.991,536,1.807,537,5.684,538,2.222,539,3.636,540,2.272,541,1.203,542,4.111,543,2.272,544,2.272,545,2.272,546,5.799,547,2.272,548,2.272,549,2.272,550,5.197,551,3.615,552,4.983,553,5.684,554,2.272,555,3.187,556,4.546,557,4.546,558,4.546,559,2.272,560,2.348,561,3.636,562,3.636,563,3.636,564,2.272,565,2.272,566,2.272]],["title/classes/CommentEntity.html",[0,0.228,567,2.717]],["body/classes/CommentEntity.html",[0,0.345,2,0.939,3,0.14,4,0.14,5,0.126,7,0.154,8,0.011,9,0.008,10,0.008,16,0.183,38,0.755,82,0.88,91,0.483,101,1.577,102,2.839,109,2.875,169,2.299,567,4.111,568,4.291,569,2.008,570,3.92,571,6.203,572,7.076,573,3.748,574,4.896,575,4.896,576,5.627,577,4.896,578,3.105,579,4.291,580,4.896,581,4.896,582,4.896,583,4.896,584,4.896,585,4.368,586,6.367,587,3.953,588,4.896,589,3.643,590,1.745]],["title/classes/ConversationEntity.html",[0,0.228,591,3.091]],["body/classes/ConversationEntity.html",[0,0.238,2,0.844,3,0.126,4,0.126,5,0.113,7,0.139,8,0.011,9,0.008,10,0.008,16,0.165,29,1.097,34,1.936,38,0.771,82,0.899,85,1.008,91,0.434,101,1.622,102,2.901,132,2.923,169,2.181,303,2.494,560,3.83,569,1.87,591,4.357,592,3.856,593,4.101,594,5.337,595,3.555,596,3.555,597,5.337,598,4.363,599,4.399,600,4.399,601,4.928,602,4.399,603,4.399,604,4.399,605,3.142,606,4.717,607,4.399,608,4.399,609,4.399,610,4.399,611,4.399,612,3.018]],["title/controllers/ConversationsController.html",[11,1.71,613,3.091]],["body/controllers/ConversationsController.html",[0,0.111,1,1.771,3,0.059,4,0.059,5,0.053,7,0.065,8,0.011,9,0.004,10,0.004,11,0.832,13,0.832,15,1.039,16,0.217,17,0.37,18,2.043,19,2.043,20,2.043,21,2.043,22,2.043,23,2.043,24,2.043,25,2.043,26,1.189,27,2.043,28,2.043,29,0.51,30,2.043,34,2.255,38,0.67,39,1.084,82,0.703,84,1.333,85,0.955,86,1.221,88,0.832,91,0.202,92,0.68,93,2.62,97,2.988,101,1.466,102,2.268,104,3.697,105,2.688,110,1.257,115,2.158,119,4.131,140,4.184,141,1.251,142,1.134,143,1.504,144,1.504,147,4.25,148,4.022,160,1.322,162,3.888,164,3.727,166,1.541,169,1.879,218,0.73,229,2.13,303,1.406,420,1.697,423,3.379,430,2.043,432,2.658,442,1.251,443,1.134,444,1.039,446,1.404,447,1.404,448,1.404,449,1.404,450,1.404,451,1.404,452,1.404,453,1.404,454,1.404,458,1.628,459,4.364,521,1.134,585,2.293,591,4.48,595,3.063,596,1.771,613,2.455,614,1.794,615,3.369,616,2.93,617,3.713,618,3.713,619,2.93,620,3.713,621,3.713,622,3.713,623,3.713,624,1.794,625,2.709,626,2.047,627,6.259,628,5.782,629,2.047,630,2.93,631,2.047,632,3.727,633,1.794,634,3.354,635,2.047,636,4.673,637,2.047,638,1.794,639,2.84,640,2.047,641,4.851,642,2.047,643,4.516,644,1.794,645,2.988,646,2.047,647,3.343,648,2.047,649,1.794,650,3.157,651,2.047,652,4.286,653,2.047,654,1.794,655,2.84,656,2.047,657,2.047,658,1.794,659,2.84,660,2.047,661,2.047,662,1.794,663,2.84,664,2.047,665,2.93,666,3.343,667,2.047,668,3.157,669,1.794,670,2.047,671,2.047,672,2.047,673,2.047,674,2.047,675,2.047,676,2.047,677,2.047,678,2.047,679,2.047,680,4.236,681,2.047,682,2.047,683,2.047,684,2.047,685,2.047,686,2.047,687,4.236,688,2.047,689,2.047,690,2.047,691,2.047,692,2.047]],["title/modules/ConversationsModule.html",[56,1.41,263,2.887]],["body/modules/ConversationsModule.html",[0,0.285,3,0.151,4,0.151,5,0.136,7,0.166,8,0.011,9,0.009,10,0.009,13,2.71,16,0.298,17,0.951,56,2.235,58,2.378,59,3.128,63,4.714,65,3.533,66,2.788,67,2.566,69,3.252,71,4.076,74,4.186,263,5.82,268,4.496,613,5.378,668,5.24,669,4.614,693,4.614,694,5.263,695,4.614,696,5.263,697,5.263,698,4.614]],["title/injectables/ConversationsService.html",[76,0.784,668,2.717]],["body/injectables/ConversationsService.html",[0,0.123,1,1.202,3,0.065,4,0.065,5,0.058,7,0.072,8,0.012,9,0.005,10,0.005,16,0.213,17,0.41,34,1.048,38,0.647,76,0.676,77,0.809,79,0.988,80,1.556,81,3.077,82,0.754,84,1.429,85,1.093,86,1.308,87,1.804,88,0.922,91,0.224,92,0.739,93,2.667,101,1.496,110,1.307,115,4.109,119,4.042,132,1.979,166,1.731,169,2.534,211,2.417,218,0.809,244,3.009,303,1.91,444,1.152,521,3.875,541,1.924,593,3.471,595,3.009,596,3.211,605,1.202,616,3.184,617,3.184,618,3.982,619,3.184,620,3.184,621,3.184,622,3.982,623,3.982,624,3.184,625,2.876,632,3.889,633,3.184,634,3.562,638,1.989,639,3.016,643,4.902,644,3.184,645,3.173,649,3.184,650,3.353,654,3.184,655,3.016,658,1.989,659,3.016,662,1.989,663,3.016,668,2.345,699,1.989,700,2.269,701,2.269,702,2.269,703,2.269,704,2.269,705,2.269,706,2.269,707,2.269,708,2.269,709,1.989,710,3.336,711,1.804,712,3.633,713,2.269,714,3.633,715,3.184,716,5.193,717,3.633,718,4.542,719,5.193,720,6.613,721,1.667,722,5.979,723,5.193,724,2.269,725,2.269,726,2.269,727,2.269,728,3.184,729,3.633,730,2.269]],["title/classes/CreateCommentDto.html",[0,0.228,731,2.887]],["body/classes/CreateCommentDto.html",[0,0.336,2,1.192,3,0.178,4,0.178,5,0.16,7,0.196,8,0.011,9,0.01,10,0.01,16,0.277,29,1.55,353,1.902,567,4.012,570,3.442,573,3.292,731,5.067,732,5.447,733,4.565,734,3.03,735,4.942,736,4.942]],["title/classes/CreateConversationDto.html",[0,0.228,625,2.331]],["body/classes/CreateConversationDto.html",[0,0.275,2,0.677,3,0.101,4,0.101,5,0.091,7,0.111,8,0.011,9,0.007,10,0.007,16,0.223,29,0.88,34,2.234,38,0.745,82,0.765,85,1.163,86,0.976,91,0.348,101,1.619,102,2.467,218,2.868,303,1.484,375,1.792,569,1.604,578,3.183,585,4.092,587,2.908,589,3.061,590,1.259,593,3.645,595,3.16,596,3.16,598,3.659,605,2.695,606,4.046,612,3.49,625,2.818,737,6.317,738,1.955,739,4.018,740,3.687,741,4.046,742,3.53,743,3.53,744,3.53,745,5.965,746,3.53,747,3.53,748,4.794,749,4.794,750,3.53,751,4.794,752,5.965,753,4.459,754,4.794,755,3.53,756,3.53,757,3.53,758,3.094,759,3.094,760,4.743,761,3.53,762,3.53,763,3.094,764,3.094,765,2.807,766,2.807,767,2.807,768,2.422,769,2.422,770,2.807,771,4.046,772,4.046,773,4.794,774,3.094,775,4.459,776,3.53,777,3.53,778,3.53,779,3.53,780,3.53,781,3.53]],["title/classes/CreateMessageDto.html",[0,0.228,782,2.717]],["body/classes/CreateMessageDto.html",[0,0.311,2,1.102,3,0.164,4,0.164,5,0.148,7,0.181,8,0.011,9,0.009,10,0.009,16,0.215,29,1.432,38,0.722,82,0.842,91,0.567,101,1.591,169,2.476,569,2.221,573,4.036,782,4.548,783,6.962,784,4.568,785,6.058,786,5.744,787,5.744,788,5.035,789,7.044]],["title/classes/CreatePostDto.html",[0,0.228,790,2.887]],["body/classes/CreatePostDto.html",[0,0.335,2,1.188,3,0.177,4,0.177,5,0.159,7,0.195,8,0.011,9,0.01,10,0.01,16,0.276,29,1.544,34,1.786,353,1.895,734,3.02,790,5.057,791,5.429,792,4.249,793,3.999,794,4.925,795,4.925,796,4.249,797,3.431]],["title/classes/DeleteCommentDto.html",[0,0.228,798,2.887]],["body/classes/DeleteCommentDto.html",[0,0.336,2,1.192,3,0.178,4,0.178,5,0.16,7,0.196,8,0.011,9,0.01,10,0.01,16,0.277,29,1.55,169,2.019,353,1.902,567,4.012,570,3.442,733,4.565,734,3.03,735,4.942,736,4.942,798,5.067,799,5.447]],["title/classes/DeleteConversationDto.html",[0,0.228,634,2.887]],["body/classes/DeleteConversationDto.html",[0,0.32,2,1.134,3,0.169,4,0.169,5,0.152,7,0.186,8,0.011,9,0.009,10,0.009,16,0.222,38,0.56,82,0.653,91,0.583,101,1.375,102,2.108,105,2.176,109,2.912,169,1.921,353,2.194,569,2.26,634,4.918,645,4.901,738,3.275,739,3.434,740,2.773,800,5.182,801,3.275,802,3.613,803,4.342,804,4.702,805,5.182,806,4.056]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.228,639,2.444]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.416,2,0.908,3,0.135,4,0.135,5,0.122,7,0.233,8,0.011,9,0.008,10,0.008,16,0.261,29,1.18,34,1.364,38,0.66,82,0.688,85,0.71,91,0.467,101,1.63,102,1.687,105,2.291,109,2.827,132,2.061,169,2.023,353,2.263,420,2.402,569,1.963,587,3.036,589,2.92,590,1.687,593,2.891,595,3.917,596,3.298,598,3.161,625,4.096,639,3.616,655,2.748,659,2.748,663,2.748,738,2.62,739,2.748,740,2.92,801,3.449,802,3.804,803,3.475,806,3.245,807,4.774,808,4.731,809,4.731,810,5.073,811,3.475,812,3.054]],["title/classes/DeleteOnePost.html",[0,0.228,813,2.887]],["body/classes/DeleteOnePost.html",[0,0.392,2,1.153,3,0.172,4,0.172,5,0.155,7,0.19,8,0.011,9,0.009,10,0.009,16,0.225,38,0.57,82,0.664,91,0.593,101,1.389,102,2.143,569,2.283,570,4.304,576,4.779,587,3.53,589,3.395,590,2.143,792,4.123,813,4.967,814,6.346,815,6.01]],["title/injectables/ErrorsIntereptor.html",[76,0.784,816,3.347]],["body/injectables/ErrorsIntereptor.html",[0,0.287,3,0.152,4,0.152,5,0.137,7,0.167,8,0.011,9,0.009,10,0.009,16,0.251,17,0.96,38,0.503,76,1.249,77,1.893,82,0.587,84,1.112,85,0.797,86,1.019,91,0.524,92,1.365,110,1.049,142,2.941,166,1.286,184,2.018,196,4.222,218,1.893,229,2.313,348,4.486,350,3.084,816,5.334,817,4.654,818,4.601,819,4.926,820,4.719,821,5.298,822,5.309,823,5.044,824,4.601,825,5.309,826,6.707,827,3.428,828,4.654,829,5.309,830,5.309,831,5.309,832,5.309]],["title/injectables/ExistedUserMiddleware.html",[76,0.784,833,3.091]],["body/injectables/ExistedUserMiddleware.html",[0,0.251,3,0.133,4,0.133,5,0.12,7,0.147,8,0.011,9,0.008,10,0.008,16,0.258,17,0.84,37,3.187,38,0.583,46,3.728,76,1.146,77,1.656,79,2.024,80,3.187,81,3.985,82,0.68,84,1.289,85,0.924,86,1.18,88,1.888,91,0.458,92,1.252,93,2.311,109,2.5,110,0.918,169,1.999,184,1.766,205,4.067,210,2.461,211,2.126,229,2.024,303,1.954,423,2.574,514,3.695,521,2.574,535,6.046,542,3,551,3.695,560,3,721,3.413,820,4.486,833,4.519,834,5.485,835,4.073,836,4.519,837,4.646,838,5.393,839,6.046,840,7.342,841,4.646,842,3.413,843,5.393,844,3.695,845,4.646,846,4.646,847,4.646]],["title/controllers/FileController.html",[11,1.71,848,3.091]],["body/controllers/FileController.html",[0,0.149,3,0.079,4,0.079,5,0.187,7,0.087,8,0.011,9,0.005,10,0.005,11,1.118,13,1.118,15,1.397,16,0.265,17,0.497,18,2.582,19,2.582,20,2.582,21,2.582,22,2.582,23,2.582,24,2.582,25,2.582,26,1.598,27,2.582,28,2.582,29,0.686,34,2.275,38,0.59,39,1.458,43,3.104,45,4.829,82,0.638,84,1.21,85,1.088,86,1.107,88,1.118,91,0.271,92,0.86,93,2.558,102,2.221,105,1.555,110,1.141,111,3.587,132,1.841,138,2.341,141,1.682,142,1.524,147,4.021,148,3.806,160,1.777,162,3.527,164,3.527,166,1.398,210,2.726,218,0.981,243,3.299,244,3.483,303,1.777,423,3.45,430,3.144,442,1.682,443,1.524,444,1.397,446,1.888,447,1.888,448,1.888,449,1.888,450,1.888,451,1.888,452,1.888,453,1.888,454,1.888,459,3.96,612,1.888,797,3.45,848,3.104,849,2.412,850,4.51,851,4.51,852,4.51,853,4.51,854,2.412,855,6.351,856,2.752,857,6.193,858,2.752,859,2.752,860,2.752,861,2.412,862,2.752,863,2.412,864,2.752,865,2.752,866,2.412,867,2.752,868,5.06,869,3.705,870,2.752,871,4.226,872,2.752,873,2.412,874,3.322,875,2.752,876,4.226,877,2.752,878,2.729,879,4.226,880,2.752,881,5.145,882,5.145,883,2.412,884,3.705,885,3.705,886,2.188,887,2.188,888,3.361,889,2.729,890,2.412,891,2.412,892,2.412,893,1.888,894,2.752,895,2.412,896,2.412,897,2.752,898,2.752,899,2.752,900,2.752,901,2.752,902,2.752,903,2.752,904,2.752,905,2.752,906,2.752,907,2.752,908,2.752,909,2.752,910,5.459,911,2.752,912,2.752,913,2.752,914,2.752,915,2.752]],["title/modules/FilesModule.html",[56,1.41,264,2.887]],["body/modules/FilesModule.html",[0,0.309,3,0.163,4,0.163,5,0.147,7,0.18,8,0.011,9,0.009,10,0.009,13,2.851,16,0.285,17,1.032,56,2.351,58,2.579,59,3.291,65,3.717,66,3.024,67,2.783,69,2.783,71,4.288,264,5.682,848,5.58,889,5.417,890,5.004,916,5.004,917,5.004,918,5.708,919,5.708]],["title/classes/FilesService.html",[0,0.228,889,2.717]],["body/classes/FilesService.html",[0,0.234,2,0.828,3,0.124,4,0.124,5,0.171,7,0.136,8,0.011,9,0.008,10,0.008,16,0.162,38,0.676,82,0.788,84,1.493,85,1.07,86,1.367,91,0.426,92,1.192,93,2.792,110,1.408,111,4.059,166,1.805,797,4.127,850,5.133,851,5.133,852,5.133,853,5.133,854,5.133,855,7.104,861,5.133,866,5.133,873,5.133,874,4.291,889,3.781,891,3.783,892,3.783,893,2.961,920,3.783,921,4.316,922,4.316,923,4.316,924,4.316,925,6.646,926,6.646,927,6.646,928,6.646,929,6.646,930,6.646,931,4.316]],["title/classes/GetAllConversationDto.html",[0,0.228,645,2.572]],["body/classes/GetAllConversationDto.html",[0,0.404,2,1.055,3,0.157,4,0.157,5,0.142,7,0.216,8,0.011,9,0.009,10,0.009,16,0.257,29,1.372,38,0.65,82,0.608,91,0.543,101,1.501,102,1.961,105,2.524,109,3.036,169,2.229,353,1.683,569,2.162,587,3.344,589,3.217,590,1.961,598,3.482,645,4.566,650,3.552,738,3.047,739,3.195,740,3.217,801,3.799,802,4.191,803,4.041,812,3.552,932,5.454,933,5.502]],["title/classes/GetOneConversationDto.html",[0,0.228,650,2.717]],["body/classes/GetOneConversationDto.html",[0,0.403,2,1.046,3,0.156,4,0.156,5,0.14,7,0.215,8,0.011,9,0.009,10,0.009,16,0.256,29,1.36,38,0.647,82,0.603,91,0.538,101,1.496,102,1.944,105,2.51,109,3.024,169,2.216,353,2.087,569,2.15,587,3.325,589,3.198,590,1.944,598,3.463,645,4.765,650,4.403,738,3.02,739,3.167,740,3.198,801,3.778,802,4.167,803,4.005,804,4.336,805,4.779,812,3.52,932,4.336]],["title/classes/HttpExceptionFilter.html",[0,0.228,934,3.347]],["body/classes/HttpExceptionFilter.html",[0,0.282,2,0.998,3,0.149,4,0.149,5,0.134,7,0.164,8,0.011,9,0.009,10,0.009,16,0.248,17,0.94,38,0.493,46,3.362,82,0.575,84,1.09,85,0.781,86,0.998,91,0.513,92,1.347,110,1.028,184,2.517,185,6.384,186,6.384,195,5.804,196,6.097,197,6.384,198,6.72,200,4.561,201,3.359,205,3.668,210,2.756,211,2.649,212,4.561,213,4.561,214,4.561,215,4.561,224,4.561,227,4.561,228,4.561,229,2.267,230,4.561,232,3.569,233,4.561,256,5.804,934,5.266,935,4.561,936,5.203,937,5.203,938,5.203]],["title/interfaces/ISwaggerOptions.html",[939,2.717,940,3.091]],["body/interfaces/ISwaggerOptions.html",[3,0.119,4,0.119,5,0.107,7,0.131,8,0.011,9,0.007,10,0.007,15,2.903,38,0.698,40,3.692,58,3.434,86,1.561,91,0.411,101,1.252,115,3.692,303,2.954,569,1.803,893,2.859,939,2.691,940,4.2,941,3.653,942,7.024,943,7.024,944,7.024,945,7.93,946,6.664,947,3.707,948,6.157,949,5.718,950,5.718,951,5.718,952,5.824,953,5.718,954,5.718,955,5.718,956,5.718,957,5.012,958,7.024,959,5.718,960,5.012,961,5.718,962,5.012,963,5.718,964,4.2,965,2.547,966,5.718,967,5.718,968,5.012,969,5.012,970,5.718,971,5.012,972,5.721,973,5.721]],["title/modules/InterceptorModule.html",[56,1.41,265,2.887]],["body/modules/InterceptorModule.html",[0,0.315,3,0.167,4,0.167,5,0.15,7,0.183,8,0.011,9,0.009,10,0.009,16,0.299,17,1.051,56,2.378,58,2.628,69,2.837,265,4.87,277,3.991,321,6.222,322,6.222,974,5.818,975,7.661,976,5.214,977,5.818,978,4.87,979,5.818]],["title/injectables/LoggerContextMiddleware.html",[76,0.784,288,3.091]],["body/injectables/LoggerContextMiddleware.html",[0,0.289,3,0.153,4,0.153,5,0.138,7,0.168,8,0.011,9,0.009,10,0.009,16,0.252,17,0.965,38,0.638,46,3.93,76,1.254,77,1.904,82,0.59,84,1.119,85,0.802,86,1.025,91,0.527,92,1.37,110,1.055,166,1.294,184,2.03,201,4.997,205,4.287,210,2.829,288,4.944,820,4.729,836,4.944,838,5.901,839,6.784,842,4.944,843,5.901,952,3.923,980,5.901,981,4.681,982,5.34,983,5.34,984,5.34]],["title/classes/LoggerModule.html",[0,0.228,294,3.091]],["body/classes/LoggerModule.html",[0,0.303,2,1.075,3,0.16,4,0.16,5,0.144,7,0.177,8,0.011,9,0.009,10,0.009,16,0.282,17,1.013,56,1.877,69,2.732,82,0.619,91,0.553,92,1.412,110,1.107,166,1.357,189,5.169,192,4.604,211,1.936,294,5.534,985,4.911,986,7.874,987,5.603,988,7.534,989,5.516,990,5.603,991,5.603,992,7.534,993,4.456]],["title/injectables/LoggerService.html",[76,0.784,192,2.572]],["body/injectables/LoggerService.html",[0,0.203,3,0.108,4,0.108,5,0.097,7,0.118,8,0.011,9,0.007,10,0.007,15,4.373,16,0.141,17,0.679,38,0.717,39,2.817,76,0.99,77,1.339,82,0.836,84,1.542,85,1.105,86,1.482,91,0.37,92,1.082,101,1.656,110,1.454,187,3.772,192,3.249,194,3.986,201,4.75,218,2.697,353,1.627,569,1.677,994,3.292,995,5.318,996,5.318,997,5.318,998,5.318,999,5.318,1000,5.318,1001,3.756,1002,7.357,1003,5.318,1004,6.714,1005,3.756,1006,5.318,1007,3.756,1008,5.318,1009,3.756,1010,5.318,1011,3.756,1012,5.318,1013,3.756,1014,3.756,1015,5.318,1016,3.756,1017,6.173,1018,5.318,1019,3.756,1020,3.756,1021,3.756,1022,3.756,1023,3.756]],["title/injectables/LoggingInterceptor.html",[76,0.784,976,3.091]],["body/injectables/LoggingInterceptor.html",[0,0.286,3,0.151,4,0.151,5,0.136,7,0.166,8,0.011,9,0.009,10,0.009,16,0.275,17,0.954,38,0.5,76,1.244,77,1.882,82,0.583,84,1.106,85,0.793,86,1.013,91,0.521,92,1.36,110,1.043,166,1.279,184,2.007,211,1.824,348,4.476,350,3.066,818,4.584,819,4.908,820,4.709,821,5.287,823,5.03,824,4.584,827,3.408,828,4.627,976,4.908,1024,4.627,1025,5.279,1026,5.279,1027,3.877,1028,5.279,1029,5.279,1030,5.279,1031,5.279,1032,5.857,1033,5.279,1034,5.279,1035,5.279]],["title/classes/LoginDto.html",[0,0.228,413,2.572]],["body/classes/LoginDto.html",[0,0.34,2,1.205,3,0.18,4,0.18,5,0.162,7,0.198,8,0.011,9,0.01,10,0.01,16,0.278,29,1.566,353,1.921,413,4.541,428,3.326,502,3.647,734,3.061,1036,5.504,1037,4.054,1038,5.504,1039,4.993]],["title/classes/MessagesGateway.html",[0,0.228,1040,3.091]],["body/classes/MessagesGateway.html",[0,0.163,2,0.579,3,0.086,4,0.086,5,0.078,7,0.095,8,0.011,9,0.006,10,0.006,16,0.243,38,0.689,53,4.398,79,1.314,82,0.803,84,1.481,85,1.117,86,1.356,88,1.225,91,0.297,92,0.922,93,2.491,101,1.57,102,2.519,110,1.346,119,1.531,160,1.947,166,1.571,211,2.091,218,2.312,312,5.913,521,3.014,569,1.429,632,2.769,643,5.277,782,4.693,785,5.157,947,2.654,1040,3.328,1041,2.644,1042,4.77,1043,3.972,1044,4.77,1045,3.972,1046,5.442,1047,3.972,1048,3.016,1049,4.398,1050,4.531,1051,5.442,1052,2.644,1053,7.575,1054,4.531,1055,3.016,1056,2.644,1057,4.531,1058,3.016,1059,2.644,1060,4.531,1061,3.016,1062,2.644,1063,4.531,1064,3.016,1065,3.016,1066,6.051,1067,4.531,1068,3.016,1069,2.644,1070,4.673,1071,4.531,1072,3.016,1073,4.531,1074,3.016,1075,4.531,1076,6.051,1077,2.644,1078,2.644,1079,2.399,1080,2.644,1081,2.399,1082,2.644,1083,5.442,1084,3.016,1085,3.016,1086,5.442,1087,3.016,1088,3.016,1089,3.016,1090,3.016,1091,3.016,1092,3.016,1093,3.016,1094,3.016,1095,5.003,1096,3.016,1097,4.531,1098,3.016,1099,3.016]],["title/modules/MessagesModule.html",[56,1.41,266,2.887]],["body/modules/MessagesModule.html",[0,0.314,3,0.166,4,0.166,5,0.149,7,0.183,8,0.011,9,0.009,10,0.009,16,0.287,17,1.048,56,2.374,58,2.62,59,3.323,65,3.753,66,3.072,67,2.828,69,3.455,266,5.703,1040,5.204,1049,5.368,1078,5.083,1100,5.083,1101,5.083,1102,5.799,1103,5.799]],["title/injectables/MessagesService.html",[76,0.784,1049,2.717]],["body/injectables/MessagesService.html",[0,0.148,3,0.078,4,0.078,5,0.071,7,0.086,8,0.012,9,0.005,10,0.005,16,0.192,17,0.495,38,0.648,76,0.784,77,0.977,82,0.755,84,1.375,85,1.109,86,1.259,91,0.27,92,0.857,93,1.719,101,1.608,110,1.297,119,1.391,166,1.59,169,2.401,211,0.947,218,1.829,243,3.621,245,2.889,246,3.349,569,1.328,573,3.476,596,3.293,615,4.08,632,1.674,643,4.964,709,2.401,710,3.768,782,4.413,785,5.219,964,2.012,965,1.674,1042,4.497,1043,3.692,1044,3.692,1045,3.692,1047,3.692,1049,2.719,1052,2.401,1056,3.692,1059,3.692,1062,3.692,1069,3.692,1070,4.264,1104,2.401,1105,4.212,1106,7.516,1107,2.74,1108,2.74,1109,4.212,1110,2.74,1111,2.74,1112,2.74,1113,2.74,1114,5.448,1115,4.212,1116,4.212,1117,3.093,1118,3.349,1119,4.212,1120,4.212,1121,4.212,1122,2.74,1123,5.759,1124,6.835,1125,2.74,1126,2.74,1127,2.74,1128,2.74,1129,2.74,1130,2.74,1131,2.74,1132,2.74,1133,4.212,1134,2.74,1135,4.212,1136,4.212,1137,2.74,1138,2.74,1139,2.74,1140,2.74,1141,2.74,1142,2.74,1143,2.74,1144,2.74]],["title/classes/PaginationDto.html",[0,0.228,113,2.887]],["body/classes/PaginationDto.html",[0,0.331,2,0.885,3,0.132,4,0.132,5,0.119,7,0.145,8,0.011,9,0.008,10,0.008,16,0.229,29,1.15,34,2.259,38,0.742,82,0.759,91,0.455,101,1.557,102,2.45,113,4.199,243,3.243,303,3.293,569,1.93,578,3.957,589,3.433,590,1.644,598,3.717,606,6.228,641,4.714,740,3.673,878,3.952,1145,4.042,1146,6.872,1147,6.872,1148,6.872,1149,6.417,1150,4.611,1151,6.121,1152,6.121,1153,4.611,1154,5.821,1155,5.366,1156,4.611,1157,6.417]],["title/injectables/ParseIntPipe.html",[76,0.784,1158,3.347]],["body/injectables/ParseIntPipe.html",[0,0.293,3,0.155,4,0.155,5,0.14,7,0.171,8,0.011,9,0.009,10,0.009,16,0.203,17,0.98,38,0.514,76,1.265,77,1.932,82,0.599,84,1.136,85,0.814,86,1.04,91,0.535,92,1.383,93,2.487,101,1.424,110,1.071,166,1.313,184,2.06,211,1.873,229,2.361,542,3.499,632,3.312,878,3.499,965,3.312,1158,5.403,1159,5.956,1160,4.751,1161,5.403,1162,5.956,1163,5.902,1164,6.821,1165,5.42,1166,4.31,1167,5.956,1168,6.794,1169,5.42,1170,5.42,1171,4.751,1172,4.751]],["title/classes/PostEntity.html",[0,0.228,793,2.717]],["body/classes/PostEntity.html",[0,0.32,2,0.84,3,0.125,4,0.125,5,0.113,7,0.138,8,0.011,9,0.008,10,0.008,16,0.164,34,1.931,38,0.771,82,0.898,91,0.432,101,1.621,102,2.898,109,2.72,569,1.864,570,3.708,576,6.136,578,2.883,579,3.838,585,4.056,587,4.006,589,3.699,590,1.561,793,3.817,796,4.593,797,3.708,947,2.883,1173,3.838,1174,4.917,1175,5.324,1176,4.917,1177,5.324,1178,4.378,1179,4.378,1180,4.378,1181,4.378,1182,4.378,1183,4.378,1184,4.378,1185,4.378,1186,4.378,1187,4.378,1188,4.378,1189,5.913,1190,5.183]],["title/controllers/PostsController.html",[11,1.71,1191,3.091]],["body/controllers/PostsController.html",[0,0.098,3,0.052,4,0.052,5,0.047,7,0.057,8,0.011,9,0.004,10,0.004,11,0.736,13,0.736,15,0.92,16,0.236,17,0.327,18,3.843,19,1.846,20,1.846,21,1.846,22,1.846,23,1.846,24,1.846,25,1.846,26,1.052,27,1.846,28,1.846,29,0.452,34,2.234,38,0.646,39,0.959,82,0.737,84,1.396,85,1.001,86,1.278,88,0.736,91,0.179,92,0.615,93,2.718,97,2.772,101,1.465,102,2.376,104,3.459,105,2.602,109,2.637,110,1.317,111,3.907,116,3.075,119,3.848,140,3.459,141,1.107,142,1.003,143,1.33,144,1.33,145,1.33,147,4.401,148,4.165,150,1.588,162,4.072,164,1.846,166,1.614,169,0.982,170,1.588,187,1.846,218,0.646,229,2.517,420,1.534,422,1.588,423,3.595,430,4.497,432,2.403,436,3.459,442,1.107,443,1.003,444,0.92,446,1.243,447,1.243,448,1.243,449,1.243,450,1.243,451,1.243,452,1.243,453,1.243,454,1.243,458,1.44,459,4.572,560,2.929,570,2.513,636,4.001,731,3.112,790,3.112,798,3.112,813,3.112,884,2.648,885,2.648,895,1.588,896,1.588,1191,2.219,1192,1.588,1193,5.066,1194,3.407,1195,3.407,1196,2.648,1197,3.407,1198,3.407,1199,3.407,1200,3.407,1201,3.407,1202,2.648,1203,3.407,1204,2.648,1205,1.588,1206,1.811,1207,2.648,1208,4.332,1209,5.448,1210,1.811,1211,1.588,1212,1.811,1213,3.021,1214,3.021,1215,1.811,1216,1.588,1217,1.811,1218,3.887,1219,1.811,1220,1.588,1221,1.811,1222,1.811,1223,1.588,1224,1.811,1225,2.403,1226,1.811,1227,1.588,1228,1.811,1229,1.811,1230,1.588,1231,1.811,1232,1.811,1233,1.588,1234,1.811,1235,1.811,1236,1.588,1237,2.929,1238,1.811,1239,3.021,1240,1.811,1241,1.588,1242,3.112,1243,1.811,1244,1.811,1245,1.588,1246,2.929,1247,1.811,1248,1.811,1249,4.537,1250,2.51,1251,1.588,1252,1.588,1253,1.588,1254,1.588,1255,1.588,1256,1.588,1257,1.588,1258,1.588,1259,1.588,1260,1.588,1261,1.588,1262,1.588,1263,1.588,1264,1.811,1265,1.811,1266,1.811,1267,1.811,1268,1.811,1269,1.811,1270,1.811,1271,1.811,1272,3.021,1273,1.811,1274,1.811,1275,1.811,1276,1.811,1277,1.811,1278,1.811,1279,1.811,1280,1.811,1281,1.811,1282,1.811,1283,1.811,1284,1.811,1285,1.811,1286,1.811,1287,1.811,1288,1.811,1289,1.811,1290,1.811,1291,1.811]],["title/modules/PostsModule.html",[56,1.41,267,2.887]],["body/modules/PostsModule.html",[0,0.285,3,0.151,4,0.151,5,0.136,7,0.166,8,0.011,9,0.009,10,0.009,13,2.71,16,0.298,17,0.951,56,2.235,58,2.378,59,3.128,63,4.714,65,3.533,66,2.788,67,2.566,69,3.252,71,4.076,74,4.186,267,5.82,268,4.496,698,4.614,1191,5.378,1250,5.24,1251,4.614,1292,4.614,1293,5.263,1294,4.614,1295,5.263,1296,5.263]],["title/injectables/PostsService.html",[76,0.784,1250,2.717]],["body/injectables/PostsService.html",[0,0.095,3,0.05,4,0.05,5,0.045,7,0.055,8,0.011,9,0.004,10,0.004,16,0.214,17,0.318,34,1.644,38,0.653,76,0.549,77,0.627,79,0.766,80,1.207,81,2.725,82,0.746,84,1.415,85,1.035,86,1.296,87,1.399,88,0.715,91,0.173,92,0.6,93,2.707,101,1.457,109,2.849,110,1.304,111,3.885,115,2.875,119,3.498,166,1.598,169,2.346,211,1.855,218,0.627,229,2.797,244,2.628,303,3.482,420,1.497,430,2.721,441,1.207,444,0.893,513,1.399,519,1.207,521,3.999,536,1.399,541,1.562,542,3.862,560,2.875,570,3.158,571,3.904,573,2.016,594,3.542,597,2.344,601,1.207,710,1.292,715,2.584,721,4.846,728,1.542,731,3.055,790,3.055,796,3.911,797,3.158,798,3.055,813,3.055,844,1.399,1166,1.399,1174,4.567,1176,3.942,1194,3.336,1195,2.584,1196,2.584,1197,2.584,1198,2.584,1199,2.584,1200,2.584,1201,2.584,1202,2.584,1203,2.584,1204,2.584,1205,1.542,1211,2.584,1216,2.584,1220,2.584,1223,2.584,1225,1.399,1227,2.584,1230,2.584,1233,2.584,1236,2.584,1237,2.875,1241,2.584,1242,3.055,1245,2.584,1246,2.875,1250,1.903,1252,1.542,1253,1.542,1254,1.542,1255,1.542,1256,1.542,1257,1.542,1258,1.542,1259,1.542,1260,1.542,1261,1.542,1262,1.542,1263,1.542,1297,1.542,1298,1.759,1299,1.759,1300,1.759,1301,1.759,1302,1.759,1303,1.759,1304,1.759,1305,1.759,1306,1.759,1307,1.759,1308,1.759,1309,1.759,1310,1.399,1311,1.759,1312,2.948,1313,2.948,1314,1.759,1315,1.759,1316,2.584,1317,2.948,1318,1.759,1319,1.542,1320,1.759,1321,4.96,1322,1.759,1323,3.806,1324,1.759,1325,1.759,1326,2.948,1327,1.759,1328,5.981,1329,1.759,1330,2.584,1331,1.759,1332,1.759,1333,1.542,1334,1.759,1335,1.759,1336,2.948,1337,1.759,1338,1.759,1339,1.542,1340,1.759,1341,1.759,1342,1.759,1343,2.948,1344,1.759,1345,2.948,1346,1.759,1347,2.948,1348,1.759,1349,1.759]],["title/modules/PrismaModule.html",[56,1.41,268,2.331]],["body/modules/PrismaModule.html",[0,0.301,3,0.159,4,0.159,5,0.143,7,0.176,8,0.011,9,0.009,10,0.009,16,0.282,17,1.006,56,2.315,58,2.516,59,3.241,65,3.661,66,2.95,67,2.715,69,3.369,81,4.39,268,4.623,285,5.495,286,3.595,960,6.057,993,5.495,1350,4.881,1351,4.881,1352,4.881,1353,5.569,1354,5.569]],["title/injectables/PrismaService.html",[76,0.784,81,2.137]],["body/injectables/PrismaService.html",[0,0.259,3,0.137,4,0.137,5,0.123,7,0.151,8,0.011,9,0.008,10,0.008,16,0.235,17,0.864,38,0.453,76,1.167,77,1.704,79,3.047,81,3.183,82,0.821,84,1.002,85,0.718,86,0.917,91,0.471,92,1.276,93,2.797,110,1.382,184,1.817,353,1.918,355,3.279,521,3.874,1355,4.19,1356,6.995,1357,6.269,1358,7.911,1359,7.911,1360,4.78,1361,6.269,1362,5.904,1363,4.78,1364,3.801,1365,4.78,1366,4.78,1367,3.801,1368,4.78,1369,4.19,1370,5.495,1371,4.78,1372,4.78,1373,4.78,1374,4.78,1375,4.78,1376,4.78]],["title/classes/ProfileEntity.html",[0,0.228,1377,2.717]],["body/classes/ProfileEntity.html",[0,0.266,2,0.492,3,0.073,4,0.073,5,0.066,7,0.081,8,0.011,9,0.005,10,0.005,16,0.208,29,0.64,34,1.155,38,0.777,82,0.817,85,0.96,91,0.253,101,1.601,102,2.635,132,2.627,138,3.34,218,2.8,243,3.536,245,3.815,375,1.303,405,1.76,423,1.421,541,2.121,569,1.262,578,3.661,585,2.746,587,2.4,589,3.238,590,0.915,598,3.813,601,3.377,739,4.214,740,3.875,741,2.041,748,2.941,749,2.941,751,4.693,754,2.941,765,2.041,766,2.041,767,2.041,770,2.041,771,2.041,772,2.041,773,4.693,801,2.218,1117,2.941,1118,2.041,1157,2.249,1190,4.315,1370,3.509,1377,2.585,1378,2.249,1379,5.85,1380,4.315,1381,5.85,1382,3.915,1383,4.315,1384,3.915,1385,4.315,1386,4.315,1387,4.796,1388,3.509,1389,3.509,1390,3.509,1391,2.249,1392,4.875,1393,2.566,1394,2.249,1395,3.509,1396,4.875,1397,2.249,1398,3.915,1399,2.566,1400,3.509,1401,2.566,1402,4.315,1403,2.249,1404,3.509,1405,2.566,1406,2.249,1407,3.509,1408,3.509,1409,2.249,1410,2.566,1411,2.566,1412,2.249,1413,2.249,1414,4.085,1415,2.249,1416,4.315,1417,2.249,1418,2.566,1419,3.184,1420,3.184,1421,2.249,1422,2.566,1423,2.566,1424,2.249,1425,2.566,1426,2.249,1427,3.509,1428,2.566,1429,1.885,1430,4.004,1431,2.249,1432,1.885,1433,1.885,1434,2.566,1435,2.566,1436,2.041,1437,2.249,1438,2.566,1439,2.566,1440,2.249,1441,2.566,1442,2.566,1443,2.566,1444,2.566,1445,2.566,1446,2.566,1447,2.566,1448,2.566,1449,2.566,1450,2.566]],["title/classes/ReactionsPost.html",[0,0.228,1237,2.717]],["body/classes/ReactionsPost.html",[0,0.388,2,1.134,3,0.169,4,0.169,5,0.152,7,0.226,8,0.011,9,0.009,10,0.009,16,0.269,29,1.474,34,1.705,353,2.194,570,3.971,734,2.883,792,4.056,793,3.817,794,4.702,795,5.701,796,4.056,797,3.275,1174,4.342,1175,4.702,1176,4.342,1177,4.702,1237,4.628,1246,3.817,1451,4.702]],["title/interfaces/Response.html",[205,2.331,939,2.717]],["body/interfaces/Response.html",[0,0.299,3,0.158,4,0.158,5,0.142,7,0.217,8,0.011,9,0.009,10,0.009,16,0.28,17,0.997,38,0.523,76,1.28,91,0.544,166,1.337,184,2.098,205,3.806,244,4.268,348,3.991,350,3.205,569,2.166,818,3.786,820,3.372,821,4.714,823,4.714,824,4.714,827,3.563,893,3.786,939,3.563,978,3.786,1027,4.053,1452,4.388,1453,6.559,1454,4.837,1455,4.837]],["title/guards/RolesGuard.html",[299,3.091,1456,3.347]],["body/guards/RolesGuard.html",[0,0.261,3,0.138,4,0.138,5,0.124,7,0.152,8,0.011,9,0.008,10,0.008,16,0.263,17,0.873,30,2.952,38,0.598,46,2.453,76,1.175,79,2.104,82,0.698,84,1.323,85,0.948,86,1.211,88,1.963,91,0.476,92,1.284,105,2.323,110,0.955,166,1.703,184,1.836,211,2.576,277,3.314,299,4.636,303,2.031,319,6.309,344,6.535,345,4.235,347,5.533,348,4.33,350,2.806,370,4.235,371,4.235,438,4.235,605,2.559,947,3.078,1457,4.235,1458,4.831,1459,4.831,1460,4.831,1461,6.312,1462,4.831,1463,4.235,1464,4.235,1465,6.312,1466,4.831,1467,4.831,1468,4.831]],["title/classes/RtGuard.html",[0,0.228,437,3.091]],["body/classes/RtGuard.html",[0,0.336,2,1.192,3,0.178,4,0.178,5,0.16,7,0.196,8,0.011,9,0.01,10,0.01,16,0.233,79,3.433,82,0.687,351,5.447,352,4.263,353,1.902,354,5.447,355,4.263,437,5.425,1095,4.565,1469,5.447,1470,6.215]],["title/injectables/RtStrategy.html",[76,0.784,479,2.887]],["body/injectables/RtStrategy.html",[0,0.264,3,0.14,4,0.14,5,0.126,7,0.154,8,0.011,9,0.008,10,0.008,16,0.291,17,0.882,38,0.603,46,3.801,76,1.184,77,1.741,79,2.769,82,0.702,84,1.332,85,0.954,86,1.219,91,0.482,92,1.293,110,0.965,166,1.183,187,2.984,210,2.586,211,1.687,286,3.152,303,2.053,352,3.35,353,1.494,355,3.35,375,3.227,376,4.28,377,5.135,379,4.669,383,5.953,384,4.28,385,4.28,386,4.28,387,3.586,388,4.36,390,4.28,391,4.28,392,4.28,393,4.28,398,5.055,479,4.36,494,3.883,520,4.28,842,3.586,1095,3.586,1471,4.28,1472,4.883,1473,6.356,1474,4.883,1475,4.883,1476,4.883,1477,4.883,1478,4.883]],["title/classes/SignupDto.html",[0,0.228,418,2.887]],["body/classes/SignupDto.html",[0,0.336,2,1.192,3,0.178,4,0.178,5,0.16,7,0.196,8,0.011,9,0.01,10,0.01,16,0.277,29,1.55,353,1.902,418,5.067,428,3.292,502,3.609,538,3.797,734,3.03,1037,4.012,1038,5.447,1039,4.942,1479,5.447]],["title/injectables/TimeoutInterceptor.html",[76,0.784,1480,3.347]],["body/injectables/TimeoutInterceptor.html",[0,0.299,3,0.158,4,0.158,5,0.142,7,0.174,8,0.011,9,0.009,10,0.009,16,0.28,17,0.997,38,0.523,47,4.053,76,1.28,77,1.967,82,0.61,84,1.156,85,0.829,86,1.059,91,0.544,92,1.398,110,1.09,166,1.337,184,2.098,348,4.548,350,3.205,818,4.714,819,5.047,820,4.572,821,5.372,823,5.133,824,4.714,827,3.563,1027,4.053,1480,5.464,1481,4.837,1482,5.518,1483,5.518]],["title/injectables/TransformInterceptor.html",[76,0.784,978,2.887]],["body/injectables/TransformInterceptor.html",[0,0.287,3,0.152,4,0.152,5,0.137,7,0.212,8,0.011,9,0.009,10,0.009,16,0.275,17,0.96,38,0.503,76,1.249,77,1.893,82,0.587,84,1.112,85,0.797,86,1.019,91,0.524,92,1.365,110,1.049,166,1.286,184,2.018,205,2.941,244,3.553,348,4.486,350,3.895,818,5.044,819,3.9,820,4.492,821,5.298,823,5.044,824,4.601,827,3.428,939,3.428,978,4.601,1027,3.9,1452,4.222,1453,4.654,1454,4.654,1455,4.654,1484,5.309]],["title/classes/UpdateCommentTextDto.html",[0,0.228,1242,2.887]],["body/classes/UpdateCommentTextDto.html",[0,0.336,2,1.192,3,0.178,4,0.178,5,0.16,7,0.196,8,0.011,9,0.01,10,0.01,16,0.277,29,1.55,169,2.019,353,1.902,567,4.012,573,3.292,733,4.565,734,3.03,735,4.942,736,4.942,1242,5.067,1485,5.447]],["title/classes/UpdateConversationDto.html",[0,0.228,655,2.444]],["body/classes/UpdateConversationDto.html",[0,0.414,2,0.898,3,0.134,4,0.134,5,0.121,7,0.232,8,0.011,9,0.008,10,0.008,16,0.259,29,1.167,34,1.997,38,0.698,82,0.765,85,1.04,86,1.509,91,0.462,101,1.628,105,1.723,109,1.902,132,3.016,169,1.521,353,2.254,420,2.377,569,1.95,587,3.015,589,2.9,590,1.669,593,2.861,595,3.276,596,3.276,598,3.14,625,4.079,639,2.719,655,3.591,659,2.719,663,2.719,738,2.593,740,2.196,801,2.593,802,2.861,806,3.212,807,5.052,810,5.052,811,3.439,812,3.023,1486,4.682,1487,4.682,1488,4.682]],["title/classes/UpdateMembersConversationDto.html",[0,0.228,659,2.444]],["body/classes/UpdateMembersConversationDto.html",[0,0.422,2,0.952,3,0.142,4,0.142,5,0.128,7,0.238,8,0.011,9,0.008,10,0.008,16,0.267,29,1.237,34,1.431,38,0.609,82,0.548,85,0.745,91,0.489,101,1.623,105,1.826,109,2.016,132,2.162,169,1.613,353,2.305,420,2.52,569,2.025,587,3.132,589,3.012,590,1.769,593,3.032,595,3.403,596,3.99,598,3.261,625,4.172,639,2.882,655,2.882,659,3.731,663,2.882,738,2.749,740,2.327,801,2.749,802,3.032,806,3.404,807,4.406,810,5.167,811,3.645,812,3.204,1489,4.962]],["title/classes/UpdateMessageDto.html",[0,0.228,1070,2.887]],["body/classes/UpdateMessageDto.html",[0,0.311,2,1.102,3,0.164,4,0.164,5,0.148,7,0.181,8,0.011,9,0.009,10,0.009,16,0.264,38,0.668,82,0.779,91,0.567,101,1.524,169,2.476,353,1.758,420,2.917,569,2.221,643,5.226,782,4.548,784,4.568,788,5.035,810,4.832,1070,4.832,1490,6.678,1491,5.744,1492,5.035,1493,4.219,1494,5.744]],["title/classes/UpdatePasswordDto.html",[0,0.228,426,2.887]],["body/classes/UpdatePasswordDto.html",[0,0.336,2,1.192,3,0.178,4,0.178,5,0.16,7,0.196,8,0.011,9,0.01,10,0.01,16,0.277,29,1.55,353,1.902,426,5.067,502,3.609,734,3.03,1037,4.012,1039,4.942,1495,5.447,1496,6.215,1497,5.447,1498,5.447]],["title/classes/UpdatePostDto.html",[0,0.228,1246,2.717]],["body/classes/UpdatePostDto.html",[0,0.388,2,1.134,3,0.169,4,0.169,5,0.152,7,0.226,8,0.011,9,0.009,10,0.009,16,0.269,29,1.474,34,1.705,353,2.194,570,3.971,734,2.883,792,4.056,793,3.817,794,4.702,795,5.701,796,4.056,797,3.275,1174,4.342,1175,4.702,1176,4.342,1177,4.702,1237,3.817,1246,4.628,1451,4.702]],["title/classes/UpdateRolesConversationDto.html",[0,0.228,663,2.444]],["body/classes/UpdateRolesConversationDto.html",[0,0.417,2,0.912,3,0.136,4,0.136,5,0.122,7,0.234,8,0.011,9,0.008,10,0.008,16,0.261,29,1.186,34,1.371,38,0.702,82,0.771,85,0.714,91,0.469,101,1.632,105,1.75,109,1.932,132,2.071,169,1.545,353,2.267,420,2.414,569,1.97,587,3.046,589,2.93,590,1.695,593,4.263,595,3.925,596,3.925,598,3.172,625,4.104,639,2.762,655,2.762,659,2.762,663,3.628,738,2.634,740,2.23,801,2.634,802,2.906,806,3.262,807,5.083,810,5.083,811,3.493,812,3.07,1499,4.755,1500,4.755,1501,4.755]],["title/classes/UpdateUserAvatarDto.html",[0,0.228,130,2.444]],["body/classes/UpdateUserAvatarDto.html",[0,0.421,2,1.153,3,0.172,4,0.172,5,0.155,7,0.245,8,0.011,9,0.009,10,0.009,16,0.271,29,1.498,125,3.49,130,4.205,132,2.618,136,3.49,138,3.329,353,2.378,734,2.93,1377,4.674,1502,4.414,1503,4.414,1504,4.779,1505,5.757]],["title/classes/UpdateUserCoverDto.html",[0,0.228,136,2.444]],["body/classes/UpdateUserCoverDto.html",[0,0.421,2,1.153,3,0.172,4,0.172,5,0.155,7,0.245,8,0.011,9,0.009,10,0.009,16,0.271,29,1.498,125,3.49,130,3.49,132,2.618,136,4.205,138,3.329,353,2.378,734,2.93,1377,4.674,1502,4.414,1503,4.414,1504,4.779,1505,5.757]],["title/classes/UpdateUserProfileDto.html",[0,0.228,125,2.444]],["body/classes/UpdateUserProfileDto.html",[0,0.317,2,0.656,3,0.098,4,0.098,5,0.088,7,0.185,8,0.011,9,0.006,10,0.006,16,0.186,29,0.852,34,0.986,38,0.75,82,0.874,85,0.879,91,0.337,101,1.561,102,2.819,125,2.886,130,1.985,132,2.801,136,1.985,138,3.561,218,2.687,243,3.102,245,3.409,353,1.967,423,1.893,541,1.81,569,1.567,578,3.475,601,2.345,734,1.666,739,4.533,740,3.75,741,2.718,748,2.51,749,2.51,751,4.301,754,2.51,773,3.65,801,1.893,804,6.288,1117,2.51,1377,5.253,1379,5.636,1380,4.356,1381,5.636,1382,3.952,1383,4.356,1384,3.952,1385,4.356,1386,4.356,1387,4.657,1388,2.996,1389,2.996,1390,2.996,1391,2.996,1392,4.356,1394,2.996,1395,2.996,1396,4.356,1397,2.996,1398,2.718,1400,4.356,1402,2.996,1403,2.996,1404,2.996,1406,2.996,1407,2.996,1408,2.996,1409,2.996,1412,2.996,1413,2.996,1414,3.65,1415,2.996,1416,2.996,1417,2.996,1419,2.718,1420,2.718,1421,2.996,1424,2.996,1426,2.996,1427,2.996,1502,2.51,1503,2.51,1504,2.718,1505,3.952,1506,3.418,1507,3.418,1508,3.418,1509,3.418,1510,3.418,1511,3.418,1512,3.418,1513,3.418,1514,3.418,1515,3.418,1516,3.418]],["title/classes/UserEntity.html",[0,0.228,1037,2.717]],["body/classes/UserEntity.html",[0,0.267,2,0.651,3,0.097,4,0.097,5,0.087,7,0.107,8,0.011,9,0.006,10,0.006,16,0.218,29,0.846,34,2.169,38,0.739,82,0.753,85,0.962,91,0.335,101,1.611,102,2.428,218,2.846,375,1.722,428,4.062,502,3.387,538,4.161,569,1.558,578,3.124,587,3.466,589,3.005,590,1.209,598,3.609,612,5.159,636,5.221,739,1.97,740,3.654,748,4.706,749,3.63,751,4.706,753,2.973,754,3.63,758,2.973,759,4.333,760,5.416,763,4.333,764,4.333,765,2.698,766,2.698,767,2.698,768,2.327,769,2.327,770,2.698,771,2.698,772,2.698,773,4.706,774,4.333,775,2.973,1037,3.191,1497,5.111,1498,5.111,1517,2.973,1518,3.392,1519,7.521,1520,4.943,1521,3.392,1522,4.943,1523,6.81,1524,3.392,1525,3.392,1526,3.392,1527,3.392,1528,3.392,1529,4.333,1530,3.392,1531,4.943,1532,4.943,1533,4.943,1534,4.943,1535,4.943,1536,3.392,1537,3.392,1538,3.392,1539,3.392,1540,3.392,1541,3.392,1542,3.392,1543,3.392]],["title/controllers/UsersController.html",[11,1.71,1544,3.091]],["body/controllers/UsersController.html",[0,0.122,3,0.064,4,0.064,5,0.058,7,0.071,8,0.011,9,0.005,10,0.005,11,0.915,13,0.915,15,1.143,16,0.247,17,0.407,18,3.691,19,2.206,20,2.206,21,2.206,22,2.206,23,2.206,24,2.206,25,2.206,26,1.308,27,2.206,28,2.206,29,0.562,34,2.206,38,0.625,39,1.193,82,0.701,84,1.33,85,0.953,86,1.217,88,0.915,91,0.222,92,0.735,93,2.664,96,3.594,97,3.691,98,3.594,99,3.594,101,1.525,102,2.262,104,3.101,105,2.999,106,1.974,109,2.836,110,1.254,111,3.797,116,2.874,119,3.884,120,1.791,122,4.437,125,3.003,129,1.791,130,3.003,132,1.573,135,1.791,136,3.003,138,2,140,3.883,141,1.376,142,1.247,143,1.654,144,1.654,145,1.654,146,1.791,147,4.258,148,4.03,153,1.791,154,1.791,155,1.791,156,1.791,158,3.16,162,3.877,163,1.454,164,3.877,166,1.537,169,2.211,171,1.974,173,1.974,175,3.798,176,1.974,178,1.974,218,0.803,389,1.545,405,2.477,413,3.16,423,3.515,428,1.193,436,4.144,439,1.654,442,1.376,443,1.247,444,1.143,446,1.545,447,1.545,448,1.545,449,1.545,450,1.545,451,1.545,452,1.545,453,1.545,454,1.545,459,4.353,502,3.287,538,2.206,863,3.165,869,3.165,1544,2.652,1545,1.974,1546,3.962,1547,3.962,1548,3.962,1549,3.962,1550,1.974,1551,2.252,1552,2.252,1553,2.252,1554,1.974,1555,2.252,1556,2.252,1557,3.165,1558,1.974,1559,2.252,1560,3.165,1561,2.252,1562,2.252,1563,2.252,1564,2.252,1565,2.252,1566,2.252,1567,2.252,1568,2.252,1569,1.974,1570,2.252,1571,2.252,1572,2.252,1573,1.974,1574,1.974,1575,1.974,1576,2.252,1577,2.252,1578,2.252,1579,2.252,1580,2.252,1581,2.252,1582,2.252,1583,2.252,1584,2.252,1585,2.252,1586,2.252,1587,2.252,1588,2.252,1589,2.252]],["title/modules/UsersModule.html",[56,1.41,63,2.444]],["body/modules/UsersModule.html",[0,0.246,3,0.13,4,0.13,5,0.117,7,0.144,8,0.011,9,0.008,10,0.008,13,2.466,16,0.292,17,0.823,38,0.432,40,2.94,56,2.034,58,2.057,59,2.847,63,4.847,65,3.216,66,2.412,67,2.22,69,2.96,71,3.709,75,3.991,82,0.503,84,0.954,85,0.684,86,0.873,92,0.927,110,0.9,116,3.082,158,5.135,163,2.94,201,3.919,232,3.124,262,5.038,268,4.323,270,3.991,271,5.321,272,6.384,274,5.321,324,3.991,327,3.991,481,3.991,833,3.344,834,3.621,993,4.827,1544,5.016,1574,3.991,1590,3.991,1591,4.553,1592,3.991,1593,3.991,1594,4.553,1595,4.553,1596,4.553,1597,4.553,1598,4.553,1599,4.553]],["title/injectables/UsersService.html",[76,0.784,158,2.572]],["body/injectables/UsersService.html",[0,0.106,3,0.056,4,0.056,5,0.05,7,0.062,8,0.011,9,0.004,10,0.004,16,0.234,17,0.354,38,0.632,76,0.6,77,0.699,79,0.853,80,1.344,81,2.875,82,0.737,84,1.398,85,1.002,86,1.28,88,0.796,91,0.193,92,0.656,93,2.687,94,2.826,95,2.826,96,2.564,97,2.511,98,3.268,99,3.268,100,2.826,101,1.516,105,1.753,109,3.192,110,1.28,111,3.843,112,2.826,113,3.267,119,3.806,120,2.564,122,4.758,125,2.766,129,1.558,130,2.766,132,0.853,135,1.558,136,2.766,138,1.085,149,1.717,152,1.717,153,1.558,154,1.558,155,1.558,156,1.558,158,1.97,163,2.653,166,1.569,169,2.31,211,2.412,218,0.699,229,2.607,243,1.708,244,1.708,303,3.262,389,1.344,413,2.91,420,0.995,428,1.038,439,1.439,441,1.344,443,1.085,444,0.995,502,3.632,513,1.558,514,1.558,515,2.368,517,1.717,518,1.439,519,1.344,521,4.107,532,2.826,536,2.564,538,3.217,541,1.708,542,3.864,551,4.503,552,2.826,555,1.717,578,0.955,594,3.268,597,1.558,721,4.758,844,1.558,878,2.082,947,0.955,1154,1.558,1319,4.174,1330,4.174,1546,2.826,1547,3.602,1548,2.826,1549,3.602,1550,2.826,1554,1.717,1557,4.174,1558,2.826,1569,1.717,1573,1.717,1575,1.717,1600,1.717,1601,1.959,1602,1.959,1603,1.959,1604,1.959,1605,1.959,1606,1.959,1607,1.959,1608,1.959,1609,1.959,1610,1.959,1611,1.959,1612,3.224,1613,1.959,1614,1.959,1615,4.109,1616,3.224,1617,1.959,1618,3.224,1619,3.224,1620,1.959,1621,1.959,1622,1.959,1623,1.959,1624,1.959,1625,1.959,1626,1.959,1627,3.224,1628,1.959,1629,3.224,1630,3.224,1631,3.224,1632,1.959,1633,4.109,1634,1.959,1635,1.959,1636,1.959,1637,3.224,1638,1.959]],["title/injectables/ValidationPipe.html",[76,0.784,1639,3.347]],["body/injectables/ValidationPipe.html",[0,0.369,3,0.13,4,0.13,5,0.117,7,0.143,8,0.011,9,0.008,10,0.008,16,0.255,17,0.819,38,0.754,76,1.127,77,1.615,82,0.669,84,1.268,85,0.908,86,1.161,91,0.447,92,1.231,93,2.282,101,0.869,110,1.195,166,1.65,184,1.722,187,4.162,211,2.512,229,1.974,375,2.3,521,2.51,541,2.4,542,2.925,578,2.209,590,1.615,632,2.768,874,2.925,947,3.321,965,4.442,1161,4.811,1162,5.303,1163,5.781,1164,6.372,1166,3.603,1167,5.303,1171,3.971,1172,3.971,1429,3.328,1493,3.328,1639,4.811,1640,3.971,1641,6.05,1642,6.05,1643,4.531,1644,7.269,1645,4.531,1646,4.531,1647,4.531,1648,4.811,1649,4.531,1650,3.971,1651,4.531,1652,4.531,1653,4.531]],["title/coverage.html",[1654,4.578]],["body/coverage.html",[0,0.45,1,0.99,5,0.048,6,1.638,8,0.011,9,0.004,10,0.004,11,2.492,12,1.373,14,1.638,31,1.373,38,0.177,56,0.626,64,1.282,70,1.373,76,1.42,78,1.638,81,0.949,89,1.638,90,1.638,105,0.688,113,1.282,116,0.949,125,1.085,130,1.085,136,1.085,158,1.142,182,1.486,183,1.638,192,1.142,194,1.207,205,1.035,229,0.814,235,1.373,236,1.638,251,1.207,280,1.373,288,1.373,294,1.373,299,1.373,335,2.827,336,1.638,343,1.638,373,1.282,374,1.638,395,1.373,396,1.638,413,1.142,418,1.282,426,1.282,433,1.207,435,1.486,436,1.282,437,1.373,441,1.282,442,1.142,443,1.035,444,2.976,479,1.282,495,1.638,515,1.373,516,1.486,518,1.373,519,1.282,541,4.657,567,1.207,568,1.638,591,1.373,592,1.638,613,1.373,614,1.638,625,1.035,634,1.282,639,1.085,641,2.127,645,1.142,650,1.207,655,1.085,659,1.085,663,1.085,668,1.207,699,1.638,711,1.486,731,1.282,732,1.638,733,2.919,737,1.638,738,3.398,768,1.282,769,1.282,782,1.207,783,1.638,784,2.466,790,1.282,791,1.638,792,3.174,793,1.207,798,1.282,799,1.638,800,1.638,807,3.174,813,1.282,814,1.638,816,1.486,817,1.638,833,1.373,834,1.486,835,1.638,848,1.373,849,1.638,886,1.486,887,1.486,888,1.486,889,1.207,920,1.638,932,2.466,934,1.486,935,1.638,939,2.002,940,1.373,941,1.638,952,4.946,976,1.373,978,1.282,980,1.638,981,1.638,985,1.638,989,1.486,994,1.638,1024,1.638,1036,1.638,1037,1.207,1040,1.373,1041,1.638,1049,1.207,1070,1.282,1104,1.638,1145,1.638,1158,1.486,1159,1.638,1160,1.638,1173,1.638,1191,1.373,1192,1.638,1237,1.207,1242,1.282,1246,1.207,1250,1.207,1297,1.638,1310,1.486,1355,1.638,1377,1.207,1378,1.638,1432,1.373,1433,1.373,1451,2.466,1452,2.466,1456,1.486,1457,1.638,1469,1.638,1471,1.638,1479,1.638,1480,1.486,1481,1.638,1485,1.638,1490,1.638,1495,1.638,1502,2.919,1503,2.919,1517,1.638,1544,1.373,1545,1.638,1600,1.638,1639,1.486,1640,1.638,1654,1.486,1655,1.373,1656,1.869,1657,1.869,1658,7.415,1659,7.131,1660,4.626,1661,2.718,1662,7.962,1663,1.638,1664,8.461,1665,1.638,1666,1.869,1667,1.869,1668,1.638,1669,1.638,1670,5.138,1671,4.626,1672,1.638,1673,1.638,1674,3.484,1675,1.638,1676,2.466,1677,1.638,1678,3.484,1679,1.638,1680,1.638,1681,3.975,1682,1.638,1683,1.638,1684,1.638,1685,1.638,1686,1.638,1687,1.638,1688,1.638,1689,2.466,1690,2.466,1691,1.486,1692,1.486,1693,2.466,1694,2.466,1695,2.466,1696,3.101,1697,3.975,1698,3.975,1699,2.718,1700,1.638,1701,1.638,1702,1.638,1703,3.975,1704,1.638,1705,3.161,1706,1.486,1707,1.638,1708,3.975,1709,1.869,1710,1.869,1711,2.466,1712,1.638,1713,2.466,1714,2.718,1715,1.638,1716,1.869,1717,1.869]],["title/dependencies.html",[59,2.376,1718,3.076]],["body/dependencies.html",[0,0.34,8,0.011,9,0.008,10,0.008,17,0.868,29,1.198,59,2.254,189,3.297,210,2.546,277,3.297,286,3.103,297,4.212,352,3.297,379,3.53,387,4.62,388,4.315,485,3.821,590,1.713,710,3.53,827,3.103,883,5.514,1077,4.212,1080,5.514,1081,3.821,1163,3.821,1367,3.821,1429,3.53,1492,4.212,1493,3.53,1719,4.805,1720,6.29,1721,4.805,1722,4.805,1723,7.722,1724,4.805,1725,6.29,1726,4.805,1727,4.805,1728,6.29,1729,4.805,1730,4.805,1731,4.212,1732,4.805,1733,4.805,1734,4.805,1735,4.212,1736,4.805,1737,4.212,1738,4.212,1739,4.805,1740,4.805,1741,4.212,1742,4.805,1743,4.212,1744,4.805,1745,4.805,1746,4.805,1747,3.821,1748,4.805,1749,4.805,1750,4.805,1751,4.805,1752,4.805,1753,4.805,1754,6.29,1755,4.805,1756,4.212,1757,4.805,1758,4.805]],["title/miscellaneous/enumerations.html",[1759,2.038,1760,4.44]],["body/miscellaneous/enumerations.html",[1,3.606,8,0.011,9,0.007,10,0.007,30,3.322,34,1.568,91,0.382,105,2.505,218,1.938,965,5.393,1154,4.323,1155,4.765,1384,4.323,1419,4.323,1420,3.082,1436,4.323,1759,2.251,1760,3.397,1761,5.437,1762,8.109,1763,5.437,1764,5.437,1765,5.437,1766,5.437,1767,5.437,1768,5.437,1769,5.437,1770,5.437,1771,5.437,1772,5.437,1773,3.876,1774,3.876,1775,3.876,1776,3.876,1777,5.437,1778,5.437,1779,5.437,1780,5.437,1781,5.437,1782,5.437,1783,5.437,1784,3.876,1785,5.437,1786,5.437,1787,4.323,1788,5.437,1789,5.437,1790,5.437,1791,5.437,1792,5.437,1793,3.876,1794,3.397,1795,6.28,1796,5.437,1797,5.437,1798,5.437,1799,5.437,1800,5.437,1801,3.876,1802,3.876,1803,5.437,1804,5.437,1805,3.876]],["title/classes/fullNameValidator.html",[0,0.228,1432,3.091]],["body/classes/fullNameValidator.html",[0,0.353,2,0.976,3,0.146,4,0.146,5,0.131,7,0.16,8,0.011,9,0.008,10,0.008,16,0.191,38,0.619,82,0.721,84,1.368,85,1.142,86,1.252,91,0.502,92,1.328,93,1.704,101,1.458,110,1.29,166,1.581,184,2.481,211,1.758,335,3.108,375,3.314,573,2.695,590,1.814,605,2.695,947,3.182,1414,3.736,1432,4.794,1689,4.045,1806,4.944,1807,4.477,1808,4.477,1809,5.612,1810,5.087,1811,5.519,1812,4.794,1813,5.087,1814,4.477,1815,4.045,1816,3.736,1817,3.736,1818,3.49]],["title/miscellaneous/functions.html",[1759,2.038,1819,4.44]],["body/miscellaneous/functions.html",[8,0.011,9,0.007,10,0.007,15,3.556,38,0.762,84,1.683,85,1.206,86,1.541,91,0.408,101,1.609,110,1.451,111,2.89,192,3.478,194,4.199,232,5.037,578,3.86,612,3.904,874,2.673,886,4.526,887,4.526,888,4.526,910,4.989,947,2.775,964,3.041,965,2.53,989,5.172,1118,4.526,1362,5.172,1364,3.292,1431,3.629,1676,3.292,1678,3.629,1679,4.989,1680,4.989,1682,3.629,1683,4.989,1685,3.629,1686,4.989,1687,3.629,1688,4.989,1704,3.629,1705,6.033,1706,3.292,1707,3.629,1711,3.292,1712,5.701,1759,2.404,1819,3.629,1820,4.14,1821,3.629,1822,6.504,1823,4.14,1824,3.629,1825,3.629,1826,4.14,1827,4.14,1828,4.14,1829,4.14,1830,4.14,1831,4.14,1832,4.14,1833,4.14,1834,4.14,1835,4.14,1836,4.14,1837,3.629,1838,4.14,1839,4.14,1840,4.14,1841,4.14]],["title/classes/imageValidator.html",[0,0.228,1691,3.347]],["body/classes/imageValidator.html",[0,0.342,2,0.929,3,0.139,4,0.139,5,0.125,7,0.153,8,0.011,9,0.008,10,0.008,16,0.181,38,0.599,82,0.699,84,1.325,85,1.057,86,1.213,91,0.478,92,1.287,93,1.623,101,1.485,110,1.249,111,3.21,166,1.532,175,5.171,184,2.404,211,2.185,303,2.037,375,3.574,560,3.127,590,1.727,605,3.349,947,3.083,1690,3.852,1691,5.028,1692,3.852,1806,4.829,1807,4.338,1808,4.338,1809,5.548,1811,5.447,1814,4.338,1818,3.323,1842,4.844,1843,4.844,1844,4.844,1845,4.246,1846,4.844,1847,7.04,1848,4.844]],["title/index.html",[91,0.346,1849,3.076,1850,3.076]],["body/index.html",[0,0.22,1,1.69,4,0.055,5,0.122,8,0.011,9,0.004,10,0.004,13,0.786,30,1.182,34,0.92,45,1.421,46,0.982,51,1.421,53,1.249,59,1.496,67,0.943,69,0.943,85,0.29,92,0.394,97,3.637,104,4.083,105,2.72,110,0.382,115,2.06,116,0.982,122,3.84,132,1.39,138,1.071,146,1.538,163,2.629,169,2.158,175,1.421,189,2.189,194,1.249,205,1.071,210,1.025,218,1.452,229,2.71,239,3.586,242,3.569,243,1.025,244,1.025,305,1.695,312,1.538,315,2.343,328,1.538,330,3.569,363,2.537,364,1.538,387,1.421,388,2.189,405,1.327,420,2.654,428,1.69,430,4.25,502,1.853,530,1.538,538,1.182,546,1.695,590,0.69,595,1.69,596,1.025,615,2.537,627,5.282,636,1.421,641,3.241,652,2.797,665,3.569,722,1.695,740,1.496,797,2.256,836,1.421,857,4.932,868,1.695,874,1.249,948,1.695,962,2.797,968,1.695,969,4.142,971,1.695,1079,1.538,1081,2.537,1095,1.421,1114,3.569,1149,1.695,1161,1.538,1193,2.797,1207,1.695,1208,3.238,1225,1.538,1316,1.695,1367,1.538,1369,2.797,1414,1.421,1429,1.421,1436,3.238,1437,1.695,1493,1.421,1560,2.797,1648,3.238,1654,1.538,1655,1.421,1713,1.538,1731,1.695,1735,1.695,1737,3.569,1738,2.797,1741,1.695,1743,1.695,1747,5.128,1756,1.695,1787,1.538,1794,1.695,1851,1.934,1852,1.695,1853,2.797,1854,1.934,1855,3.191,1856,3.191,1857,4.725,1858,1.934,1859,1.695,1860,1.695,1861,1.934,1862,1.934,1863,1.934,1864,1.934,1865,1.934,1866,1.934,1867,1.934,1868,1.934,1869,3.191,1870,1.934,1871,1.934,1872,1.934,1873,1.934,1874,3.191,1875,1.934,1876,3.191,1877,1.934,1878,1.934,1879,1.934,1880,1.934,1881,1.934,1882,1.934,1883,1.934,1884,1.934,1885,1.934,1886,4.072,1887,1.934,1888,1.934,1889,3.191,1890,1.934,1891,3.191,1892,3.191,1893,1.934,1894,1.934,1895,1.934,1896,1.934,1897,1.934,1898,5.952,1899,1.695,1900,1.934,1901,1.695,1902,1.934,1903,3.191,1904,1.934,1905,4.072,1906,1.934,1907,1.934,1908,3.191,1909,1.695,1910,1.934,1911,1.934,1912,1.934,1913,1.934,1914,1.695,1915,1.934,1916,1.934,1917,1.934,1918,1.934,1919,1.934,1920,1.934,1921,1.934,1922,3.191,1923,1.934,1924,1.934,1925,1.934,1926,1.934,1927,1.934,1928,1.934,1929,1.934,1930,1.934,1931,1.934,1932,1.934,1933,1.934,1934,3.191,1935,1.934,1936,3.191,1937,1.934,1938,1.934,1939,1.695,1940,1.934,1941,3.569,1942,1.934,1943,1.934,1944,1.934,1945,1.934,1946,1.934,1947,1.934,1948,3.191,1949,1.934,1950,1.934,1951,1.934,1952,1.934,1953,1.934,1954,1.934,1955,1.934,1956,1.934,1957,1.934,1958,1.934,1959,1.934,1960,1.934,1961,1.695,1962,1.934,1963,1.934,1964,1.934,1965,3.191,1966,1.934,1967,1.934,1968,1.934,1969,4.583,1970,1.934,1971,1.934,1972,1.934,1973,1.934,1974,1.934,1975,1.934,1976,1.934,1977,3.191,1978,1.934,1979,1.934,1980,1.934,1981,1.934,1982,1.934,1983,1.934,1984,1.934,1985,1.934,1986,1.934,1987,1.934,1988,1.934,1989,5.228,1990,1.934,1991,1.934,1992,1.934,1993,1.934,1994,1.934,1995,1.934,1996,1.934,1997,1.695,1998,1.695,1999,1.695,2000,1.934,2001,1.934,2002,1.934,2003,1.934,2004,1.695,2005,1.934,2006,1.695,2007,1.934,2008,1.934,2009,1.934,2010,1.934,2011,1.934,2012,7.084,2013,3.191,2014,1.934,2015,3.191,2016,1.934,2017,1.934,2018,6.809,2019,1.934,2020,1.934,2021,3.191,2022,1.934,2023,1.934,2024,1.934,2025,3.191,2026,1.934,2027,1.934,2028,1.934,2029,1.934,2030,1.934,2031,3.191,2032,1.934,2033,3.191,2034,1.934,2035,1.934,2036,1.934,2037,3.569,2038,3.191,2039,1.934,2040,1.934,2041,1.934,2042,1.934,2043,1.934,2044,1.934,2045,3.191,2046,3.191,2047,1.934,2048,1.934,2049,1.934,2050,2.537,2051,1.934,2052,1.934,2053,1.934,2054,3.191,2055,1.934,2056,1.934,2057,1.934,2058,1.934,2059,1.934,2060,1.695,2061,1.934,2062,1.934,2063,1.934,2064,1.934,2065,1.934,2066,1.934,2067,1.934,2068,1.934,2069,1.934,2070,1.934,2071,1.934,2072,1.934,2073,1.934,2074,1.934,2075,3.191,2076,3.191,2077,1.934,2078,1.934,2079,1.695,2080,1.934,2081,1.934,2082,1.934,2083,1.934,2084,1.934,2085,1.934,2086,1.934,2087,1.934,2088,3.191,2089,3.191,2090,1.934,2091,1.934,2092,1.934,2093,3.191,2094,1.934,2095,1.934,2096,3.191,2097,1.934,2098,1.934,2099,1.934,2100,1.934,2101,1.934,2102,1.934,2103,1.934,2104,3.191,2105,3.191,2106,3.191,2107,3.191,2108,1.934,2109,1.934,2110,1.934,2111,1.934,2112,1.934,2113,2.343,2114,1.934,2115,1.934,2116,1.695,2117,1.934,2118,1.695]],["title/license.html",[1849,3.076,1850,3.076,2113,2.577]],["body/license.html",[8,0.008,9,0.008,10,0.008,42,3.705,67,2.46,210,2.672,797,2.794,836,4.768,957,4.422,1440,4.422,1655,3.705,1859,4.422,2050,4.012,2113,3.705,2116,6.292,2118,4.422,2119,4.422,2120,4.422,2121,4.012,2122,4.012,2123,6.492,2124,5.045,2125,5.045,2126,5.045,2127,5.045,2128,5.045,2129,5.045,2130,6.492,2131,8.356,2132,5.045,2133,5.045,2134,7.178,2135,5.045,2136,6.492,2137,5.045,2138,5.045,2139,5.045,2140,5.045,2141,5.045,2142,5.045,2143,5.045,2144,5.045,2145,5.045,2146,6.492,2147,5.045,2148,5.045,2149,5.045,2150,5.045,2151,5.045,2152,5.045,2153,5.045,2154,6.492,2155,6.492,2156,5.045,2157,5.045,2158,5.045,2159,5.045,2160,5.045,2161,5.045,2162,5.045,2163,5.045,2164,5.045,2165,5.045,2166,5.045,2167,5.045,2168,5.045,2169,5.045,2170,5.045,2171,5.045,2172,5.045,2173,5.045,2174,5.045,2175,5.045,2176,5.045,2177,5.045,2178,5.045,2179,5.045,2180,5.045,2181,5.045]],["title/modules.html",[58,2.6]],["body/modules.html",[8,0.009,9,0.009,10,0.009,57,3.953,58,2.603,63,3.347,258,4.233,262,3.721,263,3.953,264,3.953,265,3.953,266,3.953,267,3.953,268,3.192,1941,7.497,1961,5.051,2182,8.552,2183,8.552,2184,8.604,2185,5.763]],["title/overview.html",[2186,5.046]],["body/overview.html",[2,0.739,8,0.011,9,0.007,10,0.007,13,1.565,57,5.226,58,1.74,59,2.538,60,3.376,61,3.376,62,3.376,63,4.785,64,4.293,65,2.867,66,2.04,67,1.878,77,1.373,81,3.868,158,4.655,243,2.04,251,4.04,258,6.296,259,3.376,260,3.376,261,3.376,262,5.277,263,5.423,264,4.906,265,4.293,266,4.906,267,5.423,268,4.437,373,4.293,433,4.04,476,3.376,478,3.376,479,4.293,668,4.04,693,3.376,695,3.376,760,3.062,878,2.486,889,4.04,893,2.642,916,3.376,917,3.376,1049,4.04,1100,3.376,1101,3.376,1117,2.829,1250,4.04,1292,3.376,1294,3.376,1350,3.376,1351,3.376,1352,3.376,1456,3.062,1529,3.376,1590,3.376,1592,3.376,1593,3.376,2186,3.376,2187,3.851]],["title/classes/passwordValidator.html",[0,0.228,768,2.887]],["body/classes/passwordValidator.html",[0,0.351,2,0.968,3,0.144,4,0.144,5,0.13,7,0.159,8,0.011,9,0.008,10,0.008,16,0.189,38,0.615,82,0.718,84,1.36,85,1.078,86,1.245,91,0.498,92,1.321,93,1.69,101,1.504,110,1.283,166,1.573,184,2.468,211,1.743,335,3.083,375,3.296,428,2.672,573,2.672,590,1.799,605,2.672,768,4.453,947,3.165,1693,4.012,1806,4.924,1807,4.453,1808,4.453,1809,5.601,1811,5.507,1812,4.768,1814,4.453,1816,3.705,1817,3.705,1818,3.461,2188,5.045,2189,5.045,2190,4.422,2191,4.422,2192,4.422,2193,4.422]],["title/classes/phoneNumberValidator.html",[0,0.228,1433,3.091]],["body/classes/phoneNumberValidator.html",[0,0.351,2,0.968,3,0.144,4,0.144,5,0.13,7,0.159,8,0.011,9,0.008,10,0.008,16,0.189,38,0.615,82,0.718,84,1.36,85,1.078,86,1.245,91,0.498,92,1.321,93,1.69,101,1.504,110,1.283,166,1.573,184,2.468,211,1.743,335,3.083,375,3.296,541,2.672,573,2.672,578,2.46,590,1.799,605,2.672,947,3.165,1387,4.012,1433,4.768,1694,4.012,1806,4.924,1807,4.453,1808,4.453,1809,5.601,1811,5.507,1812,4.768,1814,4.453,1816,3.705,1817,3.705,1818,3.461,2194,5.045,2195,5.045,2196,4.422,2197,4.422]],["title/properties.html",[569,1.597,1718,3.076]],["body/properties.html",[8,0.011,9,0.009,10,0.009,34,1.728,210,3.173,239,4.957,255,5.25,315,5.699,569,1.889,1747,4.763,1852,5.25,1853,5.25,1899,5.25,1901,5.25,2006,5.25,2037,5.25,2050,4.763,2079,5.25,2113,4.4,2119,5.25,2120,5.25,2121,4.763,2122,4.763,2198,5.99,2199,5.99,2200,5.99,2201,5.25,2202,7.225,2203,5.99,2204,5.25]],["title/miscellaneous/typealiases.html",[1759,2.038,2205,5.065]],["body/miscellaneous/typealiases.html",[8,0.01,9,0.01,10,0.01,38,0.625,91,0.651,1705,6.084,1706,5.246,1759,3.831,1825,5.783,1837,6.706,2206,6.597]],["title/classes/usenameValidator.html",[0,0.228,769,2.887]],["body/classes/usenameValidator.html",[0,0.353,2,0.976,3,0.146,4,0.146,5,0.131,7,0.16,8,0.011,9,0.008,10,0.008,16,0.191,38,0.619,82,0.721,84,1.368,85,1.082,86,1.252,91,0.502,92,1.328,93,1.704,101,1.508,110,1.29,166,1.581,184,2.481,211,1.758,335,3.108,375,3.314,538,3.108,573,2.695,590,1.814,605,2.695,769,4.477,947,3.182,1695,4.045,1806,4.944,1807,4.477,1808,4.477,1809,5.612,1811,5.519,1812,4.794,1814,4.477,1815,4.045,1816,3.736,1817,3.736,1818,3.49,2207,5.087,2208,5.087]],["title/miscellaneous/variables.html",[1759,2.038,2209,4.44]],["body/miscellaneous/variables.html",[3,0.102,8,0.011,9,0.005,10,0.005,30,1.351,31,2.613,34,1.026,35,2.829,36,1.758,37,3.51,38,0.696,39,1.885,40,1.428,41,1.758,42,1.624,43,1.624,46,2.598,47,1.624,48,2.829,50,1.758,51,1.624,52,1.624,53,1.428,56,1.192,85,0.332,91,0.218,101,1.208,105,2.205,107,3.119,116,1.807,166,1.239,211,2.264,229,2.61,239,2.441,243,1.171,244,2.97,303,1.877,315,3.279,335,4.003,348,2.066,350,2.066,363,2.829,364,1.758,377,1.517,379,1.624,383,1.758,388,1.517,405,2.441,423,1.971,428,2.365,430,3.126,435,2.829,436,2.441,441,2.441,442,2.174,443,1.971,444,1.123,515,2.613,516,2.829,518,2.613,519,2.441,530,2.829,541,1.171,578,2.177,595,1.171,601,1.517,605,1.171,627,2.829,630,1.938,632,2.174,641,3.51,711,2.829,842,1.624,874,1.428,878,1.428,940,1.624,946,1.938,952,1.624,964,5.994,965,4.967,972,1.938,973,3.119,1032,1.938,1079,1.758,1082,3.119,1208,1.758,1310,2.829,1333,3.119,1339,3.119,1362,1.758,1364,2.829,1382,1.758,1398,1.758,1463,3.119,1464,1.938,1648,5.009,1650,1.938,1655,2.613,1661,1.938,1663,3.119,1665,3.119,1668,1.938,1669,3.119,1670,5.742,1672,1.938,1673,3.119,1674,1.938,1675,3.913,1676,1.758,1677,3.119,1684,1.938,1689,1.758,1690,1.758,1692,2.829,1693,1.758,1694,1.758,1695,1.758,1699,3.119,1700,3.119,1701,3.119,1702,1.938,1711,1.758,1713,4.069,1714,3.913,1715,3.119,1759,1.284,1787,1.758,1815,2.829,1821,1.938,1824,1.938,1845,1.938,1860,1.938,1909,3.119,1914,3.119,1939,3.119,1969,1.938,1997,1.938,1998,1.938,1999,1.938,2004,3.119,2060,1.938,2121,1.758,2122,1.758,2190,1.938,2191,1.938,2192,1.938,2193,1.938,2196,1.938,2197,1.938,2201,1.938,2204,1.938,2209,1.938,2210,6.299,2211,4.465,2212,3.558,2213,2.211,2214,3.558,2215,2.211,2216,2.211,2217,2.211,2218,2.211,2219,2.211,2220,2.211,2221,2.211,2222,2.211,2223,2.211,2224,2.211,2225,2.211,2226,5.116,2227,2.211,2228,2.211,2229,3.558,2230,3.558,2231,2.211,2232,2.211,2233,2.211,2234,2.211,2235,3.558,2236,2.211,2237,2.211,2238,2.211,2239,2.211,2240,2.211,2241,2.211,2242,2.211,2243,2.211,2244,2.211,2245,2.211,2246,2.211,2247,2.211,2248,2.211,2249,2.211,2250,2.211,2251,2.211,2252,2.211,2253,5.116,2254,2.211,2255,2.211,2256,2.211,2257,2.211,2258,2.211,2259,2.211,2260,2.211,2261,2.211,2262,2.211,2263,3.558,2264,2.211,2265,2.211,2266,2.211,2267,3.558,2268,2.211,2269,2.211,2270,2.211,2271,2.211,2272,2.211,2273,2.211,2274,2.211,2275,2.211,2276,2.211,2277,2.211,2278,2.211,2279,2.211,2280,2.211,2281,2.211,2282,2.211,2283,2.211,2284,2.211,2285,2.211,2286,2.211,2287,2.211,2288,2.211,2289,2.211,2290,2.211,2291,2.211,2292,2.211,2293,2.211,2294,2.211,2295,2.211,2296,2.211,2297,2.211,2298,2.211,2299,2.211,2300,2.211,2301,2.211,2302,2.211,2303,2.211]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":541,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":1749,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1734,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1733,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1745,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1664,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1703,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1710,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1708,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1709,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1658,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1659,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1660,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1671,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1697,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1696,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1681,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1698,"title":{},"body":{"coverage.html":{}}}],["02t05:01:03.938z",{"_index":1444,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["02t05:01:03.938z'})@type(undefined)@isdate",{"_index":1409,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["07",{"_index":1408,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["09999999999",{"_index":1442,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["09999999999'})@isstring()@validate(phonenumbervalidator",{"_index":1426,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1",{"_index":243,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileController.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.18.0",{"_index":1757,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1739,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":2199,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":1736,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":878,"title":{},"body":{"controllers/FileController.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1392,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["120",{"_index":752,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["120)@minlength(2",{"_index":747,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["123",{"_index":801,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["150",{"_index":1404,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["17.0.3",{"_index":1720,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1395,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["19",{"_index":1445,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["1970",{"_index":2262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["19})@isnumber()@min(17",{"_index":1394,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["1})@isnumber()@min(0)@max(2",{"_index":1421,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2",{"_index":1117,"title":{},"body":{"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"overview.html":{}}}],["2.2.0",{"_index":1724,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":1740,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":760,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"overview.html":{}}}],["20)@minlength(2",{"_index":758,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["200",{"_index":241,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":1407,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["2022",{"_index":2118,"title":{},"body":{"index.html":{},"license.html":{}}}],["21",{"_index":1540,"title":{},"body":{"classes/UserEntity.html":{}}}],["21)@minlength(7",{"_index":1528,"title":{},"body":{"classes/UserEntity.html":{}}}],["3",{"_index":749,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["3.0.0",{"_index":1726,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1751,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":1730,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1746,"title":{},"body":{"dependencies.html":{}}}],["4.2.1",{"_index":1728,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":1753,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":248,"title":{},"body":{"controllers/AppController.html":{}}}],["41",{"_index":2187,"title":{},"body":{"overview.html":{}}}],["45",{"_index":1416,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1413,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["456",{"_index":802,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["5.0.1",{"_index":1732,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1667,"title":{},"body":{"coverage.html":{}}}],["6.0.0",{"_index":1742,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1727,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":1755,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1752,"title":{},"body":{"dependencies.html":{}}}],["789",{"_index":812,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["789'})@isstring()@isnotempty",{"_index":803,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["8",{"_index":1529,"title":{},"body":{"classes/UserEntity.html":{},"overview.html":{}}}],["8.0.1",{"_index":1744,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1758,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1666,"title":{},"body":{"coverage.html":{}}}],["9.0.0",{"_index":1723,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":1725,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":2197,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":2196,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../documentation",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["ab*cd",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1402,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["abc'})@isstring()@length(3",{"_index":1412,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["above",{"_index":2153,"title":{},"body":{"license.html":{}}}],["acceptable",{"_index":2243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":363,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":529,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{},"classes/ProfileEntity.html":{},"controllers/UsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["account'})@isstring()@maxlength(151",{"_index":1403,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["account.'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["action",{"_index":2175,"title":{},"body":{"license.html":{}}}],["add",{"_index":1207,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["addbasicauth",{"_index":2287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addbearerauth",{"_index":2281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addcomment",{"_index":1194,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["addcomment(userid",{"_index":1205,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["additional",{"_index":953,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["address",{"_index":1379,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":1,"title":{"classes/Admin.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin.controller",{"_index":73,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":72,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin01",{"_index":779,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admin02",{"_index":780,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admincontroller",{"_index":12,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":57,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["admins",{"_index":593,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["adminservice",{"_index":64,"title":{"injectables/AdminService.html":{}},"body":{"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["adminuserscontroller",{"_index":70,"title":{"controllers/AdminUsersController.html":{}},"body":{"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["age",{"_index":1380,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["agedate",{"_index":2259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alcohol",{"_index":1799,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":2206,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":858,"title":{},"body":{"controllers/FileController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":863,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":182,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allexceptionsfilter.handleresponse(request",{"_index":217,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["already",{"_index":1339,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":2055,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":1982,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":2144,"title":{},"body":{"license.html":{}}}],["api",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":2203,"title":{},"body":{"properties.html":{}}}],["api:latest",{"_index":2040,"title":{},"body":{"index.html":{}}}],["api_key",{"_index":2290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":1851,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiconflictresponse",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["apiextramodels",{"_index":789,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["apiforbiddenresponse",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiinternalservererrorresponse",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apimethodnotallowedresponse",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotacceptableresponse",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":147,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":148,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apipayloadtoolargeresponse",{"_index":884,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["apiproperty",{"_index":598,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["apiproperty({example",{"_index":1406,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["apiproperty({required",{"_index":604,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apiproperty({type",{"_index":739,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["apipropertyoptional",{"_index":762,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["apirequesttimeoutresponse",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":250,"title":{},"body":{"controllers/AppController.html":{}}}],["apiresponse({status",{"_index":247,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":1915,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('admin",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["apitags('auth",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":671,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":894,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('home",{"_index":254,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('posts",{"_index":1264,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1576,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiunsupportedmediatyperesponse",{"_index":885,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["app",{"_index":1364,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1376,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":278,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.service",{"_index":252,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":276,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":975,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":235,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1853,"title":{},"body":{"index.html":{},"properties.html":{}}}],["applications",{"_index":1897,"title":{},"body":{"index.html":{}}}],["apply",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["apply(existedusermiddleware",{"_index":1599,"title":{},"body":{"modules/UsersModule.html":{}}}],["appmodule",{"_index":258,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":1789,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["apps",{"_index":1943,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":251,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":2107,"title":{},"body":{"index.html":{}}}],["args",{"_index":1811,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1164,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":198,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":2179,"title":{},"body":{"license.html":{}}}],["array",{"_index":874,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":886,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":906,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":1829,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":1154,"title":{},"body":{"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["associated",{"_index":2132,"title":{},"body":{"license.html":{}}}],["async",{"_index":93,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["atguard",{"_index":280,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"coverage.html":{}}}],["atguard(new",{"_index":318,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":373,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["auth.controller",{"_index":482,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/decorators",{"_index":150,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["auth_error",{"_index":518,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authcontroller",{"_index":395,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":1932,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":351,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authguard('jwt",{"_index":354,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authmodule",{"_index":262,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":2204,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["authorid",{"_index":1174,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authors",{"_index":2168,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":433,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1903,"title":{},"body":{"index.html":{}}}],["available",{"_index":2185,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":132,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["await",{"_index":521,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/MessagesGateway.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["awesome",{"_index":2005,"title":{},"body":{"index.html":{}}}],["b",{"_index":1389,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["backend",{"_index":1873,"title":{},"body":{"index.html":{}}}],["backers",{"_index":2056,"title":{},"body":{"index.html":{}}}],["bad",{"_index":2239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bad_request",{"_index":2238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badrequestexception",{"_index":1166,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1171,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1338,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":2003,"title":{},"body":{"index.html":{}}}],["based",{"_index":971,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["bcrypt",{"_index":1731,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":2250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":2251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":2095,"title":{},"body":{"index.html":{}}}],["bee",{"_index":2065,"title":{},"body":{"index.html":{}}}],["begin",{"_index":754,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["begining",{"_index":2082,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":2097,"title":{},"body":{"index.html":{}}}],["better",{"_index":2109,"title":{},"body":{"index.html":{}}}],["bio",{"_index":1381,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["birthdate",{"_index":1382,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["bodies",{"_index":1947,"title":{},"body":{"index.html":{}}}],["body",{"_index":140,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":947,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"classes/MessagesGateway.html":{},"classes/PostEntity.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["bootstrap",{"_index":1712,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2184,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2182,"title":{},"body":{"modules.html":{}}}],["buddhism",{"_index":1791,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["build",{"_index":1997,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":1902,"title":{},"body":{"index.html":{}}}],["building",{"_index":1893,"title":{},"body":{"index.html":{}}}],["built",{"_index":1985,"title":{},"body":{"index.html":{}}}],["bằng",{"_index":362,"title":{},"body":{"injectables/AtGuard.html":{}}}],["c",{"_index":1440,"title":{},"body":{"classes/ProfileEntity.html":{},"license.html":{}}}],["c'})@isstring()@maxlength(101",{"_index":1391,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["call",{"_index":1962,"title":{},"body":{"index.html":{}}}],["callback",{"_index":2252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callhandler",{"_index":821,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":344,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":347,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canceled",{"_index":1790,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["card",{"_index":2105,"title":{},"body":{"index.html":{}}}],["catch",{"_index":186,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":195,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":937,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":825,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["catcherror((err",{"_index":830,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["categories",{"_index":1314,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1316,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["change",{"_index":665,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["character",{"_index":1535,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters",{"_index":773,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(121",{"_index":750,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["characters!'})@maxlength(21",{"_index":759,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["characters!'})@maxlength(46",{"_index":1415,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1417,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":1530,"title":{},"body":{"classes/UserEntity.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":753,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["charge",{"_index":2127,"title":{},"body":{"license.html":{}}}],["chat",{"_index":2008,"title":{},"body":{"index.html":{}}}],["chats",{"_index":1885,"title":{},"body":{"index.html":{}}}],["checkexist",{"_index":1334,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1337,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkpost",{"_index":1343,"title":{},"body":{"injectables/PostsService.html":{}}}],["children",{"_index":1798,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cho",{"_index":358,"title":{},"body":{"injectables/AtGuard.html":{}}}],["city",{"_index":1388,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["claim",{"_index":2171,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Admin.html":{},"classes/AllExceptionsFilter.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":1993,"title":{},"body":{"index.html":{}}}],["client",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"classes/MessagesGateway.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1093,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.id",{"_index":1086,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["clientid",{"_index":1106,"title":{},"body":{"injectables/MessagesService.html":{}}}],["cluster_adminmodule",{"_index":60,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_imports",{"_index":61,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":62,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":476,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":477,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":478,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":693,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":694,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":695,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":916,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":917,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1100,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1101,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1292,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1293,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1294,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1350,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1352,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1351,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1590,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1592,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1591,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1593,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":242,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["college",{"_index":1782,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comment",{"_index":1208,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["comment.dto.ts",{"_index":733,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["commententity",{"_index":567,"title":{"classes/CommentEntity.html":{}},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["comments",{"_index":1225,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["commitlint",{"_index":1991,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":1719,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":1721,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":2110,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":515,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepassword(dto.password",{"_index":554,"title":{},"body":{"injectables/AuthService.html":{}}}],["compatible",{"_index":1931,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1968,"title":{},"body":{"index.html":{}}}],["compose",{"_index":2042,"title":{},"body":{"index.html":{}}}],["compress",{"_index":1946,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1735,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computer",{"_index":2106,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":2152,"title":{},"body":{"license.html":{}}}],["config",{"_index":379,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('access_token_secret",{"_index":394,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["config.get('refresh_token_secret",{"_index":1475,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["configmodule",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":377,"title":{},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configservice.get(\"jwt_expiration_time",{"_index":493,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get(\"jwt_secret",{"_index":490,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["conflict",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["conflictexception",{"_index":512,"title":{},"body":{"injectables/AuthService.html":{}}}],["conflictexception(user_error.duplicate",{"_index":543,"title":{},"body":{"injectables/AuthService.html":{}}}],["connect",{"_index":1856,"title":{},"body":{"index.html":{}}}],["connectedsocket",{"_index":1076,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["connection",{"_index":2180,"title":{},"body":{"license.html":{}}}],["console.log('before",{"_index":1028,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":1029,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":1034,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":983,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":984,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(postid",{"_index":1283,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":211,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":79,"title":{},"body":{"injectables/AdminService.html":{},"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/MessagesGateway.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@logger('appservice",{"_index":341,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(config",{"_index":376,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":498,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(logger",{"_index":191,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(messagesservice",{"_index":1048,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["constructor(prismaservice",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":88,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":345,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":323,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":1531,"title":{},"body":{"classes/UserEntity.html":{}}}],["container",{"_index":2041,"title":{},"body":{"index.html":{}}}],["content",{"_index":1966,"title":{},"body":{"index.html":{}}}],["context",{"_index":350,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":371,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":1030,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":370,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":981,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":982,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1463,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["continuous",{"_index":1986,"title":{},"body":{"index.html":{}}}],["contract",{"_index":2176,"title":{},"body":{"license.html":{}}}],["controller",{"_index":11,"title":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":55,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["controller('auth",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":672,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":897,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('posts",{"_index":1265,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":1577,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":972,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":966,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":1722,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":1977,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":627,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["conversation.dto",{"_index":806,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":738,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:11",{"_index":933,"title":{},"body":{"classes/GetAllConversationDto.html":{}}}],["conversation.dto.ts:14",{"_index":1489,"title":{},"body":{"classes/UpdateMembersConversationDto.html":{}}}],["conversation.dto.ts:20",{"_index":808,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:27",{"_index":809,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:32",{"_index":761,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:33",{"_index":1500,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:34",{"_index":1499,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:35",{"_index":1501,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:52",{"_index":755,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:59",{"_index":756,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:6",{"_index":1488,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:66",{"_index":742,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":1487,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:73",{"_index":744,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":1486,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation_error",{"_index":711,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["conversation_error.not_creator",{"_index":729,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["conversationentity",{"_index":591,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"coverage.html":{}}}],["conversationid",{"_index":643,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{}}}],["conversationid).members",{"_index":1125,"title":{},"body":{"injectables/MessagesService.html":{}}}],["conversations",{"_index":615,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/MessagesService.html":{},"index.html":{}}}],["conversations.controller",{"_index":697,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":669,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":613,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":263,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":668,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":1737,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":1934,"title":{},"body":{"index.html":{}}}],["copies",{"_index":2146,"title":{},"body":{"license.html":{}}}],["copy",{"_index":2130,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":2116,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/interceptors/interceptor.module",{"_index":287,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":339,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":340,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middlewares/logger",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["core/roles",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["correct",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["cors",{"_index":1081,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":1663,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1390,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["course",{"_index":2087,"title":{},"body":{"index.html":{}}}],["cover",{"_index":138,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["coverage",{"_index":1654,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["create_user",{"_index":2232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createat",{"_index":1315,"title":{},"body":{"injectables/PostsService.html":{}}}],["createcommentdto",{"_index":731,"title":{"classes/CreateCommentDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createconversation",{"_index":616,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":675,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":624,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":625,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":630,"title":{},"body":{"controllers/ConversationsController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":594,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":1679,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":1831,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":989,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":1042,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(conversationid",{"_index":1052,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":782,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.text",{"_index":1129,"title":{},"body":{"injectables/MessagesService.html":{}}}],["createparamdecorator",{"_index":2263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1195,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(userid",{"_index":1211,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":790,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["creator",{"_index":595,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["creator01",{"_index":781,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["creator01'})@isstring",{"_index":743,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["criteria",{"_index":1930,"title":{},"body":{"index.html":{}}}],["crud",{"_index":1998,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":212,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":214,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":215,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":641,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["currentage",{"_index":1673,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":967,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":2301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customeimage",{"_index":1846,"title":{},"body":{"classes/imageValidator.html":{}}}],["customtext",{"_index":1816,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["cập",{"_index":361,"title":{},"body":{"injectables/AtGuard.html":{}}}],["damages",{"_index":2172,"title":{},"body":{"license.html":{}}}],["data",{"_index":244,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":1857,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1368,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":601,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["date().toisostring",{"_index":230,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["date(birthdate).gettime",{"_index":2258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(diff",{"_index":2260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date.now",{"_index":1032,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":1369,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":2133,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":2181,"title":{},"body":{"license.html":{}}}],["debug",{"_index":995,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":1000,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":1920,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":1922,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":102,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":942,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":964,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1807,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":1808,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defined",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definition",{"_index":1911,"title":{},"body":{"index.html":{}}}],["delete",{"_index":104,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":684,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":635,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete('comments",{"_index":1289,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('comments')@apibearerauth()@apioperation({summary",{"_index":1217,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete",{"_index":1277,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1221,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile",{"_index":1588,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile')@apibearerauth()@apioperation({summary",{"_index":1551,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('users/:userid",{"_index":179,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete('users/:userid')@apibearerauth()@apioperation({summary",{"_index":103,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["delete_comment",{"_index":2234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["delete_user",{"_index":2233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deletecomment",{"_index":1196,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecomment(@body",{"_index":1290,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletecomment(dto",{"_index":1216,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletecommentdto",{"_index":798,"title":{"classes/DeleteCommentDto.html":{}},"body":{"classes/DeleteCommentDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deleteconversationbyid",{"_index":617,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":633,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":634,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleted",{"_index":1333,"title":{},"body":{"injectables/PostsService.html":{},"miscellaneous/variables.html":{}}}],["deleteoneadminconversation",{"_index":618,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":638,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":639,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":813,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deletepost",{"_index":1197,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(userid",{"_index":1220,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuser",{"_index":1546,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1550,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":94,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":180,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["deleteuserbyid(userid",{"_index":100,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":2236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dependencies",{"_index":59,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1960,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1155,"title":{},"body":{"classes/PaginationDto.html":{},"miscellaneous/enumerations.html":{}}}],["describe",{"_index":1910,"title":{},"body":{"index.html":{}}}],["description",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":1929,"title":{},"body":{"index.html":{}}}],["design",{"_index":1913,"title":{},"body":{"index.html":{}}}],["development",{"_index":2030,"title":{},"body":{"index.html":{}}}],["devices",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["diagram",{"_index":1858,"title":{},"body":{"index.html":{}}}],["diff",{"_index":2257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["different",{"_index":2224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["directly",{"_index":1963,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":2142,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":2114,"title":{},"body":{"index.html":{}}}],["divorced",{"_index":1786,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["docker",{"_index":2037,"title":{},"body":{"index.html":{},"properties.html":{}}}],["document",{"_index":1914,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":1655,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["documentbuilder",{"_index":2268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doe",{"_index":1116,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto",{"_index":119,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":717,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1325,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":724,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.creator",{"_index":718,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":715,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":537,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.favouritorid",{"_index":1336,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1313,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.id",{"_index":1347,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.members",{"_index":716,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":714,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":564,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":563,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":1619,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password",{"_index":1634,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.password.localecompare(user.password",{"_index":1632,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1328,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.published",{"_index":1329,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1342,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.text",{"_index":1345,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.title",{"_index":1312,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.userid",{"_index":720,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.username",{"_index":539,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/comment/request",{"_index":1253,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/comment/response",{"_index":1263,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/request",{"_index":1252,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/post/response",{"_index":1259,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["dto/request",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/response",{"_index":389,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["duplicate",{"_index":2229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamicmodule",{"_index":988,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":2072,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":2047,"title":{},"body":{"index.html":{}}}],["each",{"_index":1974,"title":{},"body":{"index.html":{}}}],["ealcohol",{"_index":1761,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["easily",{"_index":1870,"title":{},"body":{"index.html":{}}}],["education",{"_index":1803,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eeducation",{"_index":1763,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":1894,"title":{},"body":{"index.html":{}}}],["egender",{"_index":1764,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["element.id",{"_index":1124,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.foreach((item",{"_index":1135,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.splice(element.messages.indexof(item",{"_index":1143,"title":{},"body":{"injectables/MessagesService.html":{}}}],["email",{"_index":502,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["email'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1561,"title":{},"body":{"controllers/UsersController.html":{}}}],["emaritalstatus",{"_index":1765,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["empty",{"_index":2228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enable",{"_index":1907,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1357,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1361,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":2076,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":1999,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["enhance",{"_index":2074,"title":{},"body":{"index.html":{}}}],["enotification",{"_index":1766,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["entire",{"_index":1973,"title":{},"body":{"index.html":{}}}],["entities",{"_index":670,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["entities/comment.entity",{"_index":735,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["entities/profile.entity",{"_index":1504,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["enumerations",{"_index":1760,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":305,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["env.${process.env.node_env",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":304,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1958,"title":{},"body":{"index.html":{}}}],["eorder",{"_index":1767,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eotpstatus",{"_index":1768,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ereligion",{"_index":1769,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["error(message",{"_index":1003,"title":{},"body":{"injectables/LoggerService.html":{}}}],["errors",{"_index":1650,"title":{},"body":{"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["errors.length",{"_index":1652,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorsintereptor",{"_index":816,"title":{"injectables/ErrorsIntereptor.html":{}},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["eslint",{"_index":1981,"title":{},"body":{"index.html":{}}}],["esocial",{"_index":1770,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eupdateuserprofile",{"_index":1771,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["euserroles",{"_index":1772,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["eval",{"_index":1949,"title":{},"body":{"index.html":{}}}],["event",{"_index":2167,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":1863,"title":{},"body":{"index.html":{}}}],["example",{"_index":740,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["example@gmail.com",{"_index":1520,"title":{},"body":{"classes/UserEntity.html":{}}}],["exception",{"_index":200,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":226,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":227,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":231,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":221,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":185,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":314,"title":{},"body":{"modules/AppModule.html":{}}}],["executes",{"_index":1954,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":348,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":2230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["existed",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["existedusermiddleware",{"_index":833,"title":{"injectables/ExistedUserMiddleware.html":{}},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["experiences",{"_index":1867,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":492,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["export",{"_index":7,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":993,"title":{},"body":{"classes/LoggerModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":210,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":855,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":1936,"title":{},"body":{"index.html":{}}}],["extends",{"_index":353,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["externals",{"_index":2297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":954,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extractjwt",{"_index":385,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":392,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":943,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["facebook",{"_index":1796,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["failed",{"_index":1172,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":605,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favouritorid",{"_index":1175,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":1878,"title":{},"body":{"index.html":{}}}],["feels",{"_index":1865,"title":{},"body":{"index.html":{}}}],["femail",{"_index":1784,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["female",{"_index":1420,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["field",{"_index":1882,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":1705,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":1830,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":928,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":926,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":930,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":848,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":927,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":797,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{}}}],["files.controller",{"_index":919,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":931,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":890,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":898,"title":{},"body":{"controllers/FileController.html":{}}}],["filesmodule",{"_index":264,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":889,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":1818,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["find",{"_index":1560,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["find((element",{"_index":1131,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findallmessages",{"_index":1043,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["findallmessages(@messagebody('conversationid",{"_index":1087,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["findallmessages(conversationid",{"_index":1056,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["fitness",{"_index":2164,"title":{},"body":{"license.html":{}}}],["fix",{"_index":2001,"title":{},"body":{"index.html":{}}}],["flip",{"_index":2104,"title":{},"body":{"index.html":{}}}],["fo",{"_index":2102,"title":{},"body":{"index.html":{}}}],["follow",{"_index":2066,"title":{},"body":{"index.html":{}}}],["following",{"_index":2151,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["forbiddenexception",{"_index":513,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception(auth_error.same_password",{"_index":565,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception(post_error.not_author",{"_index":1326,"title":{},"body":{"injectables/PostsService.html":{}}}],["forbiddenexception(system_error.forbidden",{"_index":552,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["form",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/FileController.html":{},"index.html":{}}}],["format",{"_index":1912,"title":{},"body":{"index.html":{}}}],["formattedmessage",{"_index":1018,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":1980,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":986,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["forroutes('users",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":325,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/ExistedUserMiddleware.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":1892,"title":{},"body":{"index.html":{}}}],["free",{"_index":2126,"title":{},"body":{"license.html":{}}}],["front",{"_index":2075,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1855,"title":{},"body":{"index.html":{}}}],["full",{"_index":1414,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":1383,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1432,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":952,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1819,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":2149,"title":{},"body":{"license.html":{}}}],["game",{"_index":2093,"title":{},"body":{"index.html":{}}}],["gender",{"_index":1384,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["generate",{"_index":969,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["generated",{"_index":1904,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":679,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":651,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1271,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1234,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid/comments",{"_index":1282,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all",{"_index":1269,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1231,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('find/:email",{"_index":1582,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile/:useridorusername",{"_index":1579,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('users/:userid",{"_index":168,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get('users/all",{"_index":161,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":1563,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":646,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallcomments",{"_index":1198,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallcomments(postid",{"_index":1223,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallconversationdto",{"_index":645,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversationdto:11",{"_index":805,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["getallconversations",{"_index":619,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@body",{"_index":677,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(dto",{"_index":644,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallpostsofuser",{"_index":1199,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(userid",{"_index":1227,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1200,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(userid",{"_index":1230,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallusers",{"_index":95,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":165,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["getallusers(dto",{"_index":112,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["getconversationbyid",{"_index":620,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":649,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":237,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember",{"_index":1105,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmember(conversationid",{"_index":1109,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getoneconversationdto",{"_index":650,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1201,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(postid",{"_index":1233,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getpublicuserbyidorusername",{"_index":1547,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getpublicuserbyidorusername(useridorusername",{"_index":1554,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getting",{"_index":1849,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":496,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":501,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserbyemail",{"_index":1548,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1558,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile",{"_index":96,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserprofile(userid",{"_index":120,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["gitbox",{"_index":2081,"title":{},"body":{"index.html":{}}}],["github",{"_index":2079,"title":{},"body":{"index.html":{},"properties.html":{}}}],["global",{"_index":960,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["god",{"_index":1792,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["google",{"_index":1797,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["granted",{"_index":2125,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1961,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group01",{"_index":745,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["group01'})@isstring()@isnotempty()@length(3",{"_index":757,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["grow",{"_index":2052,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1456,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":828,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessage",{"_index":188,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessage(exception",{"_index":202,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse",{"_index":190,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse(request",{"_index":204,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hash",{"_index":530,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":533,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":562,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":516,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":566,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":534,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":531,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1465,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":1939,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":1945,"title":{},"body":{"index.html":{}}}],["height",{"_index":1800,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hello",{"_index":245,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["helmet",{"_index":1741,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["helmetmiddleware",{"_index":1683,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["helmetmiddleware(app",{"_index":1834,"title":{},"body":{"miscellaneous/functions.html":{}}}],["help",{"_index":1918,"title":{},"body":{"index.html":{}}}],["here",{"_index":2060,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["hereby",{"_index":2124,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":2007,"title":{},"body":{"index.html":{}}}],["high_school",{"_index":1781,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["hmr.config.ts",{"_index":1714,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["holders",{"_index":2169,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":255,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":240,"title":{},"body":{"controllers/AppController.html":{}}}],["host",{"_index":197,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":209,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":213,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["hot",{"_index":1970,"title":{},"body":{"index.html":{}}}],["http",{"_index":1079,"title":{},"body":{"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpargumentshost",{"_index":207,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcode",{"_index":141,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":164,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":196,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorsIntereptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception('new",{"_index":831,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpexceptionfilter",{"_index":934,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httpmodule",{"_index":486,"title":{},"body":{"modules/AuthModule.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":2202,"title":{},"body":{"properties.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":673,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":142,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":832,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpstatus.internal_server_error",{"_index":225,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["husky",{"_index":1743,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iallusers",{"_index":152,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["iarrayfile",{"_index":891,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["icreatecomment",{"_index":1260,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["icreatepost",{"_index":1254,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["id",{"_index":169,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["id'})@apiokresponse({description",{"_index":1213,"title":{},"body":{"controllers/PostsController.html":{}}}],["id'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":106,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["id.decorator.ts",{"_index":1700,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":2063,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1656,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1330,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["identify.authorid",{"_index":1331,"title":{},"body":{"injectables/PostsService.html":{}}}],["identify.length",{"_index":1624,"title":{},"body":{"injectables/UsersService.html":{}}}],["identify[0",{"_index":1625,"title":{},"body":{"injectables/UsersService.html":{}}}],["ifinduserbyemail",{"_index":1575,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["igetcomment",{"_index":1261,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpostofuser",{"_index":1255,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetpublicpost",{"_index":1256,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["igetuserprofile",{"_index":153,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignore",{"_index":959,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreglobalprefix",{"_index":944,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ijwtpayload",{"_index":381,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":175,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"classes/imageValidator.html":{},"index.html":{}}}],["image'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":133,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["image.match(parttern",{"_index":1848,"title":{},"body":{"classes/imageValidator.html":{}}}],["images",{"_index":876,"title":{},"body":{"controllers/FileController.html":{}}}],["imagevalidator",{"_index":1691,"title":{"classes/imageValidator.html":{}},"body":{"coverage.html":{},"classes/imageValidator.html":{}}}],["impact",{"_index":2112,"title":{},"body":{"index.html":{}}}],["implements",{"_index":184,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implied",{"_index":2160,"title":{},"body":{"license.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["imported",{"_index":951,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":71,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":1875,"title":{},"body":{"index.html":{}}}],["include",{"_index":945,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":957,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":2136,"title":{},"body":{"license.html":{}}}],["index",{"_index":91,"title":{"index.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1362,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":652,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["informations",{"_index":2080,"title":{},"body":{"index.html":{}}}],["infrastructure/admin/admin.module",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/auth.module",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":253,"title":{},"body":{"controllers/AppController.html":{}}}],["infrastructure/auth/guards",{"_index":281,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":284,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/prisma/prisma.module",{"_index":282,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":283,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":804,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["init",{"_index":2015,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":1669,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":494,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["inject(configservice",{"_index":520,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":76,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputs",{"_index":1955,"title":{},"body":{"index.html":{}}}],["inspect",{"_index":1959,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":956,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":2064,"title":{},"body":{"index.html":{}}}],["install",{"_index":2013,"title":{},"body":{"index.html":{}}}],["installation",{"_index":2011,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1926,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":219,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["int.pipe.ts",{"_index":1160,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1165,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["intall",{"_index":2029,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1987,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":1957,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":818,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":819,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptormodule",{"_index":265,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":1385,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["interface",{"_index":939,"title":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":893,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":52,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"miscellaneous/variables.html":{}}}],["internal_server_error",{"_index":2237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalid",{"_index":1427,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["ipublicuser",{"_index":154,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isalphanumeric",{"_index":763,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isarray",{"_index":585,"title":{},"body":{"classes/CommentEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isarray()@isnotempty",{"_index":579,"title":{},"body":{"classes/CommentEntity.html":{},"classes/PostEntity.html":{}}}],["isboolean",{"_index":1189,"title":{},"body":{"classes/PostEntity.html":{}}}],["isboolean()@isnotempty",{"_index":1183,"title":{},"body":{"classes/PostEntity.html":{}}}],["isdate",{"_index":1430,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["isemail",{"_index":764,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["isglobal",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":892,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isjson",{"_index":586,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isjson()@isnotempty",{"_index":581,"title":{},"body":{"classes/CommentEntity.html":{}}}],["ismatched",{"_index":1847,"title":{},"body":{"classes/imageValidator.html":{}}}],["isnan(val",{"_index":1170,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":587,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1526,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isemail()@apiproperty({type",{"_index":1518,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnotempty()@isstring",{"_index":574,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":1522,"title":{},"body":{"classes/UserEntity.html":{}}}],["isnumber",{"_index":1190,"title":{},"body":{"classes/PostEntity.html":{},"classes/ProfileEntity.html":{}}}],["isnumber()@isnotempty",{"_index":1185,"title":{},"body":{"classes/PostEntity.html":{}}}],["isobject",{"_index":588,"title":{},"body":{"classes/CommentEntity.html":{}}}],["isoptional",{"_index":1157,"title":{},"body":{"classes/PaginationDto.html":{},"classes/ProfileEntity.html":{}}}],["ispublic",{"_index":368,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":589,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{}}}],["isstring()@isnotempty",{"_index":576,"title":{},"body":{"classes/CommentEntity.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{}}}],["isstring()@isoptional()@apiproperty({type",{"_index":1148,"title":{},"body":{"classes/PaginationDto.html":{}}}],["istyping",{"_index":1066,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["iswaggeroptions",{"_index":940,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item.id",{"_index":1136,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item.text",{"_index":1138,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item1item2",{"_index":1887,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":909,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":911,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":912,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":913,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":914,"title":{},"body":{"controllers/FileController.html":{}}}],["items",{"_index":1151,"title":{},"body":{"classes/PaginationDto.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["iupdateavatar",{"_index":155,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatecomment",{"_index":1262,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatecover",{"_index":156,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["iupdatepost",{"_index":1257,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["iupdatereaction",{"_index":1258,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["java",{"_index":2096,"title":{},"body":{"index.html":{}}}],["john",{"_index":1115,"title":{},"body":{"injectables/MessagesService.html":{}}}],["join",{"_index":1886,"title":{},"body":{"index.html":{}}}],["join(__dirname",{"_index":311,"title":{},"body":{"modules/AppModule.html":{}}}],["joinconversation",{"_index":1044,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["joinconversation(conversationid",{"_index":1059,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["jpeg|jpg|gif|png",{"_index":1845,"title":{},"body":{"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["json.stringify(exception.getresponse",{"_index":220,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":388,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":391,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":484,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":487,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":499,"title":{},"body":{"injectables/AuthService.html":{}}}],["keywords",{"_index":2200,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":2159,"title":{},"body":{"license.html":{}}}],["large",{"_index":2246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["latest",{"_index":2068,"title":{},"body":{"index.html":{}}}],["league",{"_index":2101,"title":{},"body":{"index.html":{}}}],["learn",{"_index":2089,"title":{},"body":{"index.html":{}}}],["learning",{"_index":2085,"title":{},"body":{"index.html":{}}}],["legend",{"_index":2103,"title":{},"body":{"index.html":{}}}],["length",{"_index":765,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(3",{"_index":771,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["length(8",{"_index":1539,"title":{},"body":{"classes/UserEntity.html":{}}}],["letter",{"_index":1533,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":2173,"title":{},"body":{"license.html":{}}}],["liable",{"_index":2170,"title":{},"body":{"license.html":{}}}],["library",{"_index":1917,"title":{},"body":{"index.html":{}}}],["license",{"_index":2113,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":2051,"title":{},"body":{"index.html":{}}}],["life",{"_index":1871,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1146,"title":{},"body":{"classes/PaginationDto.html":{}}}],["limitation",{"_index":2137,"title":{},"body":{"license.html":{}}}],["limited",{"_index":2161,"title":{},"body":{"license.html":{}}}],["linter",{"_index":1992,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":1990,"title":{},"body":{"index.html":{}}}],["list",{"_index":115,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"index.html":{}}}],["list.authorid",{"_index":1324,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":728,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list['creator",{"_index":726,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter((admin",{"_index":730,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["load",{"_index":949,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":2028,"title":{},"body":{"index.html":{}}}],["log",{"_index":996,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":1006,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":194,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger(prefix",{"_index":1835,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":990,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":991,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":288,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":1680,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":1833,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":294,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":192,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":976,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":413,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuserid",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":751,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["looking",{"_index":2108,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1951,"title":{},"body":{"index.html":{}}}],["lại",{"_index":367,"title":{},"body":{"injectables/AtGuard.html":{}}}],["main.ts",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":1869,"title":{},"body":{"index.html":{}}}],["male",{"_index":1419,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/enumerations.html":{}}}],["many",{"_index":50,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":1454,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marital_status",{"_index":1801,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maritalstatus",{"_index":1802,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["marriagestatus",{"_index":1386,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["married",{"_index":1785,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["master",{"_index":2088,"title":{},"body":{"index.html":{}}}],["match",{"_index":1787,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["matchemail",{"_index":1631,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":10,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":1633,"title":{},"body":{"injectables/UsersService.html":{}}}],["math.abs(agedate.getutcfullyear",{"_index":2261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["max",{"_index":1118,"title":{},"body":{"injectables/MessagesService.html":{},"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["max(101",{"_index":1447,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["max(2",{"_index":1450,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxcount",{"_index":910,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":766,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["maxlength(101",{"_index":1441,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(121",{"_index":776,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["maxlength(151",{"_index":1448,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["maxlength(21",{"_index":774,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["maxlength(46",{"_index":1434,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["media",{"_index":2249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1121,"title":{},"body":{"injectables/MessagesService.html":{}}}],["member",{"_index":666,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["members",{"_index":596,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["members[clientid",{"_index":1127,"title":{},"body":{"injectables/MessagesService.html":{}}}],["merchantability",{"_index":2163,"title":{},"body":{"license.html":{}}}],["merge",{"_index":2140,"title":{},"body":{"license.html":{}}}],["message",{"_index":218,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["message.dto",{"_index":1494,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":784,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:5",{"_index":786,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:6",{"_index":787,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:7",{"_index":788,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1491,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.ts",{"_index":1670,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["message['conversationid",{"_index":1141,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message['messageid",{"_index":1142,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagebody",{"_index":1075,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1083,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1091,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1084,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messages",{"_index":1114,"title":{},"body":{"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1103,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.push(message",{"_index":1132,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages.service",{"_index":1078,"title":{},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":1040,"title":{"classes/MessagesGateway.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":266,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":1049,"title":{"injectables/MessagesService.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":2078,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1163,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":1644,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["method_not_allowed",{"_index":2241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["methodkey",{"_index":973,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":92,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["middleware",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["middlewareconsumer",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["migrate",{"_index":2021,"title":{},"body":{"index.html":{}}}],["min",{"_index":1431,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/functions.html":{}}}],["min(0",{"_index":1449,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["min(17",{"_index":1446,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["minlength",{"_index":767,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(2",{"_index":772,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["minlength(7",{"_index":1541,"title":{},"body":{"classes/UserEntity.html":{}}}],["miscellaneous",{"_index":1759,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2050,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":2033,"title":{},"body":{"index.html":{}}}],["models",{"_index":955,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":2139,"title":{},"body":{"license.html":{}}}],["module",{"_index":56,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":58,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":2059,"title":{},"body":{"index.html":{}}}],["ms",{"_index":1841,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multer",{"_index":1937,"title":{},"body":{"index.html":{}}}],["multi",{"_index":868,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":888,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":1836,"title":{},"body":{"miscellaneous/functions.html":{}}}],["music",{"_index":1437,"title":{},"body":{"classes/ProfileEntity.html":{},"index.html":{}}}],["mustermann",{"_index":1119,"title":{},"body":{"injectables/MessagesService.html":{}}}],["name",{"_index":85,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":1898,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":824,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":2201,"title":{},"body":{"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":208,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":277,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":485,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1492,"title":{},"body":{"classes/UpdateMessageDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":352,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":883,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1077,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":843,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":1861,"title":{},"body":{"index.html":{}}}],["never",{"_index":1778,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["new",{"_index":229,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newavatar",{"_index":1629,"title":{},"body":{"injectables/UsersService.html":{}}}],["newconversation",{"_index":712,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newcover",{"_index":1630,"title":{},"body":{"injectables/UsersService.html":{}}}],["newpassword",{"_index":1498,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["newprofile",{"_index":1627,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":544,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":548,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":820,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1455,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(timeout(1000",{"_index":1483,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["nextfunction",{"_index":840,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["nguyen",{"_index":2120,"title":{},"body":{"license.html":{},"properties.html":{}}}],["ngược",{"_index":366,"title":{},"body":{"injectables/AtGuard.html":{}}}],["nice",{"_index":1120,"title":{},"body":{"injectables/MessagesService.html":{}}}],["node",{"_index":2296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node.js",{"_index":1933,"title":{},"body":{"index.html":{}}}],["nodeexternals",{"_index":1715,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":1891,"title":{},"body":{"index.html":{}}}],["non",{"_index":1794,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["non_religions",{"_index":1793,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":2166,"title":{},"body":{"license.html":{}}}],["not_acceptable",{"_index":2242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_author",{"_index":2231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_creator",{"_index":2227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["not_found",{"_index":2226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notacceptableexception",{"_index":1611,"title":{},"body":{"injectables/UsersService.html":{}}}],["notacceptableexception(auth_error.password_not_match",{"_index":1635,"title":{},"body":{"injectables/UsersService.html":{}}}],["notedev",{"_index":2084,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":844,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":847,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["notfoundexception(post_error.empty",{"_index":1320,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(post_error.not_found",{"_index":1323,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception(user_error.not_found",{"_index":1319,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notice",{"_index":2154,"title":{},"body":{"license.html":{}}}],["now",{"_index":1031,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":1035,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":2012,"title":{},"body":{"index.html":{}}}],["npx",{"_index":2016,"title":{},"body":{"index.html":{}}}],["null",{"_index":560,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/imageValidator.html":{}}}],["nullable",{"_index":606,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{}}}],["number",{"_index":578,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number(dto.current",{"_index":1616,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":1615,"title":{},"body":{"injectables/UsersService.html":{}}}],["nếu",{"_index":356,"title":{},"body":{"injectables/AtGuard.html":{}}}],["object",{"_index":1648,"title":{},"body":{"injectables/ValidationPipe.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["object.values",{"_index":1126,"title":{},"body":{"injectables/MessagesService.html":{}}}],["observable",{"_index":823,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":2129,"title":{},"body":{"license.html":{}}}],["occurs",{"_index":1976,"title":{},"body":{"index.html":{}}}],["official",{"_index":1852,"title":{},"body":{"index.html":{},"properties.html":{}}}],["old",{"_index":1398,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["old!'})@max(101",{"_index":1397,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["oldpassword",{"_index":1497,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{}}}],["one",{"_index":636,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/UserEntity.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":1358,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1359,"title":{},"body":{"injectables/PrismaService.html":{}}}],["oop",{"_index":2094,"title":{},"body":{"index.html":{}}}],["open",{"_index":2025,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":970,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":946,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":1979,"title":{},"body":{"index.html":{}}}],["option",{"_index":2253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":86,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["options",{"_index":1909,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1147,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":1618,"title":{},"body":{"injectables/UsersService.html":{}}}],["oriented",{"_index":2090,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1082,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":925,"title":{},"body":{"classes/FilesService.html":{}}}],["otherwise",{"_index":2178,"title":{},"body":{"license.html":{}}}],["out",{"_index":67,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":2186,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1718,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1149,"title":{},"body":{"classes/PaginationDto.html":{},"index.html":{}}}],["pagecurrent",{"_index":1623,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":1620,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":1622,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":113,"title":{"classes/PaginationDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/PaginationDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":143,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('conversationid",{"_index":687,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('email",{"_index":1583,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('id",{"_index":680,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('postid",{"_index":1272,"title":{},"body":{"controllers/PostsController.html":{}}}],["param('userid",{"_index":170,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/PostsController.html":{}}}],["param('useridorusername",{"_index":1580,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":84,"title":{},"body":{"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":1938,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1169,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1158,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parser",{"_index":1738,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parseuuidpipe",{"_index":1249,"title":{},"body":{"controllers/PostsController.html":{}}}],["parsing",{"_index":1935,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":810,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createconversationdto",{"_index":811,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["particular",{"_index":2165,"title":{},"body":{"license.html":{}}}],["parttern",{"_index":1692,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["passport",{"_index":387,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":384,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":390,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":1476,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["password",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["password'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1552,"title":{},"body":{"controllers/UsersController.html":{}}}],["password123",{"_index":1523,"title":{},"body":{"classes/UserEntity.html":{}}}],["password123'})@length(8",{"_index":1527,"title":{},"body":{"classes/UserEntity.html":{}}}],["password_not_match",{"_index":2225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["passwordmatches",{"_index":553,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":1919,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":768,"title":{"classes/passwordValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":144,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":689,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":640,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":686,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":660,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":691,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":664,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":682,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":656,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('profile",{"_index":1585,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('profile')@apibearerauth()@apioperation({summary",{"_index":1570,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('update",{"_index":1274,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1247,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('users/profile/:userid",{"_index":172,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["patch('users/profile/:userid')@apibearerauth()@apioperation({summary",{"_index":126,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["path",{"_index":232,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/UsersModule.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":1817,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["payload",{"_index":383,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["payload_too_large",{"_index":2245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pending",{"_index":1788,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["per",{"_index":1152,"title":{},"body":{"classes/PaginationDto.html":{}}}],["perform",{"_index":1923,"title":{},"body":{"index.html":{}}}],["permission",{"_index":2123,"title":{},"body":{"license.html":{}}}],["permit",{"_index":2147,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":2294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":2128,"title":{},"body":{"license.html":{}}}],["persons",{"_index":2148,"title":{},"body":{"license.html":{}}}],["phone",{"_index":1387,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1433,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/ProfileEntity.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["phép",{"_index":359,"title":{},"body":{"injectables/AtGuard.html":{}}}],["picktype",{"_index":734,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/LoginDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(commententity",{"_index":736,"title":{},"body":{"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/UpdateCommentTextDto.html":{}}}],["picktype(postentity",{"_index":795,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["picktype(profileentity",{"_index":1505,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{}}}],["picktype(userentity",{"_index":1039,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["pipe",{"_index":829,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["pipe(tap",{"_index":1033,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":1988,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1167,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":1925,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":1646,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":1649,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":1862,"title":{},"body":{"index.html":{}}}],["playground",{"_index":1994,"title":{},"body":{"index.html":{}}}],["please",{"_index":2058,"title":{},"body":{"index.html":{}}}],["plugin",{"_index":2300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugins",{"_index":1890,"title":{},"body":{"index.html":{}}}],["portions",{"_index":2157,"title":{},"body":{"license.html":{}}}],["post",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["post'})@apiokresponse({description",{"_index":1218,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('avatar",{"_index":899,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":856,"title":{},"body":{"controllers/FileController.html":{}}}],["post('comments",{"_index":1285,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('comments')@apibearerauth()@apioperation({summary",{"_index":1206,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('cover",{"_index":902,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":862,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":908,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":867,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":905,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":875,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1267,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1228,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1279,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1238,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1212,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":626,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto.ts",{"_index":792,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:6",{"_index":815,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post_error",{"_index":1310,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["postentity",{"_index":793,"title":{"classes/PostEntity.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["postgre",{"_index":2006,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1371,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":570,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteOnePost.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":2002,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1193,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["posts.controller",{"_index":1296,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1251,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1191,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":267,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1250,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":1872,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":2099,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":992,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":1677,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":1756,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":1854,"title":{},"body":{"index.html":{}}}],["primary",{"_index":1779,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["print",{"_index":1950,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":1747,"title":{},"body":{"dependencies.html":{},"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1354,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1367,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma/prisma.module",{"_index":698,"title":{},"body":{"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["prisma/prisma.service",{"_index":87,"title":{},"body":{"injectables/AdminService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["prisma:generate",{"_index":2020,"title":{},"body":{"index.html":{}}}],["prisma:migrate",{"_index":2022,"title":{},"body":{"index.html":{}}}],["prisma:pull",{"_index":2019,"title":{},"body":{"index.html":{}}}],["prisma:push",{"_index":2024,"title":{},"body":{"index.html":{}}}],["prisma:studiorunning",{"_index":2027,"title":{},"body":{"index.html":{}}}],["prisma@latest",{"_index":2014,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1356,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":268,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":81,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":187,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LoggerService.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":1984,"title":{},"body":{"index.html":{}}}],["process.env.database_url",{"_index":1372,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.white_list",{"_index":2256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":2035,"title":{},"body":{"index.html":{}}}],["profile",{"_index":122,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":127,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["profileentity",{"_index":1377,"title":{"classes/ProfileEntity.html":{}},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["profileentity:101",{"_index":1507,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:111",{"_index":1509,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:121",{"_index":1513,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:35",{"_index":1512,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:43",{"_index":1508,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:51",{"_index":1511,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:58",{"_index":1515,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:65",{"_index":1514,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:75",{"_index":1506,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:83",{"_index":1516,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["profileentity:88",{"_index":1510,"title":{},"body":{"classes/UpdateUserProfileDto.html":{}}}],["programming",{"_index":1876,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":2067,"title":{},"body":{"index.html":{}}}],["project",{"_index":1969,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":111,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{}}}],["promise.all",{"_index":522,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":569,"title":{"properties.html":{}},"body":{"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"properties.html":{}}}],["property",{"_index":1519,"title":{},"body":{"classes/UserEntity.html":{}}}],["provide",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":1832,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":69,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":116,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':postid/comments')@apioperation({summary",{"_index":1224,"title":{},"body":{"controllers/PostsController.html":{}}}],["public()@get('find/:email')@apioperation({summary",{"_index":1559,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('profile/:useridorusername')@apioperation({summary",{"_index":1555,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get('users/:userid')@apioperation({summary",{"_index":121,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get('users/all')@apioperation({summary",{"_index":114,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["public()@get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":238,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('signin')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":414,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":871,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":879,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":2141,"title":{},"body":{"license.html":{}}}],["published",{"_index":1176,"title":{},"body":{"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["pull",{"_index":2038,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1859,"title":{},"body":{"index.html":{},"license.html":{}}}],["purposeid",{"_index":1804,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["put",{"_index":145,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["put('comments/update/text",{"_index":1287,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('comments/update/text')@apibearerauth()@apioperation({summary",{"_index":1243,"title":{},"body":{"controllers/PostsController.html":{}}}],["put('password",{"_index":473,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/avatar",{"_index":1586,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar')@apibearerauth()@apioperation({summary",{"_index":1565,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover",{"_index":1587,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover')@apibearerauth()@apioperation({summary",{"_index":1567,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('users/avatar/:userid",{"_index":174,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":131,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid",{"_index":177,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["put('users/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":137,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["query",{"_index":146,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["quickly",{"_index":1983,"title":{},"body":{"index.html":{}}}],["randomint",{"_index":1688,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["randomint(min",{"_index":1838,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rapidy",{"_index":2000,"title":{},"body":{"index.html":{}}}],["reach",{"_index":2111,"title":{},"body":{"index.html":{}}}],["react",{"_index":1239,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1340,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":1884,"title":{},"body":{"index.html":{}}}],["reactionpost",{"_index":1202,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1280,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1236,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":571,"title":{},"body":{"classes/CommentEntity.html":{},"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1237,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1177,"title":{},"body":{"classes/PostEntity.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":1948,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":160,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{}}}],["recompile",{"_index":1972,"title":{},"body":{"index.html":{}}}],["references",{"_index":1995,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1748,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":1095,"title":{},"body":{"classes/MessagesGateway.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{}}}],["refreshtoken",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["religion",{"_index":1795,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["reload",{"_index":1971,"title":{},"body":{"index.html":{}}}],["remove",{"_index":1045,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["remove(@messagebody",{"_index":1098,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["remove(message",{"_index":1062,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":1952,"title":{},"body":{"index.html":{}}}],["replies",{"_index":572,"title":{},"body":{"classes/CommentEntity.html":{}}}],["repository",{"_index":1901,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":842,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.get('authorization').replace('bearer",{"_index":1477,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["req.params.userid",{"_index":845,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["request",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":233,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1464,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request_timeout",{"_index":2244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod",{"_index":1596,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.all",{"_index":333,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["requests",{"_index":51,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["require('run",{"_index":2298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require('webpack",{"_index":2295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":612,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/FileController.html":{},"classes/UserEntity.html":{},"miscellaneous/functions.html":{}}}],["requiredroles",{"_index":1461,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":839,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["reset",{"_index":66,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":205,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["response.status(status).json",{"_index":938,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":234,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":223,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responses_message",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responses_message.create_user",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{}}}],["responses_message.delete_comment",{"_index":1349,"title":{},"body":{"injectables/PostsService.html":{}}}],["responses_message.delete_user",{"_index":1637,"title":{},"body":{"injectables/UsersService.html":{}}}],["rest",{"_index":2271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["restriction",{"_index":2135,"title":{},"body":{"license.html":{}}}],["result",{"_index":1956,"title":{},"body":{"index.html":{}}}],["results",{"_index":9,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":166,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":110,"title":{},"body":{"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":2138,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1750,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"controllers/ConversationsController.html":{},"guards/RolesGuard.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roledecorator",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(role.admin",{"_index":54,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["roles",{"_index":2004,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["roles.enum",{"_index":1460,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":299,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":950,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["rt",{"_index":510,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":437,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":479,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":2018,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":827,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":1027,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":1675,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["same_password",{"_index":2223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sample_image",{"_index":1883,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1895,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1916,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1905,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":1015,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":1016,"title":{},"body":{"injectables/LoggerService.html":{}}}],["script",{"_index":2299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secondary",{"_index":1780,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["secret",{"_index":489,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["secretorkey",{"_index":393,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":1942,"title":{},"body":{"index.html":{}}}],["see",{"_index":1888,"title":{},"body":{"index.html":{}}}],["select",{"_index":721,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":2145,"title":{},"body":{"license.html":{}}}],["senderid",{"_index":785,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["serialize",{"_index":1928,"title":{},"body":{"index.html":{}}}],["serve",{"_index":1965,"title":{},"body":{"index.html":{}}}],["server",{"_index":53,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servestaticmodule",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["set",{"_index":961,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setcontact",{"_index":2274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":963,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setmetadata('ispublic",{"_index":2302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":2303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":997,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":1008,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setting",{"_index":1944,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setup",{"_index":2010,"title":{},"body":{"index.html":{}}}],["setversion('1.5.0",{"_index":2279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":2155,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":1864,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":2073,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":2070,"title":{},"body":{"index.html":{}}}],["short",{"_index":748,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{}}}],["side",{"_index":1896,"title":{},"body":{"index.html":{}}}],["signed",{"_index":1940,"title":{},"body":{"index.html":{}}}],["signin",{"_index":1880,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":491,"title":{},"body":{"modules/AuthModule.html":{}}}],["signout",{"_index":1881,"title":{},"body":{"index.html":{}}}],["signup",{"_index":1879,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":418,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["single",{"_index":1436,"title":{},"body":{"classes/ProfileEntity.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["single'})@isstring",{"_index":1424,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["singlefielddecorator",{"_index":887,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":900,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":903,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":1839,"title":{},"body":{"miscellaneous/functions.html":{}}}],["size",{"_index":929,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":1874,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1614,"title":{},"body":{"injectables/UsersService.html":{}}}],["snake",{"_index":2092,"title":{},"body":{"index.html":{}}}],["social",{"_index":2009,"title":{},"body":{"index.html":{}}}],["socket",{"_index":1053,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["socket.io",{"_index":1080,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":2131,"title":{},"body":{"license.html":{}}}],["sometime",{"_index":1776,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sometimes",{"_index":1775,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Admin.html":{},"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateCommentDto.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteCommentDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateCommentTextDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["spa",{"_index":1967,"title":{},"body":{"index.html":{}}}],["special",{"_index":1534,"title":{},"body":{"classes/UserEntity.html":{}}}],["specification",{"_index":958,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":2054,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1438,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/.../age.ts",{"_index":2213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../array",{"_index":1820,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../cors.config.ts",{"_index":2212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../delay.ts",{"_index":1828,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../enum.ts",{"_index":1762,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../fullname.validator.ts",{"_index":2217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":2214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":2211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../helmet.middleware.ts",{"_index":1823,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../image.validator.ts",{"_index":2216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":1824,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":1822,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1821,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../multi",{"_index":1825,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../password.validator.ts",{"_index":2218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":2219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":2221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../random.ts",{"_index":1826,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../roles.decorator.ts",{"_index":2222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":1773,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../single",{"_index":1827,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../status",{"_index":2210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../swagger.ts",{"_index":2215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":2220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":236,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":249,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:59",{"_index":273,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":336,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":337,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":338,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/common/pagination.dto",{"_index":149,"title":{},"body":{"controllers/AdminUsersController.html":{},"injectables/UsersService.html":{}}}],["src/core/common/pagination.dto.ts",{"_index":1145,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/core/common/pagination.dto.ts:13",{"_index":1150,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/pagination.dto.ts:23",{"_index":1153,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/common/pagination.dto.ts:33",{"_index":1156,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/core/configs/cors.config.ts",{"_index":1661,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":941,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/swagger.ts",{"_index":1668,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/constants/enum.ts",{"_index":1774,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/constants/status",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":183,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:13",{"_index":193,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:16",{"_index":199,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:26",{"_index":203,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:38",{"_index":206,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":935,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":936,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/helpers/age.ts",{"_index":1672,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/helpers/hash",{"_index":517,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":1674,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/exception.interceptor.ts",{"_index":817,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["src/core/interceptors/exception.interceptor.ts:13",{"_index":822,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":974,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":977,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":1024,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":1025,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":1481,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":1482,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":979,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":1452,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1484,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":1676,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":985,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":987,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":1678,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":994,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":1007,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":1005,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":1013,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":1001,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":1011,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":1014,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":1009,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middlewares/existed",{"_index":834,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["src/core/middlewares/helmet.middleware.ts",{"_index":1682,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/middlewares/logger",{"_index":980,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1159,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":1640,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":1645,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":1643,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":1684,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.enum.ts",{"_index":1805,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":1457,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:6",{"_index":1458,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:9",{"_index":1459,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/utils/delay.ts",{"_index":1685,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/utils/random.ts",{"_index":1687,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/validators",{"_index":770,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UserEntity.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":1689,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":1813,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":1810,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/image.validator.ts",{"_index":1690,"title":{},"body":{"coverage.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/image.validator.ts:10",{"_index":1844,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/image.validator.ts:18",{"_index":1842,"title":{},"body":{"classes/imageValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":1693,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":2189,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":2188,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":1694,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":2195,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":2194,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":1695,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":2208,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":2207,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/infrastructure/admin/admin",{"_index":89,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.controller.ts",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.module.ts",{"_index":68,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/infrastructure/admin/admin.service.ts",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/infrastructure/admin/admin.service.ts:5",{"_index":83,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/infrastructure/admin/entities/admin.entity.ts",{"_index":6,"title":{},"body":{"classes/Admin.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:111",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:71",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:80",{"_index":416,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:89",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:99",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":1598,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":480,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":495,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:106",{"_index":504,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:118",{"_index":505,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:138",{"_index":508,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:20",{"_index":500,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:28",{"_index":503,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:54",{"_index":511,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:66",{"_index":507,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:90",{"_index":506,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1572,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":1699,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":1702,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto/request",{"_index":1573,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/request/password.dto.ts",{"_index":1495,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/sigin.dto.ts",{"_index":1036,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/request/signup.dto.ts",{"_index":1479,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":343,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:12",{"_index":349,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:6",{"_index":346,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":1469,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:3",{"_index":1470,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":374,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:16",{"_index":382,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:8",{"_index":378,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":1471,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:20",{"_index":1474,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:8",{"_index":1472,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":614,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:107",{"_index":653,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:122",{"_index":657,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:137",{"_index":637,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:152",{"_index":661,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:171",{"_index":642,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:190",{"_index":667,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:82",{"_index":631,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:94",{"_index":648,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":696,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":699,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:104",{"_index":702,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:121",{"_index":707,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:136",{"_index":703,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:169",{"_index":708,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:17",{"_index":700,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:20",{"_index":701,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:35",{"_index":704,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:63",{"_index":705,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:89",{"_index":706,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":737,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":800,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":932,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":807,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":592,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:11",{"_index":607,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:14",{"_index":600,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:17",{"_index":602,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:20",{"_index":611,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:23",{"_index":609,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:26",{"_index":603,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:29",{"_index":599,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:5",{"_index":608,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:8",{"_index":610,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":1704,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":1706,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":1707,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":849,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:115",{"_index":872,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:73",{"_index":860,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:84",{"_index":865,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:95",{"_index":880,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":918,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":920,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":922,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":924,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":923,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":921,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/create",{"_index":783,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/update",{"_index":1490,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":1041,"title":{},"body":{"classes/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:15",{"_index":1050,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:19",{"_index":1061,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":1058,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:37",{"_index":1055,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:52",{"_index":1068,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:66",{"_index":1072,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:73",{"_index":1064,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1102,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1104,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:32",{"_index":1111,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:42",{"_index":1108,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:47",{"_index":1110,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:52",{"_index":1107,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:68",{"_index":1113,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1122,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:81",{"_index":1112,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/posts/dto/comment/request/create",{"_index":732,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/delete",{"_index":799,"title":{},"body":{"classes/DeleteCommentDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/comment/request/update",{"_index":1485,"title":{},"body":{"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/create",{"_index":791,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/delete",{"_index":814,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/post/request/update",{"_index":1451,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts",{"_index":568,"title":{},"body":{"classes/CommentEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:12",{"_index":575,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:16",{"_index":583,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:20",{"_index":584,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:24",{"_index":577,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:28",{"_index":580,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/comment.entity.ts:32",{"_index":582,"title":{},"body":{"classes/CommentEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity",{"_index":794,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1173,"title":{},"body":{"classes/PostEntity.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:12",{"_index":1187,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:16",{"_index":1179,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:20",{"_index":1181,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:24",{"_index":1184,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:28",{"_index":1178,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:32",{"_index":1182,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:36",{"_index":1180,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:40",{"_index":1186,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts:44",{"_index":1188,"title":{},"body":{"classes/PostEntity.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1192,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:113",{"_index":1229,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:126",{"_index":1232,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:138",{"_index":1235,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:150",{"_index":1248,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:160",{"_index":1222,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:173",{"_index":1240,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:183",{"_index":1226,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:196",{"_index":1210,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:209",{"_index":1244,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:221",{"_index":1219,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:97",{"_index":1215,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1295,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1297,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:129",{"_index":1306,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:147",{"_index":1309,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:178",{"_index":1302,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:204",{"_index":1307,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:232",{"_index":1303,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:243",{"_index":1299,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:265",{"_index":1308,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:280",{"_index":1301,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:38",{"_index":1298,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:41",{"_index":1300,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:75",{"_index":1304,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:93",{"_index":1305,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/prisma/prisma.module",{"_index":481,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/infrastructure/prisma/prisma.module.ts",{"_index":1353,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/infrastructure/prisma/prisma.service",{"_index":514,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts",{"_index":1355,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:13",{"_index":1360,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:25",{"_index":1366,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:29",{"_index":1365,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:33",{"_index":1363,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/users/dto/request/update",{"_index":1502,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts",{"_index":1378,"title":{},"body":{"classes/ProfileEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:101",{"_index":1399,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:111",{"_index":1405,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:121",{"_index":1422,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:35",{"_index":1418,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:43",{"_index":1401,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:51",{"_index":1411,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:58",{"_index":1425,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:65",{"_index":1423,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:75",{"_index":1393,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:83",{"_index":1428,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/profile.entity.ts:88",{"_index":1410,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["src/infrastructure/users/entities/user.entity",{"_index":1496,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/users/entities/user.entity.ts",{"_index":1517,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:22",{"_index":1521,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:41",{"_index":1536,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:50",{"_index":1525,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:59",{"_index":1524,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/entities/user.entity.ts:78",{"_index":1538,"title":{},"body":{"classes/UserEntity.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":1545,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:106",{"_index":1564,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:117",{"_index":1571,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:131",{"_index":1566,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:145",{"_index":1568,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:157",{"_index":1553,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:80",{"_index":1556,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:93",{"_index":1562,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":1594,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.module.ts:15",{"_index":1595,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":1600,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:114",{"_index":1610,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:134",{"_index":1608,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:163",{"_index":1609,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:192",{"_index":1602,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:225",{"_index":1603,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:32",{"_index":1601,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:35",{"_index":1604,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:60",{"_index":1605,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:80",{"_index":1606,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:95",{"_index":1607,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":1711,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["start",{"_index":2031,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":2034,"title":{},"body":{"index.html":{}}}],["start:prodrunning",{"_index":2036,"title":{},"body":{"index.html":{}}}],["started",{"_index":1850,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1900,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1657,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":189,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/LoggerModule.html":{},"dependencies.html":{},"index.html":{}}}],["status",{"_index":256,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{}}}],["status_message",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["status_message.success",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["statuscode",{"_index":224,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":2061,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":483,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":386,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":101,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1889,"title":{},"body":{"index.html":{}}}],["studio",{"_index":2026,"title":{},"body":{"index.html":{}}}],["style",{"_index":2071,"title":{},"body":{"index.html":{}}}],["sub",{"_index":524,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":2150,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":2143,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1074,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":1054,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":1057,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('joinconversation",{"_index":1060,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":1063,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":1067,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('updatemessage",{"_index":1071,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["substantial",{"_index":2156,"title":{},"body":{"license.html":{}}}],["success",{"_index":107,"title":{},"body":{"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["successfuly",{"_index":1214,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":162,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":355,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super.canactivate(context",{"_index":372,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":1022,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":1020,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":1019,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":1023,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":1021,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":1941,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2183,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":948,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":2291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":2292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":2023,"title":{},"body":{"index.html":{}}}],["system_error",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["system_error.conflict",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.forbidden",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.internal_server_error",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.method_not_allowed",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_acceptable",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.not_found",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.payload_too_large",{"_index":895,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["system_error.request_timeout",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.too_many_requests",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unauthorized",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["system_error.unsupported_media_type",{"_index":896,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["t",{"_index":1453,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1717,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1716,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":1906,"title":{},"body":{"index.html":{}}}],["take",{"_index":1617,"title":{},"body":{"injectables/UsersService.html":{}}}],["takes",{"_index":1953,"title":{},"body":{"index.html":{}}}],["tap",{"_index":1026,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["teneno",{"_index":239,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":1964,"title":{},"body":{"index.html":{}}}],["test",{"_index":2046,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":2049,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":2048,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2045,"title":{},"body":{"index.html":{}}}],["text",{"_index":573,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateCommentDto.html":{},"classes/CreateMessageDto.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["th",{"_index":357,"title":{},"body":{"injectables/AtGuard.html":{}}}],["thanks",{"_index":2053,"title":{},"body":{"index.html":{}}}],["thinking",{"_index":1877,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":1866,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1373,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1374,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1375,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":257,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(dto",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword(dto",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('access_token_secret",{"_index":525,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":526,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":528,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('refresh_token_secret",{"_index":527,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversations",{"_index":1130,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.find((element",{"_index":1123,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.foreach((element",{"_index":1133,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversationsservice",{"_index":674,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":676,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":685,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":690,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(dto",{"_index":678,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":681,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":683,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":688,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":692,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":901,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":904,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":915,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":907,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findallmessages(message['conversationid",{"_index":1144,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.findallmessages(updatemessagedto['conversationid",{"_index":1140,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmember(conversationid",{"_index":1128,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1322,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.getpublicuserbyidorusername(userid",{"_index":1628,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.gettokens(newuser.id",{"_index":547,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":556,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.handlemessage(exception",{"_index":216,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.signasync",{"_index":523,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":222,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":342,"title":{},"body":{"injectables/AppService.html":{}}}],["this.messagesservice.createmessage",{"_index":1089,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.findallmessages(conversationid",{"_index":1088,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.getmember",{"_index":1092,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.joinconversation",{"_index":1085,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.remove(message",{"_index":1099,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.updatemessage(updatemessagedto",{"_index":1096,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.postsservice.addcomment(userid",{"_index":1286,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.createpost(userid",{"_index":1266,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletecomment(dto",{"_index":1291,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(userid",{"_index":1278,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallcomments(postid",{"_index":1284,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(userid",{"_index":1268,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1270,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1273,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1281,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatecomment(dto",{"_index":1288,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1276,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":1017,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.comment.create",{"_index":1344,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.delete",{"_index":1348,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.comment.update",{"_index":1346,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.conversation.create",{"_index":713,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":727,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":719,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":725,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.update",{"_index":723,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.post.create",{"_index":1311,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1332,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1317,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1321,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1327,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1341,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1335,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":1613,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":545,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":1638,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":536,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":551,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":532,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":559,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":1636,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.userprofile.upsert",{"_index":1626,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":369,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.reflector.getallandoverride('roles",{"_index":1462,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.server.emit('message",{"_index":1090,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.server.emit('refresh",{"_index":1097,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.tovalidate(metatype",{"_index":1647,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":549,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":558,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":1578,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":1589,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":181,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":167,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["this.usersservice.getpublicuserbyidorusername(useridorusername",{"_index":1581,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":1584,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserprofile(userid",{"_index":171,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":176,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":178,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":173,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{}}}],["through",{"_index":962,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":542,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":826,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["thuong",{"_index":2121,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":2117,"title":{},"body":{"index.html":{}}}],["thuongtruong1009/teneno",{"_index":2039,"title":{},"body":{"index.html":{}}}],["time",{"_index":1975,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"injectables/TimeoutInterceptor.html":{},"miscellaneous/variables.html":{}}}],["timeoutinterceptor",{"_index":1480,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":228,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["tips",{"_index":1996,"title":{},"body":{"index.html":{}}}],["title",{"_index":796,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PostEntity.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":1868,"title":{},"body":{"index.html":{}}}],["token",{"_index":364,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":546,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":550,"title":{},"body":{"injectables/AuthService.html":{}}}],["too_many_requests",{"_index":2240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tools",{"_index":1978,"title":{},"body":{"index.html":{}}}],["tort",{"_index":2177,"title":{},"body":{"license.html":{}}}],["total",{"_index":1612,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":2062,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1641,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1642,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":1004,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trading",{"_index":2069,"title":{},"body":{"index.html":{}}}],["training",{"_index":2098,"title":{},"body":{"index.html":{}}}],["tran",{"_index":2119,"title":{},"body":{"license.html":{},"properties.html":{}}}],["transform",{"_index":1161,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1162,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1429,"title":{},"body":{"classes/ProfileEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":978,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["travel",{"_index":1439,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["trim",{"_index":1478,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":303,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"classes/PaginationDto.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"classes/imageValidator.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@isnotempty()@length(3",{"_index":746,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["truong",{"_index":2122,"title":{},"body":{"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["truy",{"_index":360,"title":{},"body":{"injectables/AtGuard.html":{}}}],["tslint",{"_index":1754,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":2017,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":2091,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":2077,"title":{},"body":{"index.html":{}}}],["type",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AdminUsersController.html":{},"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UpdateUserProfileDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2205,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1493,"title":{},"body":{"classes/UpdateMessageDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":1653,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":1729,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1899,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":1046,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["typing(conversationid",{"_index":1065,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["ui/ux",{"_index":2100,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AdminUsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ExistedUserMiddleware.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apicreatedresponse({description",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["undefined})@apicreatedresponse({type",{"_index":629,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["undefined})@apioperation({summary",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@arrayfielddecorator('files",{"_index":877,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":741,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["undefined})@multifielddecorator(['undefined",{"_index":870,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/avatars",{"_index":859,"title":{},"body":{"controllers/FileController.html":{}}}],["undefined})@singlefielddecorator('./public/covers",{"_index":864,"title":{},"body":{"controllers/FileController.html":{}}}],["under",{"_index":2115,"title":{},"body":{"index.html":{}}}],["unit",{"_index":2044,"title":{},"body":{"index.html":{}}}],["university",{"_index":1783,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unknown",{"_index":632,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["unsupported",{"_index":2248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unsupported_media_type",{"_index":2247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":97,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["update(userid",{"_index":124,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["updatecomment",{"_index":1203,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecomment(dto",{"_index":1241,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatecommenttextdto",{"_index":1242,"title":{"classes/UpdateCommentTextDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateCommentTextDto.html":{},"coverage.html":{}}}],["updateconversationbyid",{"_index":621,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":654,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":655,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updated",{"_index":722,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":597,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":622,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":658,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":659,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updatemessage",{"_index":1047,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessage(@messagebody",{"_index":1094,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["updatemessage(updatemessagedto",{"_index":1069,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessagedto",{"_index":1070,"title":{"classes/UpdateMessageDto.html":{}},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto['conversationid",{"_index":1134,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['messageid",{"_index":1137,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['text",{"_index":1139,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatepassword",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":426,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1204,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1275,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1245,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1246,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updaterolesconversation",{"_index":623,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":662,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":663,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":497,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":509,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateuseravatardto",{"_index":130,"title":{"classes/UpdateUserAvatarDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusercoverdto",{"_index":136,"title":{"classes/UpdateUserCoverDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserprofiledto",{"_index":125,"title":{"classes/UpdateUserProfileDto.html":{}},"body":{"controllers/AdminUsersController.html":{},"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateusersavatar",{"_index":98,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":129,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":99,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(userid",{"_index":135,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":1549,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":1569,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":857,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":850,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatar(file",{"_index":854,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcover",{"_index":851,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcover(file",{"_index":861,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadedfile",{"_index":881,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":882,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":1837,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":852,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(files",{"_index":866,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts",{"_index":853,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":873,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uppercase",{"_index":1532,"title":{},"body":{"classes/UserEntity.html":{}}}],["uptest",{"_index":2043,"title":{},"body":{"index.html":{}}}],["url",{"_index":1370,"title":{},"body":{"injectables/PrismaService.html":{},"classes/ProfileEntity.html":{}}}],["url'})@isstring()@isnotempty",{"_index":1400,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["use",{"_index":836,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":838,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"injectables/LoggerContextMiddleware.html":{}}}],["useclass",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["used",{"_index":968,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["usefactory",{"_index":488,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(rtguard",{"_index":470,"title":{},"body":{"controllers/AuthController.html":{}}}],["usenamevalidator",{"_index":769,"title":{"classes/usenameValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":105,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user'})@apiokresponse({description",{"_index":1209,"title":{},"body":{"controllers/PostsController.html":{}}}],["user)'})@apiokresponse({description",{"_index":628,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":647,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":869,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":557,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":561,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.middleware",{"_index":1597,"title":{},"body":{"modules/UsersModule.html":{}}}],["user.middleware.ts",{"_index":835,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{},"coverage.html":{}}}],["user.middleware.ts:6",{"_index":837,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.middleware.ts:9",{"_index":841,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["user.password",{"_index":555,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":1468,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.includes(role",{"_index":1467,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":1466,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user01",{"_index":777,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user02",{"_index":778,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user_error",{"_index":519,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":1037,"title":{"classes/UserEntity.html":{}},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UserEntity.html":{},"coverage.html":{}}}],["userexist",{"_index":535,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ExistedUserMiddleware.html":{}}}],["userexist.id",{"_index":846,"title":{},"body":{"injectables/ExistedUserMiddleware.html":{}}}],["userexist.length",{"_index":540,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":109,"title":{},"body":{"controllers/AdminUsersController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CommentEntity.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/ExistedUserMiddleware.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PostEntity.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["useridorusername",{"_index":1557,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":538,"title":{},"body":{"injectables/AuthService.html":{},"classes/SignupDto.html":{},"classes/UserEntity.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":1543,"title":{},"body":{"classes/UserEntity.html":{}}}],["username123'})@isstring()@isnotempty()@isalphanumeric()@length(3",{"_index":1537,"title":{},"body":{"classes/UserEntity.html":{}}}],["users",{"_index":163,"title":{},"body":{"controllers/AdminUsersController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["users'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":117,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller",{"_index":75,"title":{},"body":{"modules/AdminModule.html":{},"modules/UsersModule.html":{}}}],["users.controller.ts",{"_index":90,"title":{},"body":{"controllers/AdminUsersController.html":{},"coverage.html":{}}}],["users.controller.ts:108",{"_index":134,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:122",{"_index":139,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:136",{"_index":108,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:72",{"_index":118,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:83",{"_index":123,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.controller.ts:94",{"_index":128,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users.dto.ts",{"_index":1503,"title":{},"body":{"classes/UpdateUserAvatarDto.html":{},"classes/UpdateUserCoverDto.html":{},"classes/UpdateUserProfileDto.html":{},"coverage.html":{}}}],["users.length",{"_index":1621,"title":{},"body":{"injectables/UsersService.html":{}}}],["users.service",{"_index":1574,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/request",{"_index":151,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/dto/response",{"_index":157,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["users/entities/user.entity",{"_index":1038,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{}}}],["users/users.module",{"_index":74,"title":{},"body":{"modules/AdminModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["users/users.service",{"_index":159,"title":{},"body":{"controllers/AdminUsersController.html":{}}}],["userscontroller",{"_index":1544,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":63,"title":{"modules/UsersModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":158,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AdminUsersController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usually",{"_index":1777,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["uuid",{"_index":710,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["v",{"_index":365,"title":{},"body":{"injectables/AtGuard.html":{}}}],["v4",{"_index":709,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["val",{"_index":1168,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":375,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/CreateConversationDto.html":{},"classes/ProfileEntity.html":{},"injectables/RtStrategy.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(fullnamevalidator",{"_index":1435,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(image",{"_index":1843,"title":{},"body":{"classes/imageValidator.html":{}}}],["validate(object",{"_index":1651,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":1542,"title":{},"body":{"classes/UserEntity.html":{}}}],["validate(payload",{"_index":380,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1443,"title":{},"body":{"classes/ProfileEntity.html":{}}}],["validate(req",{"_index":1473,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":1812,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":775,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserEntity.html":{}}}],["validation",{"_index":1924,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":1809,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":1639,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":590,"title":{},"body":{"classes/CommentEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/PaginationDto.html":{},"classes/PostEntity.html":{},"classes/ProfileEntity.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserEntity.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":1814,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":1806,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/imageValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":965,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1662,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2209,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1908,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":998,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":1010,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":1921,"title":{},"body":{"index.html":{}}}],["versa",{"_index":1927,"title":{},"body":{"index.html":{}}}],["version",{"_index":2198,"title":{},"body":{"properties.html":{}}}],["view",{"_index":2273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":201,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"modules/UsersModule.html":{}}}],["vue",{"_index":2083,"title":{},"body":{"index.html":{}}}],["wait",{"_index":1686,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["wait(ms",{"_index":1840,"title":{},"body":{"miscellaneous/functions.html":{}}}],["warn",{"_index":999,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":1012,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warning",{"_index":2235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warranties",{"_index":2162,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":2158,"title":{},"body":{"license.html":{}}}],["watch",{"_index":2032,"title":{},"body":{"index.html":{}}}],["web",{"_index":2086,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":1860,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["webpack",{"_index":1713,"title":{},"body":{"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["websocketgateway",{"_index":1073,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["websocketserver",{"_index":1051,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["whether",{"_index":2174,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":1665,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":2134,"title":{},"body":{"license.html":{}}}],["world",{"_index":246,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{}}}],["writtenposts",{"_index":1318,"title":{},"body":{"injectables/PostsService.html":{}}}],["x",{"_index":1989,"title":{},"body":{"index.html":{}}}],["years",{"_index":1396,"title":{},"body":{"classes/ProfileEntity.html":{},"classes/UpdateUserProfileDto.html":{}}}],["yes",{"_index":1002,"title":{},"body":{"injectables/LoggerService.html":{}}}],["you'd",{"_index":2057,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":2193,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":2190,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":2191,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":1815,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":2192,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":65,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Admin.html":{"url":"classes/Admin.html","title":"class - Admin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Admin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/entities/admin.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Admin {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ROLE, RoleDecorator } from 'src/core/roles';\n\n@ApiTags('Admin')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@RoleDecorator(ROLE.ADMIN)\n@Controller('admin')\nexport class AdminController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                        \n                            AdminUsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminService } from './admin.service';\nimport { AdminController } from './admin.controller';\nimport { UsersModule } from '../users/users.module';\nimport { AdminUsersController } from './admin-users.controller';\n\n@Module({\n  imports: [UsersModule],\n  controllers: [AdminController, AdminUsersController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin.service.ts\n        \n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/admin/admin.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class AdminService {\n  constructor(private prismaService: PrismaService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AdminUsersController.html":{"url":"controllers/AdminUsersController.html","title":"controller - AdminUsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminUsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/admin/admin-users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('users/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/all')@ApiOperation({summary: 'Get list all public users'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('users/:userId')@ApiOperation({summary: 'Get user profile by user-id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('users/profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('users/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/admin/admin-users.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { PaginationDto } from 'src/core/common/pagination.dto';\nimport { ROLE, RoleDecorator } from 'src/core/roles';\nimport { Public } from '../auth/decorators';\nimport {\n  UpdateUserAvatarDto,\n  UpdateUserCoverDto,\n  UpdateUserProfileDto,\n} from '../users/dto/request';\nimport {\n  IAllUsers,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from '../users/dto/response';\nimport { UsersService } from '../users/users.service';\n\n@ApiTags('Admin')\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: 'Method Not Allowed.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@ApiRequestTimeoutResponse({ description: 'Request Timeout.' })\n@ApiConflictResponse({\n  description: 'Conflict existed.',\n})\n@ApiTooManyRequestsResponse({ description: 'Too Many Requests.' })\n@ApiInternalServerErrorResponse({ description: 'Internal Server Error.' })\n@RoleDecorator(ROLE.ADMIN)\n@Controller('admin')\nexport class AdminUsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Public()\n  @Get('users/all')\n  @ApiOperation({ summary: 'Get list all public users' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getAllUsers(@Query() dto: PaginationDto): Promise {\n    return this.usersService.getAllUsers(dto);\n  }\n\n  @Public()\n  @Get('users/:userId')\n  @ApiOperation({\n    summary: 'Get user profile by user-id',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getUserProfile(\n    @Param('userId') userId: string,\n  ): Promise {\n    return this.usersService.getUserProfile(userId);\n  }\n\n  @Patch('users/profile/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async update(\n    @Param('userId') userId: string,\n    @Body() dto: UpdateUserProfileDto,\n  ): Promise {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('users/avatar/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersAvatar(\n    @Param() userId: string,\n    @Body() dto: UpdateUserAvatarDto,\n  ): Promise {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('users/cover/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersCover(\n    @Param() userId: string,\n    @Body() dto: UpdateUserCoverDto,\n  ): Promise {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('users/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user by user-id' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deleteUserById(@Param('userId') userId: string): Promise {\n    return this.usersService.deleteUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                    Private\n                                    Static\n                                handleResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleResponse(request: Request, response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Request, Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const request: Request = ctx.getRequest();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(request, response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    request: Request,\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        timestamp: new Date().toISOString(),\n        message: exception.stack,\n        path: request.url,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: '{code: 1, data: {Hello world}, message: \"\"'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Home')\n@Controller('/')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Teneno homepage' })\n  @ApiResponse({\n    status: 200,\n    description: '{code: 1, data: {Hello world}, message: \"\"',\n  })\n  @ApiResponse({ status: 404, description: 'Not found' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './infrastructure/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middlewares/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AdminModule } from './infrastructure/admin/admin.module';\nimport { RolesGuard } from './core/roles';\n\n@Module({\n  imports: [\n    InterceptorModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      // envFilePath: ['.env'],\n      // envFilePath: `.env.${process.env.NODE_ENV} || .env`,\n    }),\n    LoggerModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: `${__dirname}/../documentation`, // join(__dirname, '..', 'client'),\n      renderPath: '/',\n      // exclude: ['/api*'],\n    }),\n    PrismaModule,\n    AuthModule,\n    AdminModule,\n    UsersModule,\n    FilesModule,\n    PostsModule,\n    ConversationsModule,\n    MessagesModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n    {\n      provide: APP_GUARD,\n      useClass: AtGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule implements NestModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    consumer.apply(LoggerContextMiddleware).forRoutes('*');\n    //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n    //   .forRoutes(UsersController);\n    // .forRoutes('users');\n    // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n    // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\nexport class AppService {\n  constructor(@Logger('AppService') private logger: LoggerService) {}\n\n  getHello(): string {\n    this.logger.log('Hello World', '200');\n    return 'Hello World from Teneno!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AtGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  // nếu true thì cho phép truy cập bằng access-token , và ngược lại\n  public canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) return true;\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../dto/response';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(private config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  validate(payload: IJwtPayload): IJwtPayload {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: undefined})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Login to user account'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account.'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: undefined, type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ApiOperation({summary: 'Update user password'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { RtGuard } from './guards';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport { ITokens } from './dto/response';\nimport {\n  RESPONSES_MESSAGE,\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\n\n@ApiTags('Auth')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {\n    this.authService = authService;\n  }\n\n  @Public()\n  @Post('signup')\n  @ApiOperation({ summary: 'Create new user account.' })\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiCreatedResponse({\n    description: RESPONSES_MESSAGE.CREATE_USER,\n    type: SignupDto,\n  })\n  async signupLocal(@Body() dto: SignupDto): Promise {\n    return this.authService.signupLocal(dto);\n  }\n\n  @Public()\n  @Post('signin')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiOperation({ summary: 'Login to user account' })\n  async signinLocal(@Body() dto: LoginDto): Promise {\n    return this.authService.signinLocal(dto);\n  }\n\n  @Post('logout')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiOperation({ summary: 'Logout user account (user)' })\n  async logout(@GetCurrentUserId() userId: string): Promise {\n    return this.authService.logout(userId);\n  }\n\n  @Post('refresh')\n  @ApiBearerAuth()\n  @UseGuards(RtGuard)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Logout account on all devices' })\n  async refreshToken(\n    @GetCurrentUserId() userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n    return this.authService.refreshToken(userId, refreshToken);\n  }\n\n  @Put('password')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ApiOperation({ summary: 'Update user password' })\n  async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n    return this.authService.updatePassWord(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [\n    PrismaModule,\n    JwtModule,\n    // HttpModule,\n    // JwtModule.registerAsync({\n    //   imports: [ConfigModule],\n    //   useFactory: async (configService: ConfigService) => ({\n    //     secret: configService.get(\"JWT_SECRET\"),\n    //     signOptions: { expiresIn: configService.get(\"JWT_EXPIRATION_TIME\") },\n    //   }),\n    //   inject: [ConfigService],\n    // })\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, AtStrategy, RtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ConflictException,\n  ForbiddenException,\n  Inject,\n  Injectable,\n} from '@nestjs/common';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport { ITokens } from './dto/response';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { comparePassword, hashPassword } from 'src/core/helpers/hash';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/request';\nimport {\n  AUTH_ERROR,\n  SYSTEM_ERROR,\n  USER_ERROR,\n} from 'src/core/constants/status-message';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(ConfigService)\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getTokens(userId: string, email: string): Promise {\n    const [at, rt] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get('ACCESS_TOKEN_SECRET'),\n          expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n        },\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get('REFRESH_TOKEN_SECRET'),\n          expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n        },\n      ),\n    ]);\n    return { accessToken: at, refreshToken: rt };\n  }\n\n  async updateRtHash(userId: string, rt: string) {\n    const hash = await hashPassword(rt);\n    await this.prismaService.user.update({\n      where: {\n        id: userId,\n      },\n      data: {\n        hashedRefreshToken: hash,\n      },\n    });\n  }\n\n  async signupLocal(dto: SignupDto): Promise {\n    const hash = await hashPassword(dto.password);\n\n    const userExist = await this.prismaService.user.findMany({\n      where: {\n        OR: [{ email: dto.email }, { username: dto.username }],\n      },\n    });\n\n    if (userExist.length > 0) throw new ConflictException(USER_ERROR.DUPLICATE);\n\n    const newUser = await this.prismaService.user.create({\n      data: {\n        email: dto.email,\n        password: hash,\n        username: dto.username,\n      },\n    });\n\n    const tokens = await this.getTokens(newUser.id, newUser.email);\n    await this.updateRtHash(newUser.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async signinLocal(dto: LoginDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n    if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    const passwordMatches = await comparePassword(dto.password, user.password);\n    if (!passwordMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async logout(userId: string): Promise {\n    await this.prismaService.user.updateMany({\n      where: {\n        id: userId,\n        hashedRefreshToken: {\n          not: null,\n        },\n      },\n      data: { hashedRefreshToken: null },\n    });\n  }\n\n  async refreshToken(userId: string, refreshToken: string): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n    if (!user || !user.hashedRefreshToken)\n      throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    const hashMatches = await comparePassword(\n      refreshToken,\n      user.hashedRefreshToken,\n    );\n    if (!hashMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async updatePassWord(dto: UpdatePasswordDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n\n    const passwordMatches = await comparePassword(\n      dto.oldPassword,\n      user.password,\n    );\n\n    if (!passwordMatches) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    if (dto.newPassword === dto.oldPassword)\n      throw new ForbiddenException(AUTH_ERROR.SAME_PASSWORD);\n\n    if (passwordMatches) {\n      await this.prismaService.user.update({\n        where: { email: dto.email },\n        data: {\n          password: await hashPassword(dto.newPassword),\n        },\n      });\n    }\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CommentEntity.html":{"url":"classes/CommentEntity.html","title":"class - CommentEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CommentEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/comment.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                postId\n                            \n                            \n                                reactions\n                            \n                            \n                                replies\n                            \n                            \n                                text\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        replies\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/comment.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsString,\n} from 'class-validator';\n\nexport class CommentEntity {\n  @IsNotEmpty()\n  @IsString()\n  id: string;\n\n  @IsString()\n  @IsNotEmpty()\n  text: string;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  reactions: number[];\n\n  @IsJSON()\n  @IsNotEmpty()\n  replies: any[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ConversationEntity {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty({ required: false, nullable: true })\n  description: string | null;\n\n  @ApiProperty()\n  avatar: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n\n  @ApiProperty()\n  members: string[];\n\n  @ApiProperty()\n  creator: string;\n\n  @ApiProperty()\n  admins: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:152\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\nimport { ConversationsService } from './conversations.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n  constructor(private readonly conversationsService: ConversationsService) {\n    this.conversationsService = conversationsService;\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new conversation (user)' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  @ApiCreatedResponse({\n    type: ConversationEntity,\n    description: 'The new conversation has been created.',\n  })\n  async createConversation(@Body() dto: CreateConversationDto) {\n    return await this.conversationsService.createConversation(dto);\n  }\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    isArray: true,\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllConversations(@Body() dto: GetAllConversationDto) {\n    return this.conversationsService.getAllConversations(dto);\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getConversationById(\n    @Param('id') id: string,\n    @Body() dto: GetOneConversationDto,\n  ) {\n    return this.conversationsService.getConversationById(id, dto);\n  }\n\n  @Patch(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  updateConversationById(\n    @Param('id') id: string,\n    @Body() dto: UpdateConversationDto,\n  ) {\n    return this.conversationsService.updateConversationById(id, dto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Delete one conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deleteConversationById(\n    @Param('id') id: string,\n    @Body() dto: DeleteConversationDto,\n  ) {\n    return this.conversationsService.deleteConversationById(id, dto);\n  }\n\n  @Patch(':conversationId/updateMembers')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update members list of current conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateMembersConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateMembersConversationDto,\n  ) {\n    return this.conversationsService.updateMembersConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/deleteAdmins')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Delete one admin of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deleteOneAdminConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: DeleteOneAdminConversationDto,\n  ) {\n    return this.conversationsService.deleteOneAdminConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/updateRoles')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Change role of any member of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateRolesConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateRolesConversationDto,\n  ) {\n    return this.conversationsService.updateRolesConversation(\n      conversationId,\n      dto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_imports\n\n\n\ncluster_ConversationsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [ConversationsController],\n  providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:169\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\nimport { CONVERSATION_ERROR } from 'src/core/constants/status-message';\n\n@Injectable()\nexport class ConversationsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async createConversation(dto: CreateConversationDto) {\n    const newConversation = await this.prismaService.conversation.create({\n      data: {\n        id: uuid(),\n        name: dto.name,\n        description: dto.description,\n        avatar: '',\n        members: dto.members,\n        admins: dto.admins,\n        creator: dto.creator,\n      },\n    });\n    return newConversation;\n  }\n\n  async getAllConversations(dto: GetAllConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n      },\n      select: {\n        id: true,\n        name: true,\n        avatar: true,\n      },\n    });\n    return list;\n  }\n\n  async getConversationById(id: string, dto: GetOneConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n        AND: {\n          id: id,\n        },\n      },\n    });\n    return list;\n  }\n\n  updateConversationById(id: string, dto: UpdateConversationDto) {\n    const updated = this.prismaService.conversation.update({\n      where: {\n        id: id,\n      },\n      data: {\n        name: dto.name,\n        description: dto.description,\n        avatar: dto.avatar,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteConversationById(id: string, dto: DeleteConversationDto) {\n    const list = await this.prismaService.conversation.findUnique({\n      where: {\n        id: id,\n      },\n    });\n    if (list['creator'] === dto.userId) {\n      await this.prismaService.conversation.delete({\n        where: {\n          id: id,\n        },\n      });\n      return '';\n    }\n    return false;\n  }\n\n  async updateMembersConversation(\n    conversationId: string,\n    dto: UpdateMembersConversationDto,\n  ) {\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteOneAdminConversation(\n    conversationId: string,\n    dto: DeleteOneAdminConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n\n    if (list.length === 0) {\n      return CONVERSATION_ERROR.NOT_CREATOR;\n    }\n    const updated = list[0]['admins'].filter((admin) => admin !== dto.userId);\n\n    await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: updated,\n      },\n    });\n    return updated;\n  }\n\n  async updateRolesConversation(\n    conversationId: string,\n    dto: UpdateRolesConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n    if (list.length === 0) {\n      return CONVERSATION_ERROR.NOT_CREATOR;\n    }\n\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: dto.admins,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class CreateCommentDto extends PickType(CommentEntity, [\n  'text',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'creator01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01', required: false, nullable: true})@IsString()@IsNotEmpty()@Length(3, 120)@MinLength(2, {message: 'Description is too short, must be at least 3 characters!'})@MaxLength(121, {message: 'Description is too long, must be at most 120 characters!'})@Validate(usenameValidator, {message: 'Description must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01'})@IsString()@IsNotEmpty()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class CreateConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Name must be not begin with number!',\n  })\n  name: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n    required: false,\n    nullable: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 120)\n  @MinLength(2, {\n    message: 'Description is too short, must be at least 3 characters!',\n  })\n  @MaxLength(121, {\n    message: 'Description is too long, must be at most 120 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Description must be not begin with number!',\n  })\n  description?: string;\n\n  @ApiProperty({\n    type: String,\n    example: ['user01', 'user02'],\n  })\n  @IsArray()\n  members: string[];\n\n  @ApiProperty({\n    type: String,\n    example: ['admin01', 'admin02'],\n  })\n  @IsArray()\n  admins: string[];\n\n  @ApiProperty({\n    type: String,\n    example: 'creator01',\n  })\n  @IsString()\n  creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels } from '@nestjs/swagger';\n\n@ApiExtraModels()\nexport class CreateMessageDto {\n  id: string;\n  senderId: string;\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/create-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class CreatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteCommentDto.html":{"url":"classes/DeleteCommentDto.html","title":"class - DeleteCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class DeleteCommentDto extends PickType(CommentEntity, [\n  'id',\n  'postId',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetAllConversationDto } from './get-conversation.dto';\n\nexport class DeleteConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/post/request/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsIntereptor.html":{"url":"injectables/ErrorsIntereptor.html","title":"injectable - ErrorsIntereptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsIntereptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/exception.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n@Injectable()\nexport class ErrorsIntereptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError((err) =>\n          throwError(\n            () => new HttpException('New message', HttpStatus.BAD_GATEWAY),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ExistedUserMiddleware.html":{"url":"injectables/ExistedUserMiddleware.html","title":"injectable - ExistedUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ExistedUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/existed-user.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/core/middlewares/existed-user.middleware.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/existed-user.middleware.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware, NotFoundException } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\n\n@Injectable()\nexport class ExistedUserMiddleware implements NestMiddleware {\n  constructor(private prismaService: PrismaService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const userId = req.params.userId;\n    const userExist = await this.prismaService.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n      },\n    });\n    if (userExist === null || userExist === undefined || userExist.id === '') {\n      throw new NotFoundException('User not found');\n    }\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UploadedFile,\n  UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiPayloadTooLargeResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n  ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\nimport {\n  ArrayFieldDecorator,\n  SingleFieldDecorator,\n  MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n  description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('files')\nexport class FileController {\n  constructor(private readonly fileService: FilesService) {}\n\n  @Post('avatar')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @SingleFieldDecorator('./public/avatars')\n  async uploadAvatar(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadAvatar(file);\n  }\n\n  @Post('cover')\n  @ApiOperation({ summary: 'Upload cover file form data (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @SingleFieldDecorator('./public/covers')\n  async uploadCover(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadCover(file);\n  }\n\n  @Post('posts')\n  @ApiOperation({ summary: 'Upload post with multi images (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @ArrayFieldDecorator('files', true, 10, './public/posts')\n  async uploadPosts(\n    @UploadedFiles() files: Array,\n  ): Promise {\n    return this.fileService.uploadPosts(files);\n  }\n\n  @Post('multi')\n  @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  @MultiFieldDecorator(\n    [\n      { name: 'item_1', maxCount: 1, required: true },\n      { name: 'item_2', maxCount: 1 },\n      { name: 'item_3', maxCount: 1 },\n      { name: 'item_4', maxCount: 1 },\n      { name: 'item_5', maxCount: 1 },\n    ],\n    './public/multi',\n  )\n  async uploadMulti(\n    @UploadedFiles() files: Express.Multer.File[],\n  ): Promise {\n    return this.fileService.uploadMulti(files);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/get-conversation.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middlewares/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middlewares/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport type { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void): void {\n    console.log(`Request ${req}...`);\n    console.log(`Response ${res}...`);\n    return next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/sigin.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class LoginDto extends PickType(UserEntity, ['email', 'password']) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesGateway.html":{"url":"classes/MessagesGateway.html","title":"class - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                typing\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(conversationId: string, createMessageDto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinConversation')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(conversationId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  WebSocketServer,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\n\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n  @WebSocketServer() server: Server;\n  constructor(private readonly messagesService: MessagesService) {}\n\n  @SubscribeMessage('joinConversation')\n  joinConversation(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('senderId') senderId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    return this.messagesService.joinConversation(\n      conversationId,\n      senderId,\n      client.id,\n    );\n  }\n\n  @SubscribeMessage('findAllMessages')\n  findAllMessages(@MessageBody('conversationId') conversationId: string) {\n    return this.messagesService.findAllMessages(conversationId);\n  }\n\n  @SubscribeMessage('createMessage')\n  async createMessage(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody() createMessageDto: CreateMessageDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const message = await this.messagesService.createMessage(\n      conversationId,\n      createMessageDto,\n      client.id,\n    );\n    this.server.emit('message', message);\n    return message;\n  }\n\n  @SubscribeMessage('typing')\n  async typing(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('isTyping') isTyping: boolean,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const name = await this.messagesService.getMember(\n      conversationId,\n      client.id,\n    );\n\n    client.broadcast.emit('typing', { senderId: name, isTyping });\n  }\n\n  @SubscribeMessage('updateMessage')\n  updateMessage(@MessageBody() updateMessageDto: UpdateMessageDto) {\n    const refresh = this.messagesService.updateMessage(updateMessageDto);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n\n  @SubscribeMessage('removeMessage')\n  async remove(@MessageBody() message: string) {\n    const refresh = await this.messagesService.remove(message);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                getMember\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMessage\n                        \n                    \n                \n            \n            \n                \ncreateMessage(conversationId: string, createMessageDto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { id: any; senderId: any; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMember\n                        \n                    \n                \n            \n            \n                \ngetMember(conversationId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class MessagesService {\n  conversations = [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ];\n\n  joinConversation(conversationId: string, senderId: string, clientId: string) {\n    this.conversations.find((element) => element.id === conversationId).members[\n      clientId\n    ] = senderId;\n    return Object.values(\n      this.conversations.find((element) => element.id === conversationId)\n        .members,\n    );\n  }\n\n  findAllMessages(conversationId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .messages;\n  }\n\n  getMember(conversationId: string, clientId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .members[clientId];\n  }\n\n  createMessage(\n    conversationId: string,\n    createMessageDto: CreateMessageDto,\n    clientId: string,\n  ) {\n    const message = {\n      id: uuid(),\n      senderId: this.getMember(conversationId, clientId),\n      text: createMessageDto.text,\n    };\n    this.conversations\n      .find((element) => element.id === conversationId)\n      .messages.push(message);\n    return message;\n  }\n\n  updateMessage(updateMessageDto: UpdateMessageDto) {\n    this.conversations.forEach((element) => {\n      if (element.id === updateMessageDto['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === updateMessageDto['messageId']) {\n            item.text = updateMessageDto['text'];\n          }\n        });\n      }\n    });\n    return this.findAllMessages(updateMessageDto['conversationId']);\n  }\n\n  async remove(message: string) {\n    this.conversations.forEach((element) => {\n      if (element.id === message['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === message['messageId']) {\n            element.messages.splice(element.messages.indexOf(item), 1);\n          }\n        });\n      }\n    });\n\n    return this.findAllMessages(message['conversationId']);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                limit\n                            \n                            \n                                order\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 1, nullable: true, description: 'Page number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: Number, example: 10, nullable: true, description: 'Number of items per page'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiProperty({type: String, description: 'asc, desc', example: 'asc', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsOptional, IsString } from 'class-validator';\n\nexport class PaginationDto {\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    example: 1,\n    nullable: true,\n    description: 'Page number',\n  })\n  current: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: Number,\n    example: 10,\n    nullable: true,\n    description: 'Number of items per page',\n  })\n  limit: string;\n\n  @IsString()\n  @IsOptional()\n  @ApiProperty({\n    type: String,\n    description: 'asc, desc',\n    example: 'asc',\n    nullable: true,\n  })\n  order: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostEntity.html":{"url":"classes/PostEntity.html","title":"class - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                favouritorId\n                            \n                            \n                                files\n                            \n                            \n                                postId\n                            \n                            \n                                published\n                            \n                            \n                                reactionType\n                            \n                            \n                                title\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        published\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/entities/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsBoolean,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\n\nexport class PostEntity {\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  @IsString()\n  @IsNotEmpty()\n  description: string;\n\n  @IsArray()\n  @IsNotEmpty()\n  files: string[];\n\n  @IsBoolean()\n  @IsNotEmpty()\n  published: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('comments')@ApiBearerAuth()@ApiOperation({summary: 'Add a new comment to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id'})@ApiOkResponse({description: undefined})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('comments')@ApiBearerAuth()@ApiOperation({summary: 'Delete a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:221\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:160\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':postId/comments')@ApiOperation({summary: 'Get all comments of the post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:183\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:138\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('comments/update/text')@ApiBearerAuth()@ApiOperation({summary: 'Update a comment in post'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:209\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user'})@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n  ParseUUIDPipe,\n  Put,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { GetCurrentUserId, Public } from '../auth/decorators';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  UpdatePostDto,\n  ReactionsPost,\n} from './dto/post/request';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiPayloadTooLargeResponse,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n  ApiUnsupportedMediaTypeResponse,\n} from '@nestjs/swagger';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n  ICreatePost,\n  IGetPostOfUser,\n  IGetPublicPost,\n  IUpdatePost,\n  IUpdateReaction,\n} from './dto/post/response';\nimport {\n  ICreateComment,\n  IGetComment,\n  IUpdateComment,\n} from './dto/comment/response';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\n\n@ApiTags('Posts')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiPayloadTooLargeResponse({ description: SYSTEM_ERROR.PAYLOAD_TOO_LARGE })\n@ApiUnsupportedMediaTypeResponse({\n  description: SYSTEM_ERROR.UNSUPPORTED_MEDIA_TYPE,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('posts')\nexport class PostsController {\n  constructor(private postsService: PostsService) {}\n\n  @Post()\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Get all posts of user by user-id' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  @ApiCreatedResponse({ description: 'Create new post successfuly' })\n  async createPost(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: CreatePostDto,\n  ): Promise {\n    return this.postsService.createPost(userId, dto);\n  }\n\n  @Post('private/all')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get all public and private posts of user',\n  })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllPostsOfUser(\n    @GetCurrentUserId() userId: string,\n  ): Promise | null {\n    return this.postsService.getAllPostsOfUser(userId);\n  }\n\n  @Get(':userId/all')\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all public posts of user by user-id' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllPublicPosts(\n    @Param('userId', new ParseUUIDPipe()) userId: string,\n  ): Promise | null {\n    return this.postsService.getAllPublicPosts(userId);\n  }\n\n  @Get(':postId')\n  @Public()\n  @ApiOperation({ summary: 'Get one post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getOnePostById(\n    @Param('postId', new ParseUUIDPipe()) postId: string,\n  ): Promise {\n    return this.postsService.getOnePostById(postId);\n  }\n\n  @Patch('update')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update one post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updatePost(@Body() dto: UpdatePostDto): Promise {\n    return this.postsService.updatePost(dto);\n  }\n\n  @Delete('delete')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete one post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deletePost(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: DeleteOnePost,\n  ): Promise {\n    return this.postsService.deletePost(userId, dto);\n  }\n\n  @Post('reaction')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'React to post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async reactionPost(@Body() dto: ReactionsPost): Promise {\n    return this.postsService.reactionPost(dto);\n  }\n\n  @Public()\n  @Get(':postId/comments')\n  @ApiOperation({ summary: 'Get all comments of the post' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getAllComments(\n    @Param('postId', new ParseUUIDPipe()) postId: string,\n  ): Promise {\n    console.log(postId);\n    return this.postsService.getAllComments(postId);\n  }\n\n  @Post('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Add a new comment to post of user' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async addComment(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: CreateCommentDto,\n  ): Promise {\n    return this.postsService.addComment(userId, dto);\n  }\n\n  @Put('comments/update/text')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update a comment in post' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateComment(\n    @Body() dto: UpdateCommentTextDto,\n  ): Promise {\n    return this.postsService.updateComment(dto);\n  }\n\n  @Delete('comments')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete a comment in post' })\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async deleteComment(@Body() dto: DeleteCommentDto): Promise {\n    return this.postsService.deleteComment(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addComment\n                            \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deleteComment\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllComments\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updateComment\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    addComment(userId: string, dto: CreateCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:243\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(userId: string, dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteComment(dto: DeleteCommentDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:280\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(userId: string, dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:178\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:232\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateComment(dto: UpdateCommentTextDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdateCommentTextDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:147\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  ReactionsPost,\n  UpdatePostDto,\n} from './dto/post/request';\nimport {\n  CreateCommentDto,\n  DeleteCommentDto,\n  UpdateCommentTextDto,\n} from './dto/comment/request';\nimport {\n  ICreatePost,\n  IGetPostOfUser,\n  IGetPublicPost,\n  IUpdatePost,\n  IUpdateReaction,\n} from './dto/post/response';\nimport {\n  ICreateComment,\n  IGetComment,\n  IUpdateComment,\n} from './dto/comment/response';\nimport {\n  POST_ERROR,\n  RESPONSES_MESSAGE,\n  USER_ERROR,\n} from 'src/core/constants/status-message';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async createPost(userId: string, dto: CreatePostDto): Promise {\n    const post = await this.prismaService.post.create({\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n        authorId: userId,\n        // categories: {\n        //   create: [\n        //     {\n        //       createAt: new Date(),\n        //       category: {\n        //         create: {\n        //           id: uuid(),\n        //           name: 'New category',\n        //         },\n        //       },\n        //     },\n        //   ],\n        // },\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        published: true,\n        authorId: true,\n        createdAt: true,\n      },\n    });\n    return post;\n  }\n\n  async getAllPostsOfUser(userId: string): Promise | null {\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: userId,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        published: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getAllPublicPosts(userId: string): Promise | null {\n    const list = await this.prismaService.user.findMany({\n      where: {\n        id: userId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    if (!list) {\n      throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    }\n    if (list.length === 0) {\n      throw new NotFoundException(POST_ERROR.EMPTY);\n    }\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: userId,\n        published: true,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getOnePostById(postId: string): Promise {\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        published: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async updatePost(dto: UpdatePostDto): Promise {\n    const list = await this.getOnePostById(dto.postId);\n\n    if (!list) {\n      throw new NotFoundException(POST_ERROR.NOT_FOUND);\n    }\n\n    if (list.authorId !== dto.authorId) {\n      throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n    }\n\n    return await this.prismaService.post.update({\n      where: {\n        id: dto.postId,\n      },\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n        published: dto.published,\n      },\n      select: {\n        title: true,\n        description: true,\n        published: true,\n        files: true,\n        updatedAt: true,\n      },\n    });\n  }\n\n  async deletePost(userId: string, dto: DeleteOnePost): Promise {\n    const identify = await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n      select: {\n        authorId: true,\n      },\n    });\n\n    if (!identify) {\n      throw new NotFoundException(POST_ERROR.NOT_FOUND);\n    }\n\n    if (identify.authorId !== userId) {\n      throw new ForbiddenException(POST_ERROR.NOT_AUTHOR);\n    }\n\n    await this.prismaService.post.delete({\n      where: {\n        id: dto.postId,\n      },\n    });\n    return 'This post has been deleted!';\n  }\n\n  async reactionPost(dto: ReactionsPost): Promise {\n    const checkExist = await this.prismaService.reaction.findMany({\n      where: {\n        postId: dto.postId,\n        userId: dto.favouritorId,\n      },\n    });\n\n    if (checkExist.length > 0) {\n      throw new BadRequestException('You already reacted to this post');\n    }\n    await this.prismaService.reaction.create({\n      data: {\n        userId: dto.favouritorId,\n        postId: dto.postId,\n        type: dto.reactionType,\n      },\n    });\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n      select: {\n        reactions: true,\n      },\n    });\n  }\n\n  async getAllComments(postId: string): Promise {\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n      select: {\n        comments: true,\n      },\n    });\n  }\n\n  async addComment(\n    userId: string,\n    dto: CreateCommentDto,\n  ): Promise {\n    const checkPost = await this.prismaService.post.findUnique({\n      where: {\n        id: dto.postId,\n      },\n    });\n\n    if (!checkPost) {\n      throw new NotFoundException(POST_ERROR.NOT_FOUND);\n    }\n    return this.prismaService.comment.create({\n      data: {\n        text: dto.text,\n        postId: dto.postId,\n        authorId: userId,\n      },\n    });\n  }\n\n  async updateComment(dto: UpdateCommentTextDto): Promise {\n    return await this.prismaService.comment.update({\n      where: {\n        id: dto.id,\n      },\n      data: {\n        text: dto.text,\n      },\n      select: {\n        text: true,\n        updatedAt: true,\n      },\n    });\n  }\n\n  async deleteComment(dto: DeleteCommentDto): Promise {\n    await this.prismaService.comment.delete({\n      where: {\n        id: dto.id,\n      },\n    });\n    return RESPONSES_MESSAGE.DELETE_COMMENT;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService, ConfigModule],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor() {\n    super({\n      datasources: {\n        db: {\n          url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n          // url: process.env.DATABASE_URL,\n        },\n      },\n    });\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileEntity.html":{"url":"classes/ProfileEntity.html","title":"class - ProfileEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/profile.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/profile.entity.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsDate,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Length,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { fullNameValidator, phoneNumberValidator } from 'src/core/validators';\n\nexport class ProfileEntity {\n  @ApiProperty({\n    type: String,\n    example: 'Hello ABC',\n  })\n  @IsString()\n  @Length(3, 45)\n  @MinLength(2, {\n    message: 'Full name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(46, {\n    message: 'Name is too long, must be at most 45 characters!',\n  })\n  @Validate(fullNameValidator, {\n    message: 'Full name must be not begin with number!',\n  })\n  fullName: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  avatar: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  @IsNotEmpty()\n  cover: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Single',\n  })\n  @IsString()\n  marriageStatus: string;\n\n  @ApiProperty({\n    type: [],\n    example: ['Music', 'Sport', 'Travel'],\n  })\n  @IsArray()\n  interests: [];\n\n  @ApiProperty({\n    type: String,\n    example: '123, Address A, City B, Country C',\n  })\n  @IsString()\n  @MaxLength(101, {\n    message: 'Address is too long, must be at most 100 characters!',\n  })\n  address: string;\n\n  @ApiProperty({\n    type: String,\n    example: '09999999999',\n  })\n  @IsString()\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n  phone: string;\n\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\n  @Type(() => Date)\n  @IsDate()\n  birthdate: Date;\n\n  @ApiProperty({\n    type: Number,\n    example: 19,\n  })\n  @IsNumber()\n  @Min(17, {\n    message: 'You must be at least 18 years old!',\n  })\n  @Max(101, {\n    message: 'You must be at most 100 years old!',\n  })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    example: 'This is bio of Hello ABC account',\n  })\n  @IsString()\n  @MaxLength(151, {\n    message: 'Bio is too long, must be at most 150 characters!',\n  })\n  bio: string;\n\n  @ApiProperty({\n    type: Number,\n    description: '1: male, 2: female, 0: other',\n    example: 1,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(2)\n  gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE } from './roles.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    // return false;\n    const { request } = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () => user.roles.some((role) => user.roles.includes(role));\n\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class RtGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n  constructor(\n    @Inject(ConfigService)\n    private config: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('authorization').replace('Bearer', '').trim();\n    return {\n      ...payload,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/signup.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from '../../../users/entities/user.entity';\n\nexport class SignupDto extends PickType(UserEntity, [\n  'email',\n  'password',\n  'username',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(timeout(1000));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCommentTextDto.html":{"url":"classes/UpdateCommentTextDto.html","title":"class - UpdateCommentTextDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCommentTextDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { CommentEntity } from '../../../entities/comment.entity';\n\nexport class UpdateCommentTextDto extends PickType(CommentEntity, [\n  'id',\n  'text',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/update-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMessageDto } from './create-message.dto';\n\nexport class UpdateMessageDto extends PartialType(\n  CreateMessageDto,\n) {\n  id: string;\n  conversationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/request/password.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { UserEntity } from 'src/infrastructure/users/entities/user.entity';\n\nexport class UpdatePasswordDto extends PickType(UserEntity, [\n  'email',\n  'oldPassword',\n  'newPassword',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/post/request/update-post.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { PostEntity } from 'src/infrastructure/posts/entities/post.entity';\n\nexport class UpdatePostDto extends PickType(PostEntity, [\n  'title',\n  'description',\n  'files',\n  'published',\n  'authorId',\n  'postId',\n]) {}\n\nexport class ReactionsPost extends PickType(PostEntity, [\n  'postId',\n  'favouritorId',\n  'reactionType',\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAvatarDto.html":{"url":"classes/UpdateUserAvatarDto.html","title":"class - UpdateUserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserCoverDto.html":{"url":"classes/UpdateUserCoverDto.html","title":"class - UpdateUserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserProfileDto.html":{"url":"classes/UpdateUserProfileDto.html","title":"class - UpdateUserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/request/update-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        ProfileEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:75\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:101\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:43\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:111\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:88\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:51\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:35\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:121\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:65\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:58\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                        \n                            \n                                Inherited from         ProfileEntity\n\n                            \n                        \n                    \n                        \n                                Defined in         ProfileEntity:83\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PickType } from '@nestjs/swagger';\nimport { ProfileEntity } from '../../entities/profile.entity';\n\nexport class UpdateUserAvatarDto extends PickType(ProfileEntity, ['avatar']) {}\n\nexport class UpdateUserCoverDto extends PickType(ProfileEntity, ['cover']) {}\n\nexport class UpdateUserProfileDto extends ProfileEntity {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123'})@IsString()@IsNotEmpty()@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/entities/user.entity.ts:78\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class UserEntity {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  @Length(8, 21)\n  @MinLength(7, {\n    message: 'Password is too short, must be at least 8 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Password is too long, must be at most 20 characters!',\n  })\n  @Validate(passwordValidator, {\n    message:\n      'Password must be at contain at least one number, one uppercase letter and one special character',\n  })\n  password: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'username123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Username must be not begin with number!',\n  })\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('profile/:userIdOrUsername')@ApiOperation({summary: 'Get public user by user-id or username (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get('find/:email')@ApiOperation({summary: 'Find user account by email'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user-id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('profile')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: undefined})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiConflictResponse,\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiMethodNotAllowedResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiRequestTimeoutResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { GetCurrentUserId, Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport {\n  UpdateUserAvatarDto,\n  UpdateUserCoverDto,\n  UpdateUserProfileDto,\n} from './dto/request';\nimport { UsersService } from './users.service';\nimport {\n  IFindUserByEmail,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from './dto/response';\nimport {\n  STATUS_MESSAGE,\n  SYSTEM_ERROR,\n} from 'src/core/constants/status-message';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: SYSTEM_ERROR.UNAUTHORIZED })\n@ApiForbiddenResponse({ description: SYSTEM_ERROR.FORBIDDEN })\n@ApiNotFoundResponse({\n  description: SYSTEM_ERROR.NOT_FOUND,\n  type: Error,\n})\n@ApiMethodNotAllowedResponse({ description: SYSTEM_ERROR.METHOD_NOT_ALLOWED })\n@ApiNotAcceptableResponse({\n  description: SYSTEM_ERROR.NOT_ACCEPTABLE,\n})\n@ApiRequestTimeoutResponse({ description: SYSTEM_ERROR.REQUEST_TIMEOUT })\n@ApiConflictResponse({\n  description: SYSTEM_ERROR.CONFLICT,\n})\n@ApiTooManyRequestsResponse({ description: SYSTEM_ERROR.TOO_MANY_REQUESTS })\n@ApiInternalServerErrorResponse({\n  description: SYSTEM_ERROR.INTERNAL_SERVER_ERROR,\n})\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {\n    this.usersService = usersService;\n  }\n\n  @Public()\n  @Get('profile/:userIdOrUsername')\n  @ApiOperation({ summary: 'Get public user by user-id or username (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getPublicUserByIdOrUsername(\n    @Param('userIdOrUsername') userIdOrUsername: string,\n  ): Promise {\n    return this.usersService.getPublicUserByIdOrUsername(userIdOrUsername);\n  }\n\n  @Public()\n  @Get('find/:email')\n  @ApiOperation({ summary: 'Find user account by email' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async getUserByEmail(\n    @Param('email') email: string,\n  ): Promise {\n    return this.usersService.getUserByEmail(email);\n  }\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Get user profile by user-id (all)',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  async getUserProfile(\n    @GetCurrentUserId() userId: string,\n  ): Promise {\n    return this.usersService.getUserProfile(userId);\n  }\n\n  @Patch('profile')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  async updateUsersProfile(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UpdateUserProfileDto,\n  ): Promise {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('profile/avatar')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateUsersAvatar(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UpdateUserAvatarDto,\n  ): Promise {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('profile/cover')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image by user id' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: STATUS_MESSAGE.SUCCESS,\n  })\n  async updateUsersCover(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: UpdateUserCoverDto,\n  ): Promise {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('profile')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user profile by email & password' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: STATUS_MESSAGE.SUCCESS })\n  async deleteUser(\n    @GetCurrentUserId() userId: string,\n    @Body() dto: LoginDto,\n  ): Promise {\n    return this.usersService.deleteUser(userId, dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.module.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, RequestMethod } from '@nestjs/common';\nimport { ExistedUserMiddleware } from 'src/core/middlewares/existed-user.middleware';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [PrismaModule, AuthModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    // consumer\n    //   .apply(ExistedUserMiddleware)\n    //   .forRoutes({ path: 'users', method: RequestMethod.GET });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getPublicUserByIdOrUsername\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                getUserProfile\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:192\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:225\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPublicUserByIdOrUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPublicUserByIdOrUsername(userIdOrUsername: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userIdOrUsername\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserProfile(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UpdateUserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UpdateUserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:163\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UpdateUserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateUserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  NotAcceptableException,\n  NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto/request';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport {\n  UpdateUserAvatarDto,\n  UpdateUserCoverDto,\n  UpdateUserProfileDto,\n} from './dto/request';\nimport {\n  IAllUsers,\n  IFindUserByEmail,\n  IGetUserProfile,\n  IPublicUser,\n  IUpdateAvatar,\n  IUpdateCover,\n} from './dto/response';\nimport { PaginationDto } from 'src/core/common/pagination.dto';\nimport {\n  AUTH_ERROR,\n  RESPONSES_MESSAGE,\n  SYSTEM_ERROR,\n  USER_ERROR,\n} from 'src/core/constants/status-message';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prismaService: PrismaService) {}\n\n  async getAllUsers(dto: PaginationDto): Promise {\n    const total = await this.prismaService.user.count();\n    const users = await this.prismaService.user.findMany({\n      // skip: Number(dto.limit) * (Number(dto.current) - 1),\n      take: Number(dto.limit) || 10,\n      orderBy: {\n        id: dto.order as any,\n      },\n      select: {\n        id: true,\n        email: true,\n        username: true,\n        createdAt: true,\n      },\n    });\n    return {\n      total,\n      orderBy: dto.order || 'asc',\n      pageItems: users.length,\n      pageLimit: Number(dto.limit) || 10,\n      pageCurrent: Number(dto.current) || 1,\n      users: users,\n    };\n  }\n\n  async getPublicUserByIdOrUsername(\n    userIdOrUsername: string,\n  ): Promise {\n    const identify = await this.prismaService.user.findMany({\n      where: {\n        OR: [{ id: userIdOrUsername }, { username: userIdOrUsername }],\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n      },\n    });\n    if (identify.length === 0)\n      throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    return identify[0];\n  }\n\n  async getUserByEmail(email: string): Promise {\n    const identify = await this.prismaService.user.findUnique({\n      where: {\n        email: email,\n      },\n      select: {\n        username: true,\n        email: true,\n      },\n    });\n\n    if (!identify) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    return identify;\n  }\n\n  async getUserProfile(userId: string): Promise {\n    const profile = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n\n    if (!profile) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n    return profile;\n  }\n\n  async updateUsersProfile(\n    userId: string,\n    dto: UpdateUserProfileDto,\n  ): Promise {\n    await this.prismaService.userProfile.upsert({\n      where: {\n        userId: userId,\n      },\n      create: {\n        ...dto,\n        userId: userId,\n      },\n      update: {\n        ...dto,\n      },\n    });\n    const newProfile = await this.getPublicUserByIdOrUsername(userId);\n    return newProfile;\n  }\n\n  async updateUsersAvatar(\n    userId: string,\n    dto: UpdateUserAvatarDto,\n  ): Promise {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newAvatar = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        profile: {\n          select: {\n            avatar: true,\n          },\n        },\n      },\n    });\n    return newAvatar;\n  }\n\n  async updateUsersCover(\n    userId: string,\n    dto: UpdateUserCoverDto,\n  ): Promise {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newCover = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        profile: {\n          select: {\n            cover: true,\n          },\n        },\n      },\n    });\n    return newCover;\n  }\n\n  async deleteUser(userId: string, dto: LoginDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n      select: {\n        email: true,\n        password: true,\n      },\n    });\n\n    if (!user) throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    const matchEmail: number = dto.password.localeCompare(user.password);\n    const matchPassword: boolean = await comparePassword(\n      dto.password,\n      user.password,\n    );\n\n    if (matchEmail === 0 || !matchPassword)\n      throw new ForbiddenException(SYSTEM_ERROR.FORBIDDEN);\n\n    if (!matchPassword)\n      throw new NotAcceptableException(AUTH_ERROR.PASSWORD_NOT_MATCH);\n\n    await this.prismaService.userProfile.delete({\n      where: {\n        userId: userId,\n      },\n    });\n    return RESPONSES_MESSAGE.DELETE_USER;\n  }\n\n  async deleteUserById(userId: string): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException(USER_ERROR.NOT_FOUND);\n\n    await this.prismaService.user.delete({\n      where: {\n        id: userId,\n      },\n    });\n    return RESPONSES_MESSAGE.DELETE_USER;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            AUTH_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            CONVERSATION_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            POST_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            RESPONSES_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            STATUS_MESSAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            SYSTEM_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/constants/status-message.ts\n            \n            variable\n            USER_ERROR\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/helpers/age.ts\n            \n            variable\n            currentAge\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/exception.interceptor.ts\n            \n            injectable\n            ErrorsIntereptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middlewares/existed-user.middleware.ts\n            \n            injectable\n            ExistedUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/middlewares/helmet.middleware.ts\n            \n            function\n            helmetMiddleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/middlewares/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/utils/delay.ts\n            \n            function\n            wait\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/utils/random.ts\n            \n            function\n            randomInt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            class\n            imageValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/image.validator.ts\n            \n            variable\n            parttern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin-users.controller.ts\n            \n            controller\n            AdminUsersController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/admin/entities/admin.entity.ts\n            \n            class\n            Admin\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/request/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            class\n            MessagesGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/delete-comment.dto.ts\n            \n            class\n            DeleteCommentDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/comment/request/update-comment.dto.ts\n            \n            class\n            UpdateCommentTextDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/post/request/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/comment.entity.ts\n            \n            class\n            CommentEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            PostEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/infrastructure/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserAvatarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserCoverDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/request/update-users.dto.ts\n            \n            class\n            UpdateUserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/profile.entity.ts\n            \n            class\n            ProfileEntity\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            nodeExternals\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                webpack-hmr.config.ts\n            \n            variable\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.2.1\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : ^4.2.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EAlcohol   (src/.../enum.ts)\n                        \n                        \n                            EEducation   (src/.../enum.ts)\n                        \n                        \n                            EGender   (src/.../enum.ts)\n                        \n                        \n                            EMaritalStatus   (src/.../enum.ts)\n                        \n                        \n                            ENotification   (src/.../enum.ts)\n                        \n                        \n                            EOrder   (src/.../enum.ts)\n                        \n                        \n                            EOtpStatus   (src/.../enum.ts)\n                        \n                        \n                            EReligion   (src/.../enum.ts)\n                        \n                        \n                            ESocial   (src/.../enum.ts)\n                        \n                        \n                            EUpdateUserProfile   (src/.../enum.ts)\n                        \n                        \n                            EUserRoles   (src/.../enum.ts)\n                        \n                        \n                            ROLE   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/enum.ts\n    \n        \n            \n                \n                    \n                        \n                        EAlcohol\n                    \n                \n                        \n                            \n                                 SOMETIMES\n                            \n                        \n                        \n                            \n                                Value : sometime\n                            \n                        \n                        \n                            \n                                 USUALLY\n                            \n                        \n                        \n                            \n                                Value : usually\n                            \n                        \n                        \n                            \n                                 NEVER\n                            \n                        \n                        \n                            \n                                Value : never\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EEducation\n                    \n                \n                        \n                            \n                                 PRIMARY\n                            \n                        \n                        \n                            \n                                Value : primary\n                            \n                        \n                        \n                            \n                                 SECONDARY\n                            \n                        \n                        \n                            \n                                Value : secondary\n                            \n                        \n                        \n                            \n                                 HIGH_SCHOOL\n                            \n                        \n                        \n                            \n                                Value : high_school\n                            \n                        \n                        \n                            \n                                 COLLEGE\n                            \n                        \n                        \n                            \n                                Value : college\n                            \n                        \n                        \n                            \n                                 UNIVERSITY\n                            \n                        \n                        \n                            \n                                Value : university\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EGender\n                    \n                \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n                        \n                            \n                                Value : femail\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EMaritalStatus\n                    \n                \n                        \n                            \n                                 SINGLE\n                            \n                        \n                        \n                            \n                                Value : single\n                            \n                        \n                        \n                            \n                                 MARRIED\n                            \n                        \n                        \n                            \n                                Value : married\n                            \n                        \n                        \n                            \n                                 DIVORCED\n                            \n                        \n                        \n                            \n                                Value : divorced\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ENotification\n                    \n                \n                        \n                            \n                                 LIKE\n                            \n                        \n                        \n                            \n                                Value : like\n                            \n                        \n                        \n                            \n                                 MESSAGE\n                            \n                        \n                        \n                            \n                                Value : message\n                            \n                        \n                        \n                            \n                                 MATCH\n                            \n                        \n                        \n                            \n                                Value : match\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EOrder\n                    \n                \n                        \n                            \n                                 ASC\n                            \n                        \n                        \n                            \n                                Value : ASC\n                            \n                        \n                        \n                            \n                                 DESC\n                            \n                        \n                        \n                            \n                                Value : DESC\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EOtpStatus\n                    \n                \n                        \n                            \n                                 PENDING\n                            \n                        \n                        \n                            \n                                Value : pending\n                            \n                        \n                        \n                            \n                                 APPROVED\n                            \n                        \n                        \n                            \n                                Value : approved\n                            \n                        \n                        \n                            \n                                 CANCELED\n                            \n                        \n                        \n                            \n                                Value : canceled\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EReligion\n                    \n                \n                        \n                            \n                                 BUDDHISM\n                            \n                        \n                        \n                            \n                                Value : buddhism\n                            \n                        \n                        \n                            \n                                 GOD\n                            \n                        \n                        \n                            \n                                Value : god\n                            \n                        \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 NON_RELIGIONS\n                            \n                        \n                        \n                            \n                                Value : non-religion\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        ESocial\n                    \n                \n                        \n                            \n                                 FACEBOOK\n                            \n                        \n                        \n                            \n                                Value : facebook\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EUpdateUserProfile\n                    \n                \n                        \n                            \n                                 OTHER\n                            \n                        \n                        \n                            \n                                Value : other\n                            \n                        \n                        \n                            \n                                 GENDER\n                            \n                        \n                        \n                            \n                                Value : gender\n                            \n                        \n                        \n                            \n                                 DESCRIPTION\n                            \n                        \n                        \n                            \n                                Value : description\n                            \n                        \n                        \n                            \n                                 CHILDREN\n                            \n                        \n                        \n                            \n                                Value : children\n                            \n                        \n                        \n                            \n                                 ALCOHOL\n                            \n                        \n                        \n                            \n                                Value : alcohol\n                            \n                        \n                        \n                            \n                                 RELIGION\n                            \n                        \n                        \n                            \n                                Value : religion\n                            \n                        \n                        \n                            \n                                 HEIGHT\n                            \n                        \n                        \n                            \n                                Value : height\n                            \n                        \n                        \n                            \n                                 MARITAL_STATUS\n                            \n                        \n                        \n                            \n                                Value : maritalStatus\n                            \n                        \n                        \n                            \n                                 EDUCATION\n                            \n                        \n                        \n                            \n                                Value : education\n                            \n                        \n                        \n                            \n                                 PURPOSEID\n                            \n                        \n                        \n                            \n                                Value : purposeId\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        EUserRoles\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n    src/core/roles/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return `Full name has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            helmetMiddleware   (src/.../helmet.middleware.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            randomInt   (src/.../random.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                        \n                            wait   (src/.../delay.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/middlewares/helmet.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        helmetMiddleware\n                        \n                    \n                \n            \n            \n                \nhelmetMiddleware(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     INestApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/random.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        randomInt\n                        \n                    \n                \n            \n            \n                \nrandomInt(min: number, max: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    min\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    max\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/utils/delay.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        wait\n                        \n                    \n                \n            \n            \n                \nwait(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/imageValidator.html":{"url":"classes/imageValidator.html","title":"class - imageValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  imageValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/image.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(image: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/image.validator.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    image\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidationArguments,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\n\nconst parttern = /\\.(jpeg|jpg|gif|png)$/;\n@ValidatorConstraint({ name: 'customeImage', async: false })\nexport class imageValidator implements ValidatorConstraintInterface {\n  validate(\n    image: string,\n    args: ValidationArguments,\n  ): boolean | Promise {\n    const isMatched = image.match(parttern);\n    return isMatched && isMatched != null ? true : false;\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Image has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\n\n\nDatabase diagram\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAdmin\nAuth\nFiles\n\n\n\n\n✅ Get list all users\n✅  Signup\n✅  Upload single file (avatar, cover)\n\n\n✅ Get user profile by id\n✅  Signin\n✅  Upload multi files\n\n\n✅ Update user profile\n✅  Signout\n✅  Upload array-field files (post, sample_image)\n\n\n✅ Delete user by user-id\n✅  Refresh access-token\n\n\n\n\n✅  Update password\n\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅ Get public user by user-id or username\n✅  Create a new post\n\n\n✅ Find user account by email\n✅  Get all posts of user by user-id\n\n\n✅ Get user profile by id\n✅  Match a new category with new post\n\n\n✅ Update user profile\n✅ Get a post by post-id\n\n\n✅ Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n\n✅ Reaction to post\n\n\n\n✅ Get all comments of post\n\n\n\n✅ Add a new comment to post\n\n\n\n✅ Update a comment of post\n\n\n\n✅ Delete a comment of post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅ Create new conversation\n✅  Join conversation by conversation-id\n\n\n✅ Get all conversations of user\n✅  Get all messages in conversation\n\n\n✅ Get one conversation information has current user\n✅  Create new messages\n\n\n✅ Update members to current conversation\n✅ Update message by message-id\n\n\n✅ Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅ Delete admin out of current conversation by creator\n\n\n\n✅ Delete conversation by creator\n\n\n\n✅ Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nStructure\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\nWebpack hot-reload auto recompile the entire project each time a change occurs\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nNest example\nNest awesome\nNest structure\nPostgre x Heroku\nNest x Prisma\nDatabase for chat\nDatabase for social\n\nSetup Prisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nnpm run prisma:pull\n\n# generate the Prisma Client\nnpm run prisma:generate\n\n# Create env and migrate db\nnpm run prisma:migrate\n\n# Sync migrate change to db\nnpm run prisma:push# Open prisma studio\nnpm run prisma:studioRunning with local\n# Intall dependencies\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRunning with Docker\n# Pull image\n$ docker pull thuongtruong1009/teneno-api:latest# Start container\n$ docker-compose upTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_imports\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nUsersModule->AdminModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nAdminService\n\nAdminService\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        10 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    20 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    41 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Password has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Phone number has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.5.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker, github\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments): boolean {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments): string {\n    return `Username has must filled ! Args: ${args}`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            CONVERSATION_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            currentAge   (src/.../age.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            nodeExternals   (webpack-hmr.config.ts)\n                        \n                        \n                            parttern   (src/.../image.validator.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            POST_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RESPONSES_MESSAGE   (src/.../status-message.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            STATUS_MESSAGE   (src/.../status-message.ts)\n                        \n                        \n                            SYSTEM_ERROR   (src/.../status-message.ts)\n                        \n                        \n                               (webpack-hmr.config.ts)\n                        \n                        \n                            USER_ERROR   (src/.../status-message.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/constants/status-message.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SAME_PASSWORD: 'New password must be different from old password',\n  PASSWORD_NOT_MATCH: 'Password does not match',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CONVERSATION_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_FOUND: 'Conversation not found',\n  NOT_CREATOR: 'You are not creator of this conversation',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        POST_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_FOUND: 'Post not found',\n  EMPTY: 'User not have post',\n  DUPLICATE: 'Post already exist',\n  NOT_AUTHOR: 'You are not author of this post',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESPONSES_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  CREATE_USER: 'The new account has been created.',\n  DELETE_USER: 'The user account has been deleted.',\n  DELETE_COMMENT: 'The comment has been deleted.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATUS_MESSAGE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  SUCCESS: 'Success.',\n  ERROR: 'Errors.',\n  WARNING: 'Warning.',\n  INFO: 'Info.',\n  UNKNOWN: 'Unknown.',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SYSTEM_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  FORBIDDEN: 'Access denied',\n  NOT_FOUND: 'Not found',\n  INTERNAL_SERVER_ERROR: 'Internal server error',\n  BAD_REQUEST: 'Bad request',\n  UNAUTHORIZED: 'Unauthorized',\n  CONFLICT: 'Conflict',\n  TOO_MANY_REQUESTS: 'Too many requests',\n  METHOD_NOT_ALLOWED: 'Method not allowed',\n  NOT_ACCEPTABLE: 'Provided fields are not acceptable',\n  REQUEST_TIMEOUT: 'Request timeout',\n  PAYLOAD_TOO_LARGE: 'Payload too large',\n  UNSUPPORTED_MEDIA_TYPE: 'Unsupported media type',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_FOUND: 'User not found',\n  DUPLICATE: 'User already exist',\n}\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n  let option;\n\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n    option = { origin: true };\n  } else {\n    option = { origin: false };\n  }\n  callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    src/core/helpers/age.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        currentAge\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (birthDate: Date): number => {\n  const diff = Date.now() - new Date(birthDate).getTime();\n  const ageDate = new Date(diff);\n  return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n  const config: ConfigService = app.get(ConfigService);\n\n  const swaggerConfig = new DocumentBuilder()\n    .setTitle('Teneno API')\n    .setDescription(\n      `This is CRUD Rest API endpoints for Teneno - the webapp project builded with NestJS. View the documentation at Teneno-API documentation`,\n    )\n    .setContact(\n      'Thuong Truong',\n      'https://github.com/thuongtruong1009',\n      'ititiu19228@student.hcmiu.edu.vn',\n    )\n    .addServer(config.get('BASE_URL'))\n    .addServer(config.get('HOST_URL'))\n    .setVersion('1.5.0')\n    .addTag('cats', 'default description')\n    .addBearerAuth({\n      type: 'http',\n      scheme: 'Bearer',\n      bearerFormat: 'JWT',\n      description: 'Paste a valid access token here.',\n      in: 'Header',\n    })\n    .addBasicAuth()\n    .addSecurity('api_key', {\n      type: 'apiKey',\n      name: 'api_key',\n      in: 'header',\n    })\n    .build();\n\n  const options: ISwaggerOptions = {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  };\n  const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n  SwaggerModule.setup('api', app, document, {\n    swaggerOptions: {\n      persistAuthorization: true,\n    },\n  });\n}\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    webpack-hmr.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        nodeExternals\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('webpack-node-externals')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('run-script-webpack-plugin')\n                    \n                \n\n\n        \n    \n\n    src/core/validators/image.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parttern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /\\.(jpeg|jpg|gif|png)$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: ROLE[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
