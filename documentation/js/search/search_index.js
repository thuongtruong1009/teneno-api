var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AllExceptionsFilter.html",[0,0.253,1,3.357]],["body/classes/AllExceptionsFilter.html",[0,0.222,1,4.18,2,0.598,3,0.115,4,0.094,5,0.094,6,3.234,7,2.142,8,5.365,9,0.331,10,1.211,11,5.847,12,4.484,13,5.253,14,4.869,15,6.119,16,1.169,17,3.234,18,4.081,19,0.434,20,3.688,21,1.148,22,0.011,23,0.835,24,0.369,25,1.016,26,3.396,27,4.606,28,6.468,29,3.459,30,5.365,31,5.847,32,3.688,33,3.646,34,1.371,35,5.031,36,5.253,37,3.688,38,3.688,39,4.484,40,3.688,41,0.244,42,2.146,43,0.544,44,5.253,45,3.688,46,3.688,47,2.047,48,0.115,49,1.734,50,1.942,51,3.234,52,3.234,53,3.234,54,3.688,55,3.688,56,3.742,57,5.253,58,2.296,59,6.668,60,3.688,61,3.688,62,3.688,63,6.119,64,5.847,65,3.688,66,3.688,67,3.234,68,3.688,69,3.688,70,0.007,71,0.007]],["title/controllers/AppController.html",[72,1.984,73,3.102]],["body/controllers/AppController.html",[0,0.298,3,0.154,4,0.126,5,0.126,9,0.445,10,1.483,19,0.324,22,0.011,34,1.113,41,0.301,42,2.889,43,0.733,48,0.154,49,2.335,56,3.415,70,0.008,71,0.008,72,3.025,73,4.728,74,2.25,75,4.354,76,2.756,77,6.616,78,1.574,79,4.965,80,4.417,81,4.965,82,5.64,83,2.392,84,5.64,85,3.274,86,3.415,87,4.728,88,5.118,89,4.965,90,6.431,91,2.455,92,4.965,93,0.752,94,3.21,95,4.158,96,6.255,97,3.21,98,1.574,99,4.612,100,4.354,101,3.57,102,4.965,103,4.965,104,3.951,105,3.21,106,3.21,107,4.354,108,5.64,109,1.284,110,4.965]],["title/modules/AppModule.html",[111,1.61,112,3.102]],["body/modules/AppModule.html",[0,0.199,3,0.103,4,0.084,5,0.084,7,1.35,10,0.764,19,0.216,21,0.57,22,0.011,23,0.415,24,0.183,25,0.504,34,0.742,35,3.337,41,0.328,43,0.489,48,0.103,70,0.006,71,0.007,73,4.232,74,2.202,99,4.565,100,2.903,101,2.697,111,1.855,112,6.214,113,1.557,114,2.376,115,2.903,116,2.903,117,2.903,118,4.565,119,4.849,120,4.849,121,4.849,122,4.849,123,4.849,124,3.919,125,4.321,126,2.697,127,1.838,128,1.685,129,3.311,130,2.473,131,3.142,132,3.311,133,4.859,134,6.342,135,3.311,136,3.311,137,4.859,138,4.859,139,2.274,140,3.311,141,3.311,142,3.337,143,3.311,144,3.311,145,3.311,146,3.311,147,2.903,148,2.141,149,3.311,150,2.434,151,3.311,152,3.311,153,3.311,154,3.311,155,3.311,156,2.434,157,3.311,158,3.311,159,3.311,160,1.557,161,3.311,162,2.903,163,3.311,164,3.311,165,3.311,166,3.311,167,3.311,168,4.859,169,2.434,170,3.311,171,3.311,172,3.311,173,2.635,174,3.311,175,2.903,176,2.903,177,3.311,178,4.581,179,3.572,180,5.048,181,4.859,182,3.311,183,3.311,184,4.859,185,3.867,186,4.859,187,3.572,188,1.264,189,3.311,190,4.859,191,3.311,192,3.311,193,2.027]],["title/injectables/AppService.html",[99,2.728,194,0.892]],["body/injectables/AppService.html",[0,0.331,3,0.171,4,0.14,5,0.14,9,0.494,10,1.585,12,3.374,16,1.748,17,4.834,18,4.799,19,0.448,21,0.949,22,0.011,23,0.691,24,0.305,25,0.84,26,4.843,34,1.235,41,0.299,43,0.814,48,0.171,70,0.009,71,0.009,77,6.876,80,3.786,82,4.834,87,4.053,88,5.47,93,0.803,99,4.444,109,1.425,194,1.454,195,2.104,196,4.834,197,5.513,198,5.513,199,5.513,200,5.513,201,5.513,202,5.513]],["title/injectables/AtGuard.html",[142,2.898,194,0.892]],["body/injectables/AtGuard.html",[0,0.3,3,0.155,4,0.127,5,0.127,9,0.447,10,1.488,16,1.583,19,0.421,21,1.111,22,0.011,23,0.808,24,0.357,25,0.983,34,1.119,41,0.286,43,0.737,48,0.155,49,2.348,50,1.845,70,0.008,71,0.008,101,3.97,109,1.669,139,3.429,142,4.433,160,3.036,173,6.382,194,1.365,195,1.905,203,4.377,204,5.659,205,4.377,206,4.992,207,5.659,208,4.399,209,4.992,210,2.905,211,4.377,212,3.429,213,1.407,214,4.377,215,3.429,216,4.992,217,4.992,218,4.992,219,4.992,220,4.992,221,4.992,222,4.992,223,3.972,224,3.972,225,4.992,226,4.992,227,4.992,228,6.454,229,4.992,230,4.377,231,4.377,232,4.992]],["title/injectables/AtStrategy.html",[194,0.892,233,2.898]],["body/injectables/AtStrategy.html",[0,0.308,3,0.16,4,0.13,5,0.13,9,0.46,10,1.515,16,1.627,19,0.428,21,1.131,22,0.011,23,0.823,24,0.364,25,1.001,34,1.15,41,0.315,43,0.757,48,0.16,70,0.008,71,0.008,109,1.327,148,3.317,194,1.39,195,1.958,212,3.524,213,1.446,215,3.524,233,4.511,234,4.499,235,3.487,236,5.76,237,5.616,238,5.131,239,3.772,240,6.569,241,8.078,242,5.131,243,5.76,244,4.083,245,4.499,246,4.499,247,4.499,248,3.772,249,4.511,250,2.985,251,4.499,252,4.499,253,4.499,254,4.499,255,5.131]],["title/controllers/AuthController.html",[72,1.984,256,3.102]],["body/controllers/AuthController.html",[0,0.173,3,0.089,4,0.073,5,0.073,9,0.258,10,1.008,19,0.414,21,1.095,22,0.011,23,0.797,24,0.397,25,0.969,29,1.213,34,1.425,41,0.278,42,1.672,43,0.424,48,0.089,49,1.352,70,0.006,71,0.006,72,1.352,74,1.302,76,1.595,78,2.123,83,2.416,91,1.097,93,0.859,94,1.858,95,4.33,97,1.858,98,0.911,101,2.936,105,3.822,106,4.111,109,1.644,142,1.974,185,2.287,250,1.672,256,3.214,257,2.52,258,3.042,259,5.873,260,5.54,261,3.833,262,3.833,263,3.833,264,2.52,265,2.874,266,5.29,267,3.015,268,6.445,269,2.874,270,2.678,271,5.511,272,2.52,273,2.874,274,2.874,275,4.371,276,2.874,277,2.52,278,3.618,279,2.874,280,4.371,281,2.874,282,3.697,283,2.52,284,4.6,285,2.874,286,2.056,287,2.78,288,2.874,289,2.874,290,3.833,291,2.874,292,2.52,293,4.06,294,2.874,295,2.826,296,2.826,297,2.874,298,2.113,299,1.595,300,2.52,301,2.874,302,4.06,303,3.478,304,3.002,305,3.002,306,3.002,307,4.782,308,3.478,309,3.822,310,2.52,311,2.287,312,3.478,313,2.113,314,2.52,315,2.52,316,2.874,317,2.287,318,1.974,319,4.6,320,1.858,321,2.52,322,1.974,323,1.858,324,2.874,325,2.874,326,2.874,327,2.287,328,2.874,329,2.874,330,2.874,331,2.874,332,2.874,333,2.874,334,4.371,335,2.874,336,2.874,337,2.874,338,2.874,339,2.874,340,2.874,341,2.874,342,2.874,343,2.874]],["title/modules/AuthModule.html",[111,1.61,118,2.728]],["body/modules/AuthModule.html",[0,0.305,3,0.158,4,0.129,5,0.129,22,0.011,41,0.322,43,0.749,48,0.158,70,0.008,71,0.008,74,2.955,111,2.49,113,2.387,114,3.189,118,5.532,124,4.471,126,3.62,127,2.816,128,2.583,130,3.32,131,4.217,233,5.532,256,5.299,309,5.207,310,4.449,344,4.449,345,4.449,346,5.074,347,5.532,348,5.074,349,4.449,350,5.074,351,5.074,352,6.522,353,4.038]],["title/injectables/AuthService.html",[194,0.892,309,2.728]],["body/injectables/AuthService.html",[0,0.136,3,0.07,4,0.058,5,0.058,9,0.203,10,0.837,12,2.779,16,1.151,19,0.431,21,1.14,22,0.011,23,0.829,24,0.367,25,1.008,34,1.427,41,0.254,43,0.334,48,0.07,50,2.773,70,0.005,71,0.005,86,2.757,93,0.932,109,1.469,148,1.464,194,0.768,195,0.864,237,4.458,244,1.802,250,1.318,258,3.044,259,3.182,260,5.069,261,3.182,262,3.182,263,3.182,264,3.182,267,2.315,270,3.094,271,5.357,272,3.182,277,3.182,278,3.178,282,2.757,283,3.182,284,3.567,286,1.065,287,3.113,292,3.182,293,3.567,296,3.357,309,2.346,315,1.986,353,1.802,354,1.986,355,3.629,356,3.629,357,2.265,358,3.535,359,6.37,360,2.265,361,3.629,362,4.164,363,2.265,364,2.265,365,2.265,366,2.265,367,2.265,368,2.265,369,3.629,370,5.683,371,2.265,372,1.586,373,1.986,374,3.338,375,1.802,376,1.986,377,1.986,378,4.668,379,2.265,380,3.629,381,3.629,382,3.629,383,2.265,384,3.629,385,2.265,386,2.265,387,2.265,388,2.265,389,4.132,390,2.265,391,3.182,392,1.733,393,4.541,394,2.265,395,2.265,396,2.265,397,4.554,398,1.318,399,1.986,400,1.665,401,1.986,402,1.986,403,1.665,404,1.107,405,1.464,406,1.986,407,1.986,408,1.986,409,1.986,410,1.802,411,1.986,412,2.112,413,1.986,414,1.386,415,5.804,416,2.265,417,2.265,418,2.265,419,5.193,420,3.613,421,4.458,422,4.983,423,4.983,424,5.683,425,1.986,426,3.182,427,4.541,428,4.541,429,4.541,430,2.265,431,3.182,432,3.629,433,3.629,434,3.629,435,2.265,436,2.265,437,1.986,438,2.265]],["title/classes/ConversationEntity.html",[0,0.253,439,3.102]],["body/classes/ConversationEntity.html",[0,0.266,2,0.718,3,0.138,4,0.113,5,0.113,9,0.397,19,0.532,22,0.011,23,0.845,24,0.452,41,0.177,48,0.138,70,0.008,71,0.008,78,2.589,83,2.138,93,0.992,98,1.404,160,2.805,392,2.574,403,5.304,404,3.297,431,5.23,439,4.385,440,3.884,441,1.587,442,4.127,443,5.366,444,3.743,445,3.58,446,5.913,447,3.767,448,4.43,449,4.43,450,4.43,451,4.43,452,4.43,453,3.311,454,5.23,455,4.43,456,4.43,457,4.43,458,4.43,459,4.43,460,2.711]],["title/controllers/ConversationsController.html",[72,1.984,461,3.102]],["body/controllers/ConversationsController.html",[0,0.13,3,0.067,4,0.055,5,0.055,9,0.193,10,0.804,19,0.424,21,1.119,22,0.011,23,0.814,24,0.391,25,0.99,34,1.457,41,0.221,42,1.255,43,0.318,48,0.067,49,1.014,70,0.004,71,0.004,72,1.014,74,0.977,76,1.197,78,2.061,83,2.38,91,0.823,93,0.904,94,1.394,95,4.341,96,1.891,97,1.394,98,0.684,105,4.037,106,4.203,109,1.681,160,1.641,258,3.019,267,2.83,282,4.36,286,1.641,287,2.374,290,3.059,295,3.263,298,4.59,299,1.936,302,2.396,303,2.776,304,2.396,305,2.396,306,2.396,307,4.612,318,1.481,319,5.157,320,1.394,322,1.481,323,1.394,327,1.716,378,1.255,392,2.264,414,2.135,439,4.59,444,3.292,445,1.852,461,2.565,462,1.891,463,3.496,464,3.059,465,3.852,466,3.852,467,3.059,468,3.852,469,3.852,470,3.852,471,3.852,472,1.891,473,2.802,474,2.156,475,6.332,476,5.201,477,2.156,478,2.156,479,3.315,480,1.891,481,3.467,482,2.156,483,4.075,484,4.779,485,2.156,486,1.891,487,2.937,488,2.156,489,2.396,490,4.938,491,2.156,492,4.612,493,1.891,494,3.089,495,2.156,496,3.489,497,2.565,498,2.156,499,1.891,500,3.263,501,2.156,502,4.426,503,2.156,504,1.891,505,2.937,506,2.156,507,2.156,508,1.891,509,2.937,510,2.156,511,2.255,512,2.156,513,1.891,514,2.937,515,2.156,516,3.059,517,3.489,518,2.156,519,1.891,520,1.716,521,3.263,522,1.891,523,2.156,524,2.156,525,1.481,526,2.156,527,2.156,528,2.156,529,2.156,530,2.156,531,2.156,532,2.156,533,2.156,534,4.393,535,2.156,536,2.156,537,2.156,538,2.156,539,2.156,540,2.156,541,4.393,542,2.156,543,2.156,544,2.156,545,2.156,546,2.156]],["title/modules/ConversationsModule.html",[111,1.61,119,2.898]],["body/modules/ConversationsModule.html",[0,0.318,3,0.165,4,0.134,5,0.134,22,0.011,41,0.318,43,0.781,48,0.165,70,0.009,71,0.009,74,3.036,111,2.557,113,2.489,114,3.275,119,5.845,124,4.52,125,4.984,126,3.719,127,2.937,128,2.694,130,3.41,131,4.331,461,5.404,521,5.265,522,4.641,547,4.641,548,5.292,549,4.641,550,5.292,551,5.292,552,4.641,553,4.641]],["title/injectables/ConversationsService.html",[194,0.892,521,2.728]],["body/injectables/ConversationsService.html",[0,0.138,3,0.072,4,0.059,5,0.059,9,0.207,10,0.848,16,0.731,19,0.447,21,1.183,22,0.011,23,0.917,24,0.38,25,1.046,34,1.493,41,0.209,43,0.34,48,0.072,49,1.084,50,2.603,70,0.005,71,0.005,83,1.167,86,3.043,93,0.916,109,1.859,160,2.16,194,0.778,195,0.88,258,3.053,282,4.247,358,3.392,378,4.097,392,2.992,404,2.246,412,2.141,442,3.508,444,3.56,445,3.244,453,1.279,464,3.226,465,3.226,466,4.028,467,3.226,468,3.226,469,3.226,470,4.028,471,4.028,472,3.226,473,2.911,475,2.928,479,3.405,480,3.226,481,3.602,486,2.021,487,3.052,489,1.583,492,4.939,493,3.226,494,3.21,499,3.226,500,3.391,504,3.226,505,3.052,508,2.021,509,3.052,511,4.147,513,2.021,514,3.052,521,2.379,554,2.021,555,1.834,556,2.304,557,2.304,558,2.304,559,2.304,560,2.304,561,2.304,562,2.304,563,2.304,564,2.304,565,2.021,566,2.021,567,3.377,568,3.68,569,2.304,570,3.68,571,3.226,572,5.245,573,3.68,574,4.593,575,5.245,576,5.841,577,1.834,578,6.022,579,5.245,580,2.304,581,2.304,582,2.304,583,2.304,584,3.226,585,2.304]],["title/classes/CreateConversationDto.html",[0,0.253,473,2.342]],["body/classes/CreateConversationDto.html",[0,0.308,2,0.577,3,0.111,4,0.09,5,0.09,9,0.319,19,0.453,22,0.011,23,0.974,24,0.437,25,0.78,41,0.24,48,0.111,56,4.287,70,0.007,71,0.007,78,2.204,83,2.465,93,0.989,98,1.129,160,1.674,235,1.89,441,1.363,442,3.672,444,3.33,445,3.185,447,3.164,453,2.843,454,4.491,460,3.135,473,2.843,497,4.411,586,6.348,587,1.976,588,3.859,589,3.33,590,4.491,591,3.56,592,3.56,593,3.56,594,5.999,595,3.56,596,3.56,597,5.221,598,4.824,599,3.56,600,5.221,601,5.999,602,4.491,603,5.221,604,3.484,605,3.56,606,3.56,607,3.56,608,3.122,609,3.122,610,5.261,611,3.56,612,3.122,613,2.833,614,2.617,615,2.622,616,2.505,617,2.833,618,2.833,619,2.833,620,1.096,621,2.445,622,2.445,623,3.122,624,4.076,625,4.076,626,5.221,627,3.122,628,4.491,629,3.56,630,3.56,631,3.56,632,3.56,633,3.56,634,3.56]],["title/classes/CreateMessageDto.html",[0,0.253,635,2.728]],["body/classes/CreateMessageDto.html",[0,0.353,2,0.953,3,0.183,4,0.149,5,0.149,9,0.527,19,0.502,22,0.011,24,0.427,48,0.183,70,0.009,71,0.009,93,0.977,392,2.942,441,1.903,635,4.625,636,7.033,637,4.68,638,6.134,639,4.984,640,5.881,641,5.881,642,5.881]],["title/classes/CreatePostDto.html",[0,0.253,643,2.582]],["body/classes/CreatePostDto.html",[0,0.403,2,0.86,3,0.165,4,0.135,5,0.135,9,0.476,19,0.504,22,0.011,24,0.428,41,0.212,48,0.165,70,0.009,71,0.009,78,2.452,83,2.334,93,0.979,441,1.786,497,5.412,615,2.32,616,3.159,620,1.633,643,4.108,644,6.996,645,3.431,646,5.055,647,4.283,648,5.412,649,5.307,650,4.654,651,5.307,652,5.307]],["title/classes/DeleteConversationDto.html",[0,0.253,481,2.898]],["body/classes/DeleteConversationDto.html",[0,0.357,2,0.962,3,0.185,4,0.151,5,0.151,9,0.532,19,0.387,22,0.011,24,0.329,41,0.237,48,0.185,70,0.009,71,0.009,78,1.883,93,0.841,213,2.028,267,2.267,270,3.26,392,2.267,441,1.915,481,4.941,494,4.925,587,3.296,588,3.296,589,2.506,653,5.207,654,3.455,655,3.634,656,4.366,657,5.207,658,5.207,659,4.078]],["title/classes/DeleteOneAdminConversationDto.html",[0,0.253,487,2.455]],["body/classes/DeleteOneAdminConversationDto.html",[0,0.463,2,0.772,3,0.148,4,0.121,5,0.121,9,0.427,19,0.408,22,0.011,23,0.596,24,0.387,41,0.279,48,0.231,70,0.008,71,0.008,78,1.509,83,1.509,93,0.996,98,1.509,213,2.093,267,2.388,270,3.167,286,2.239,392,2.388,404,2.327,441,1.665,442,2.914,444,4.121,445,3.322,447,2.735,473,4.121,487,3.641,505,2.77,509,2.77,514,2.77,587,2.642,588,2.642,589,2.64,615,2.735,616,2.388,620,1.465,654,3.641,655,3.83,656,3.5,659,3.27,660,4.801,661,4.761,662,4.761,663,4.32,664,3.5,665,3.078]],["title/classes/DeleteOnePost.html",[0,0.253,666,2.898]],["body/classes/DeleteOnePost.html",[0,0.424,2,0.932,3,0.179,4,0.146,5,0.146,9,0.516,19,0.46,22,0.011,24,0.391,41,0.23,48,0.179,70,0.009,71,0.009,78,2.238,93,0.93,441,1.878,615,3.337,616,2.914,620,1.771,645,3.72,646,5.243,666,4.847,667,6.694,668,5.243,669,5.189,670,5.753,671,4.578]],["title/classes/ErrorAcceptableException.html",[0,0.253,672,1.912]],["body/classes/ErrorAcceptableException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,2.302,673,1.655,674,2.914,675,3.975,676,3.519,677,1.655,678,2.483,679,2.22,680,2.483,681,2.483,682,2.483,683,2.302,684,2.483,685,2.483,686,2.483,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721]],["title/classes/ErrorBadGatewayException.html",[0,0.253,712,1.912]],["body/classes/ErrorBadGatewayException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.914,679,2.22,680,2.483,681,2.483,682,2.483,683,2.302,684,2.483,685,2.483,686,2.483,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,2.302,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,728,3.519]],["title/classes/ErrorBadRequestException.html",[0,0.253,694,1.912]],["body/classes/ErrorBadRequestException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.605,680,2.483,681,2.483,682,2.483,683,2.302,684,2.483,685,2.483,686,2.483,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,2.302,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,729,3.519]],["title/classes/ErrorForbiddenException.html",[0,0.253,692,1.912]],["body/classes/ErrorForbiddenException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.852,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.22,680,2.483,681,2.483,682,2.483,683,2.302,684,2.483,685,2.483,686,2.483,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,2.302,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,730,3.519]],["title/classes/ErrorGatewayTimeoutException.html",[0,0.253,713,1.912]],["body/classes/ErrorGatewayTimeoutException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.22,680,2.914,681,2.483,682,2.483,683,2.302,684,2.483,685,2.483,686,2.483,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,2.302,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,731,3.519]],["title/classes/ErrorInternalServerException.html",[0,0.253,703,1.912]],["body/classes/ErrorInternalServerException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.22,680,2.483,681,2.914,682,2.483,683,2.302,684,2.483,685,2.483,686,2.483,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,2.302,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,732,3.519]],["title/classes/ErrorMethodNotAllowedException.html",[0,0.253,705,1.912]],["body/classes/ErrorMethodNotAllowedException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.22,680,2.483,681,2.483,682,2.914,683,2.302,684,2.483,685,2.483,686,2.483,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,2.302,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,733,3.519]],["title/classes/ErrorNotFoundException.html",[0,0.253,688,1.912]],["body/classes/ErrorNotFoundException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.22,680,2.483,681,2.483,682,2.483,683,2.701,684,2.483,685,2.483,686,2.483,687,1.538,688,2.302,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,734,3.519]],["title/classes/ErrorRequestTimeoutException.html",[0,0.253,697,1.912]],["body/classes/ErrorRequestTimeoutException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.22,680,2.483,681,2.483,682,2.483,683,2.302,684,2.914,685,2.483,686,2.483,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,2.302,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,735,3.519]],["title/classes/ErrorServiceUnavailableException.html",[0,0.253,708,1.912]],["body/classes/ErrorServiceUnavailableException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.22,680,2.483,681,2.483,682,2.483,683,2.302,684,2.483,685,2.914,686,2.483,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,2.302,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,736,3.519]],["title/classes/ErrorUnauthorizedException.html",[0,0.253,690,1.912]],["body/classes/ErrorUnauthorizedException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.852,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.22,680,2.483,681,2.483,682,2.483,683,2.302,684,2.483,685,2.483,686,2.483,687,1.538,688,1.595,689,2.483,690,2.302,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,1.595,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,737,3.519]],["title/classes/ErrorUnsupportedMediaTypeException.html",[0,0.253,700,1.912]],["body/classes/ErrorUnsupportedMediaTypeException.html",[0,0.484,2,0.57,3,0.109,4,0.089,5,0.089,16,1.116,19,0.229,21,0.606,22,0.011,23,0.441,24,0.281,25,0.536,29,3.644,33,1.595,41,0.14,43,0.519,48,0.251,58,1.538,70,0.006,71,0.006,91,1.343,93,0.958,188,1.343,213,2.292,372,2.605,672,1.595,673,1.655,674,2.483,675,3.975,677,1.655,678,2.483,679,2.22,680,2.483,681,2.483,682,2.483,683,2.302,684,2.483,685,2.483,686,2.914,687,1.538,688,1.595,689,2.483,690,1.595,691,1.721,692,1.595,693,1.721,694,1.595,695,2.483,696,1.721,697,1.595,698,1.721,699,2.389,700,2.302,701,1.721,702,1.721,703,1.595,704,1.721,705,1.595,706,1.721,707,1.721,708,1.595,709,1.721,710,1.721,711,2.483,712,1.595,713,1.595,714,1.721,715,1.721,716,1.721,717,1.721,718,1.721,719,1.721,720,1.721,721,1.721,722,1.655,723,1.721,724,1.721,725,1.595,726,1.721,727,1.721,738,3.519]],["title/injectables/ErrorsIntereptor.html",[194,0.892,739,3.357]],["body/injectables/ErrorsIntereptor.html",[0,0.321,3,0.166,4,0.136,5,0.136,7,2.177,9,0.478,10,1.553,19,0.348,21,0.919,22,0.011,23,0.669,24,0.296,25,0.813,28,4.248,34,1.196,41,0.269,42,3.106,43,0.788,48,0.166,56,2.834,70,0.009,71,0.009,109,1.38,194,1.425,195,2.038,208,4.51,210,3.106,287,2.511,739,5.36,740,4.681,741,4.626,742,4.952,743,5.011,744,5.324,745,5.338,746,5.069,747,4.626,748,5.338,749,6.736,750,3.451,751,4.681,752,5.338,753,5.338,754,5.338,755,5.338]],["title/controllers/FileController.html",[72,1.984,756,3.102]],["body/controllers/FileController.html",[0,0.178,3,0.092,4,0.075,5,0.188,9,0.266,10,1.034,19,0.392,21,1.035,22,0.011,23,0.929,24,0.357,25,0.916,29,1.254,34,1.347,41,0.281,42,1.729,43,0.438,47,2.996,48,0.092,49,1.397,70,0.006,71,0.006,72,1.397,74,1.346,76,1.649,78,2.046,83,2.298,85,3.284,86,3.602,91,1.134,94,1.921,95,4.172,97,1.921,98,0.942,104,2.364,105,3.887,106,3.887,109,1.555,160,2.108,250,1.729,258,2.971,267,1.711,271,5.329,299,2.996,302,3.079,304,3.079,305,3.079,306,3.079,307,4.432,308,3.567,317,2.364,318,2.04,319,4.129,320,1.921,321,3.93,322,2.04,323,4.553,404,2.191,405,2.898,460,1.818,525,2.04,647,3.754,756,3.295,757,2.605,758,4.733,759,3.93,760,3.93,761,4.733,762,2.605,763,6.505,764,2.971,765,6.356,766,2.605,767,2.971,768,2.971,769,2.605,770,2.971,771,2.605,772,2.971,773,2.971,774,2.605,775,2.971,776,5.272,777,3.93,778,2.971,779,5.135,780,4.482,781,2.971,782,2.605,783,3.49,784,2.971,785,4.482,786,2.971,787,3.567,788,4.482,789,2.971,790,4.482,791,4.482,792,2.605,793,2.364,794,2.364,795,3.567,796,2.898,797,2.605,798,2.605,799,2.605,800,2.971,801,2.971,802,2.971,803,2.971,804,2.971,805,2.971,806,2.971,807,2.971,808,2.971,809,2.971,810,2.971,811,2.971,812,2.971,813,2.971,814,2.971,815,5.658,816,2.971,817,2.971,818,2.971,819,2.971,820,2.971,821,2.971]],["title/modules/FilesModule.html",[111,1.61,120,2.898]],["body/modules/FilesModule.html",[0,0.345,3,0.178,4,0.146,5,0.146,22,0.011,41,0.304,43,0.847,48,0.178,70,0.009,71,0.009,74,3.192,111,2.689,113,2.698,114,3.444,120,5.706,126,3.91,127,3.183,128,2.919,130,2.919,131,4.554,756,5.605,796,5.441,797,5.029,822,5.029,823,5.029,824,5.735,825,5.735]],["title/classes/FilesService.html",[0,0.253,796,2.728]],["body/classes/FilesService.html",[0,0.261,2,0.704,3,0.135,4,0.11,5,0.17,9,0.39,10,1.358,19,0.466,21,1.233,22,0.011,23,0.897,24,0.396,25,1.09,34,1.604,41,0.174,48,0.135,70,0.007,71,0.007,109,1.934,250,2.529,258,3.191,271,5.899,647,4.353,758,5.164,759,5.164,760,5.164,761,5.164,762,5.164,763,7.131,769,5.164,774,5.164,782,5.164,783,4.318,796,3.807,798,3.811,799,3.811,826,3.811,827,4.347,828,4.347,829,4.347,830,4.347,831,6.678,832,6.678,833,6.678,834,6.678,835,6.678,836,6.678,837,4.347]],["title/classes/GetAllConversationDto.html",[0,0.253,494,2.582]],["body/classes/GetAllConversationDto.html",[0,0.451,2,0.896,3,0.172,4,0.14,5,0.14,9,0.496,19,0.36,22,0.011,24,0.381,41,0.275,48,0.214,70,0.009,71,0.009,78,1.753,93,0.917,98,1.753,213,1.559,267,2.629,270,3.399,392,2.629,441,1.833,447,3.01,494,4.59,500,3.575,587,3.069,588,3.069,589,2.906,615,3.01,616,2.629,620,1.702,654,4.007,655,4.215,656,4.065,665,3.575,838,5.48,839,5.53]],["title/classes/GetAllPostOfUserDto.html",[0,0.253,840,2.898]],["body/classes/GetAllPostOfUserDto.html",[0,0.436,2,0.978,3,0.188,4,0.153,5,0.153,9,0.541,19,0.393,22,0.011,24,0.334,41,0.241,48,0.188,70,0.009,71,0.009,78,1.913,93,0.849,270,3.532,441,1.933,615,3.175,616,2.773,620,1.857,645,3.902,669,4.437,671,4.802,840,4.99,841,6.371]],["title/classes/GetOneConversationDto.html",[0,0.253,500,2.728]],["body/classes/GetOneConversationDto.html",[0,0.449,2,0.888,3,0.17,4,0.139,5,0.139,9,0.491,19,0.357,22,0.011,24,0.379,41,0.273,48,0.213,70,0.009,71,0.009,78,1.737,93,0.915,98,1.737,213,1.931,267,2.614,270,3.385,392,2.614,441,1.822,447,2.993,494,4.789,500,4.428,587,3.042,588,3.042,589,2.89,615,2.993,616,2.614,620,1.687,654,3.985,655,4.191,656,4.029,657,4.806,658,4.806,665,3.543,838,4.361]],["title/classes/GetUserProfileByEmailNameDto.html",[0,0.253,842,2.898]],["body/classes/GetUserProfileByEmailNameDto.html",[0,0.351,2,0.947,3,0.182,4,0.148,5,0.148,9,0.524,19,0.464,22,0.011,24,0.395,41,0.284,48,0.182,70,0.009,71,0.009,93,0.935,98,1.853,213,1.648,362,4.473,398,4.473,441,1.896,663,3.401,842,4.894,843,6.741,844,5.125,845,5.844,846,5.844,847,3.778,848,5.844]],["title/classes/HttpExceptionFilter.html",[0,0.253,849,3.357]],["body/classes/HttpExceptionFilter.html",[0,0.314,2,0.848,3,0.163,4,0.133,5,0.133,7,2.712,8,6.412,9,0.469,10,1.534,11,6.412,19,0.341,21,0.901,22,0.011,23,0.655,24,0.29,25,0.797,27,5.832,28,6.123,30,6.412,31,6.747,33,2.371,34,1.172,35,3.594,39,3.87,41,0.266,43,0.772,47,2.904,48,0.163,50,2.844,51,4.588,52,4.588,53,4.588,64,4.588,67,4.588,70,0.008,71,0.008,108,5.832,178,4.164,188,2.539,287,2.461,849,5.293,850,4.588,851,5.232,852,5.232,853,5.232,854,5.232,855,5.232,856,5.232,857,5.232]],["title/interfaces/ISwaggerOptions.html",[858,2.728,859,3.102]],["body/interfaces/ISwaggerOptions.html",[3,0.131,4,0.107,5,0.107,9,0.376,22,0.011,24,0.409,25,1.244,48,0.131,70,0.007,71,0.007,76,3.192,93,0.767,113,3.59,160,3.319,180,5.043,250,2.443,441,1.53,511,3.718,858,2.714,859,4.228,860,3.682,861,7.056,862,7.056,863,7.056,864,7.959,865,6.693,866,5.243,867,6.187,868,5.751,869,5.751,870,5.751,871,5.851,872,5.751,873,5.751,874,5.751,875,5.751,876,5.043,877,7.056,878,5.751,879,5.043,880,5.751,881,5.043,882,5.751,883,4.228,884,2.57,885,5.751,886,5.751,887,5.043,888,5.043,889,5.751,890,5.043,891,5.752,892,5.752]],["title/modules/InterceptorModule.html",[111,1.61,121,2.898]],["body/modules/InterceptorModule.html",[0,0.351,3,0.182,4,0.148,5,0.148,22,0.011,41,0.32,43,0.863,48,0.182,70,0.009,71,0.009,111,2.72,113,2.749,121,4.894,130,2.975,139,4.014,175,6.248,176,6.248,893,5.844,894,7.687,895,5.239,896,5.844,897,4.894,898,5.844]],["title/injectables/LoggerContextMiddleware.html",[150,3.102,194,0.892]],["body/injectables/LoggerContextMiddleware.html",[0,0.323,3,0.167,4,0.136,5,0.136,7,2.189,9,0.481,10,1.559,19,0.35,21,0.925,22,0.011,23,0.673,24,0.374,25,0.818,34,1.203,35,5.335,39,4.52,41,0.27,43,0.792,47,2.98,48,0.167,70,0.009,71,0.009,109,1.388,150,4.97,188,2.965,194,1.43,195,2.049,743,5.022,871,3.947,899,5.928,900,4.708,901,5.38,902,6.761,903,7.767,904,5.369,905,5.38,906,6.761,907,5.369,908,5.369]],["title/classes/LoggerModule.html",[0,0.253,156,3.102]],["body/classes/LoggerModule.html",[0,0.338,2,0.913,3,0.175,4,0.143,5,0.143,9,0.505,10,1.606,14,6.017,18,4.628,19,0.367,22,0.011,34,1.262,41,0.302,43,0.831,48,0.175,50,2.081,70,0.009,71,0.009,109,1.456,111,2.149,130,2.866,156,5.559,909,4.937,910,7.9,911,5.631,912,7.562,913,5.542,914,5.631,915,5.631,916,7.562,917,4.937]],["title/injectables/LoggerService.html",[18,2.582,194,0.892]],["body/injectables/LoggerService.html",[0,0.227,3,0.118,4,0.096,5,0.096,9,0.339,10,1.234,12,3.799,18,3.275,19,0.495,21,1.273,22,0.011,23,0.926,24,0.421,25,1.182,26,4.013,29,2.258,34,1.656,35,5.075,41,0.151,43,0.559,48,0.118,56,4.033,70,0.007,71,0.007,76,4.795,93,1.012,194,1.132,195,1.445,213,1.509,441,1.424,677,3.475,918,3.32,919,5.352,920,5.352,921,5.352,922,5.352,923,5.352,924,5.352,925,3.786,926,5.352,927,6.747,928,3.786,929,5.352,930,3.786,931,5.352,932,3.786,933,5.352,934,3.786,935,5.352,936,3.786,937,3.786,938,5.352,939,3.786,940,6.208,941,5.352,942,3.786,943,3.786,944,3.786,945,3.786,946,3.786]],["title/injectables/LoggingInterceptor.html",[194,0.892,895,3.102]],["body/injectables/LoggingInterceptor.html",[0,0.319,3,0.165,4,0.135,5,0.135,7,2.164,9,0.476,10,1.548,19,0.346,21,0.914,22,0.011,23,0.665,24,0.294,25,0.808,34,1.189,41,0.294,43,0.783,48,0.165,50,1.962,70,0.009,71,0.009,109,1.372,194,1.42,195,2.026,208,4.501,210,3.088,741,4.61,742,4.934,743,5.001,744,5.312,746,5.055,747,4.61,750,3.431,751,4.654,895,4.934,947,4.654,948,5.307,949,5.307,950,3.902,951,5.307,952,5.307,953,5.307,954,5.307,955,6.712,956,5.307,957,5.307,958,5.307]],["title/classes/LoginDto.html",[0,0.253,278,2.582]],["body/classes/LoginDto.html",[0,0.399,2,0.846,3,0.162,4,0.133,5,0.133,9,0.468,19,0.433,22,0.011,24,0.426,41,0.265,48,0.162,70,0.008,71,0.008,78,2.105,83,2.437,93,0.975,98,1.654,278,4.064,296,4.721,362,4.249,441,1.767,447,3.192,460,4.705,589,3.244,614,4.881,615,3.192,616,2.534,620,1.606,959,4.575,960,4.152,961,6.117,962,5.283,963,5.217,964,4.575,965,5.283,966,5.217]],["title/classes/MessagesGateway.html",[0,0.253,967,3.102]],["body/classes/MessagesGateway.html",[0,0.183,2,0.493,3,0.095,4,0.077,5,0.077,9,0.273,10,1.053,16,0.965,19,0.476,21,1.223,22,0.011,23,0.936,24,0.404,25,1.081,34,1.534,41,0.26,48,0.095,49,1.432,50,2.25,56,3.462,58,2.992,70,0.006,71,0.006,78,2.251,93,0.96,104,2.422,109,1.686,258,2.851,282,1.616,378,3.187,441,1.215,479,2.424,492,5.305,635,4.721,638,5.189,687,1.33,866,3.762,967,3.356,968,2.669,969,4.803,970,4.003,971,4.803,972,4.003,973,5.478,974,4.003,975,3.044,976,4.426,977,4.565,978,5.478,979,2.669,980,6.549,981,7.607,982,4.565,983,3.044,984,2.669,985,4.565,986,3.044,987,2.669,988,4.565,989,3.044,990,2.669,991,4.565,992,3.044,993,3.044,994,6.086,995,4.565,996,3.044,997,2.669,998,4.702,999,4.565,1000,3.044,1001,4.565,1002,3.044,1003,4.565,1004,6.086,1005,2.669,1006,2.669,1007,2.669,1008,2.422,1009,2.669,1010,5.478,1011,3.044,1012,3.044,1013,5.478,1014,3.044,1015,3.044,1016,3.044,1017,3.044,1018,3.044,1019,3.044,1020,3.044,1021,3.044,1022,5.033,1023,3.044,1024,4.565,1025,3.044,1026,3.044]],["title/modules/MessagesModule.html",[111,1.61,122,2.898]],["body/modules/MessagesModule.html",[0,0.35,3,0.181,4,0.148,5,0.148,22,0.011,41,0.306,43,0.86,48,0.181,70,0.009,71,0.009,111,2.715,113,2.74,114,3.477,122,5.727,126,3.947,127,3.234,128,2.965,130,3.62,967,5.228,976,5.391,1006,5.108,1027,5.108,1028,5.108,1029,5.826,1030,5.826]],["title/injectables/MessagesService.html",[194,0.892,976,2.728]],["body/injectables/MessagesService.html",[0,0.166,3,0.086,4,0.07,5,0.07,9,0.248,10,0.979,19,0.448,21,1.136,22,0.011,23,0.929,24,0.38,25,1.005,34,1.478,41,0.206,43,0.408,48,0.086,50,1.023,56,2.743,70,0.005,71,0.005,85,3.497,87,3.121,88,3.378,93,0.983,109,1.706,194,0.898,195,1.056,258,1.972,282,1.469,392,2.832,441,1.13,445,3.319,463,4.111,479,1.469,492,4.993,566,2.426,567,3.798,635,4.442,638,5.25,639,4.266,883,2.034,884,1.693,969,4.53,970,3.723,971,3.723,972,3.723,974,3.723,976,2.745,979,2.426,984,3.723,987,3.723,990,3.723,997,3.723,998,4.294,1031,2.426,1032,4.246,1033,7.549,1034,2.766,1035,2.766,1036,4.246,1037,2.766,1038,2.766,1039,2.766,1040,2.766,1041,5.482,1042,4.246,1043,4.246,1044,3.378,1045,3.723,1046,4.246,1047,4.246,1048,4.246,1049,2.766,1050,5.795,1051,6.87,1052,2.766,1053,2.766,1054,2.766,1055,2.766,1056,2.766,1057,2.766,1058,2.766,1059,2.766,1060,4.246,1061,2.766,1062,4.246,1063,4.246,1064,2.766,1065,2.766,1066,2.766,1067,2.766,1068,2.766,1069,2.766,1070,2.766,1071,2.766]],["title/classes/PaginationDto.html",[0,0.253,1072,2.898]],["body/classes/PaginationDto.html",[0,0.39,2,0.818,3,0.157,4,0.128,5,0.128,9,0.452,19,0.468,22,0.011,24,0.445,41,0.259,48,0.157,70,0.008,71,0.008,78,2.279,83,2.061,85,3.308,93,0.969,98,1.6,441,1.729,447,3.318,490,4.938,589,3.394,598,4.778,604,4.031,616,2.898,620,1.553,1072,4.464,1073,4.425,1074,7.189,1075,7.189,1076,7.189,1077,5.047,1078,5.047,1079,7.592,1080,6.499,1081,5.047]],["title/injectables/ParseIntPipe.html",[194,0.892,1082,3.357]],["body/injectables/ParseIntPipe.html",[0,0.327,3,0.169,4,0.138,5,0.138,7,2.222,9,0.488,10,1.573,19,0.355,21,0.938,22,0.011,23,0.682,24,0.302,25,0.83,34,1.221,41,0.218,43,0.804,48,0.169,50,2.014,70,0.009,71,0.009,93,0.871,109,1.409,194,1.443,195,2.08,258,2.844,287,2.562,421,4.005,479,2.893,679,2.381,787,4.335,884,3.334,1082,5.43,1083,5.983,1084,4.777,1085,5.43,1086,5.983,1087,5.928,1088,6.847,1089,5.448,1090,5.983,1091,6.823,1092,5.448,1093,5.448,1094,4.777,1095,4.777]],["title/classes/Post.html",[0,0.253,299,2.342]],["body/classes/Post.html",[0,0.398,2,1.073,3,0.206,4,0.168,5,0.168,22,0.01,48,0.206,70,0.01,71,0.01,299,4.259,1096,5.803]],["title/controllers/PostsController.html",[72,1.984,1097,3.102]],["body/controllers/PostsController.html",[0,0.159,3,0.082,4,0.067,5,0.067,9,0.237,10,0.945,12,2.509,19,0.44,21,1.164,22,0.011,23,0.847,24,0.374,25,1.03,34,1.514,41,0.244,42,1.538,43,0.39,48,0.082,49,1.243,70,0.005,71,0.005,72,1.243,74,1.198,76,1.467,78,2.143,83,2.366,91,1.009,93,0.757,94,1.709,95,4.516,97,1.709,98,0.838,101,3.751,105,2.651,106,4.37,109,1.748,258,3.119,267,3.103,270,1.858,282,3.962,286,1.928,287,1.928,295,2.651,298,1.944,299,4.068,302,4.45,303,3.262,304,2.816,305,2.816,306,2.816,307,4.797,318,1.816,319,5.273,320,1.709,322,1.816,323,1.709,327,2.104,392,2.16,476,3.595,479,3.588,483,3.692,484,4.763,519,2.318,520,2.104,525,1.816,643,3.463,666,3.886,668,2.816,766,5.369,840,3.886,1097,3.014,1098,2.318,1099,6.289,1100,3.595,1101,3.595,1102,3.595,1103,3.595,1104,3.595,1105,3.595,1106,3.595,1107,2.318,1108,2.644,1109,2.644,1110,4.1,1111,2.644,1112,2.318,1113,2.644,1114,2.644,1115,2.318,1116,2.644,1117,2.644,1118,2.318,1119,2.644,1120,2.644,1121,2.318,1122,2.644,1123,2.644,1124,2.318,1125,3.658,1126,2.644,1127,4.1,1128,2.644,1129,2.318,1130,3.658,1131,2.644,1132,2.644,1133,3.247,1134,2.318,1135,2.644,1136,2.644,1137,2.644,1138,2.644,1139,2.644,1140,2.644,1141,2.644,1142,2.644,1143,2.644,1144,2.644,1145,2.644,1146,2.644,1147,2.644,1148,2.644,1149,2.644,1150,2.644,1151,2.644,1152,2.644,1153,2.644,1154,2.644,1155,2.644,1156,2.644,1157,2.644]],["title/modules/PostsModule.html",[111,1.61,123,2.898]],["body/modules/PostsModule.html",[0,0.318,3,0.165,4,0.134,5,0.134,22,0.011,41,0.318,43,0.781,48,0.165,70,0.009,71,0.009,74,3.036,111,2.557,113,2.489,114,3.275,123,5.845,124,4.52,125,4.984,126,3.719,127,2.937,128,2.694,130,3.41,131,4.331,552,4.641,553,4.641,1097,5.404,1133,5.265,1134,4.641,1158,4.641,1159,5.292,1160,4.641,1161,5.292,1162,5.292]],["title/injectables/PostsService.html",[194,0.892,1133,2.728]],["body/injectables/PostsService.html",[0,0.136,3,0.07,4,0.057,5,0.057,9,0.202,10,0.834,16,0.715,19,0.431,21,1.138,22,0.011,23,0.854,24,0.378,25,1.007,34,1.425,41,0.181,43,0.333,48,0.07,49,1.061,50,2.521,70,0.005,71,0.005,83,1.643,86,2.405,91,2.311,93,0.708,109,2.001,160,3.672,194,0.765,195,0.861,258,3.043,270,2.57,282,3.214,286,1.702,287,3.424,299,3.36,358,3.36,372,0.986,378,4.303,392,2.823,403,1.659,412,2.636,420,2.879,443,2.879,479,3.377,511,4.409,555,1.796,565,1.979,567,1.659,571,3.173,576,3.173,577,5.26,584,3.173,643,3.172,646,3.896,647,3.015,648,3.81,666,3.559,668,3.559,679,0.986,683,1.022,840,3.559,1100,3.173,1101,3.173,1102,3.173,1103,3.173,1104,3.173,1105,3.173,1106,3.173,1107,3.173,1112,3.173,1115,3.173,1118,3.173,1121,3.173,1124,3.173,1125,3.35,1129,3.173,1130,3.35,1133,2.339,1163,1.979,1164,2.256,1165,2.256,1166,2.256,1167,2.256,1168,2.256,1169,2.256,1170,2.256,1171,2.256,1172,3.618,1173,5.182,1174,5.672,1175,2.256,1176,3.618,1177,3.618,1178,2.256,1179,2.256,1180,3.173,1181,3.173,1182,4.53,1183,3.618,1184,3.618,1185,2.256,1186,2.256,1187,3.618,1188,4.53,1189,2.256,1190,2.256,1191,1.796,1192,2.256,1193,5.672,1194,3.618,1195,2.256,1196,2.256,1197,2.256,1198,2.256,1199,2.256,1200,3.618,1201,2.256,1202,2.256,1203,2.256,1204,2.256,1205,2.256,1206,2.256]],["title/modules/PrismaModule.html",[111,1.61,124,2.342]],["body/modules/PrismaModule.html",[0,0.336,3,0.174,4,0.142,5,0.142,22,0.011,41,0.301,43,0.826,48,0.174,70,0.009,71,0.009,111,2.648,113,2.632,114,3.392,124,4.647,126,3.851,127,3.106,128,2.849,130,3.532,147,6.084,148,3.618,358,4.813,879,6.084,917,6.084,1207,4.907,1208,4.907,1209,4.907,1210,5.597,1211,5.597]],["title/injectables/PrismaService.html",[194,0.892,358,2.342]],["body/injectables/PrismaService.html",[0,0.289,3,0.15,4,0.122,5,0.122,7,1.962,9,0.431,10,1.453,16,2.227,19,0.486,21,0.828,22,0.011,23,0.603,24,0.266,25,0.733,34,1.574,41,0.252,43,0.71,48,0.15,70,0.008,71,0.008,194,1.333,195,1.836,213,1.776,215,3.304,258,3.197,358,3.497,378,4.088,1212,4.218,1213,7.025,1214,6.3,1215,7.939,1216,7.939,1217,4.81,1218,6.3,1219,5.932,1220,4.81,1221,3.536,1222,4.81,1223,4.81,1224,3.828,1225,4.81,1226,4.218,1227,4.632,1228,4.81,1229,4.81,1230,4.81,1231,4.81,1232,4.81,1233,4.81]],["title/classes/ReactionsPost.html",[0,0.253,1125,2.728]],["body/classes/ReactionsPost.html",[0,0.431,2,0.813,3,0.156,4,0.127,5,0.127,9,0.45,19,0.467,22,0.011,24,0.397,41,0.286,48,0.201,70,0.008,71,0.008,78,2.273,83,1.591,93,0.978,98,1.591,213,1.415,286,2.361,441,1.723,604,3.439,615,3.428,616,2.892,620,1.545,643,3.072,645,3.245,646,3.447,647,2.92,648,3.69,663,2.92,668,5.204,669,4.761,1125,4.187,1130,3.245,1234,6.029,1235,6.288,1236,6.288,1237,5.019,1238,5.019,1239,5.019,1240,5.019,1241,4.401,1242,5.154,1243,4.401,1244,4.401]],["title/interfaces/Response.html",[39,2.455,858,2.728]],["body/interfaces/Response.html",[0,0.333,3,0.173,4,0.141,5,0.141,7,2.262,9,0.497,22,0.011,24,0.307,39,4.015,41,0.3,43,0.819,48,0.215,70,0.009,71,0.009,86,4.291,109,1.434,194,1.46,208,4.015,210,3.227,250,3.227,441,1.836,741,3.809,743,3.586,744,4.739,746,4.739,747,4.739,750,3.586,858,3.586,897,3.809,950,4.077,1245,4.413,1246,6.586,1247,4.863,1248,4.863]],["title/guards/RolesGuard.html",[1249,3.357,1250,3.357]],["body/guards/RolesGuard.html",[0,0.29,3,0.15,4,0.123,5,0.123,7,1.972,9,0.433,10,1.458,16,1.533,19,0.412,21,1.089,22,0.011,23,0.792,24,0.35,25,0.963,34,1.083,41,0.281,43,0.714,48,0.15,49,2.274,50,2.761,70,0.008,71,0.008,109,1.821,139,3.321,160,2.274,173,6.327,188,1.846,194,1.337,204,6.55,205,4.24,207,5.543,208,4.346,210,2.814,230,4.24,231,4.24,267,2.413,314,4.24,414,3.869,453,2.684,866,4.342,1250,5.03,1251,4.24,1252,4.835,1253,4.835,1254,4.835,1255,6.322,1256,4.835,1257,4.24,1258,4.24,1259,6.322,1260,4.835,1261,4.835,1262,4.835,1263,4.835]],["title/classes/RtGuard.html",[0,0.253,313,3.102]],["body/classes/RtGuard.html",[0,0.375,2,1.011,3,0.194,4,0.158,5,0.158,16,2.507,19,0.406,22,0.011,41,0.249,48,0.194,70,0.009,71,0.009,211,5.47,212,4.285,213,1.759,214,5.47,215,4.285,313,5.449,1022,4.586,1264,5.47,1265,6.239]],["title/injectables/RtStrategy.html",[194,0.892,347,2.898]],["body/injectables/RtStrategy.html",[0,0.295,3,0.153,4,0.125,5,0.125,9,0.44,10,1.473,12,3.007,16,2.025,19,0.416,21,1.1,22,0.011,23,0.8,24,0.354,25,0.973,34,1.101,41,0.311,43,0.725,47,2.727,48,0.153,50,1.816,70,0.008,71,0.008,109,1.27,148,3.176,160,2.311,188,2.868,194,1.351,195,1.875,212,3.374,213,1.385,215,3.374,235,3.391,236,4.308,237,5.525,239,4.696,243,6.59,244,3.909,245,4.308,246,4.308,247,4.308,248,3.612,249,4.387,251,4.308,252,4.308,253,4.308,254,4.308,260,5.083,347,4.387,377,4.308,905,3.909,1022,3.612,1266,4.308,1267,4.912,1268,6.387,1269,4.912,1270,4.912,1271,4.912,1272,4.912,1273,4.912]],["title/classes/SignupDto.html",[0,0.253,284,2.898]],["body/classes/SignupDto.html",[0,0.324,2,0.62,3,0.119,4,0.097,5,0.097,9,0.343,19,0.407,22,0.011,23,0.849,24,0.411,41,0.249,48,0.119,56,4.344,70,0.007,71,0.007,78,1.979,83,2.149,93,0.956,98,1.213,235,2.031,284,3.702,296,5.113,362,3.632,398,4.158,441,1.434,447,2.962,460,4.148,484,5.45,588,2.123,589,3.128,597,5.394,598,3.963,600,5.394,602,3.354,603,4.29,604,3.599,608,3.354,609,4.727,610,6.266,612,3.354,613,4.29,614,3.963,615,2.962,616,2.058,617,3.044,618,3.044,619,3.044,620,1.177,621,2.627,622,2.627,623,3.354,624,3.044,625,3.044,626,5.394,627,4.727,628,3.354,960,3.044,961,5.394,962,4.29,965,3.044,1274,3.354,1275,3.825,1276,3.825,1277,3.825,1278,3.825,1279,5.391,1280,3.825,1281,5.391,1282,5.391,1283,5.391,1284,5.391,1285,5.391,1286,3.825,1287,3.825,1288,3.825,1289,3.825,1290,3.825,1291,3.825,1292,3.825,1293,3.825]],["title/injectables/TimeoutInterceptor.html",[194,0.892,1294,3.357]],["body/injectables/TimeoutInterceptor.html",[0,0.333,3,0.173,4,0.141,5,0.141,7,2.262,9,0.497,10,1.591,19,0.361,21,0.955,22,0.011,23,0.695,24,0.307,25,0.845,34,1.243,41,0.3,43,0.819,48,0.173,70,0.009,71,0.009,109,1.434,194,1.46,195,2.117,208,4.572,210,3.227,699,2.609,741,4.739,742,5.072,743,4.856,744,5.397,746,5.158,747,4.739,750,3.586,950,4.077,1294,5.49,1295,4.863,1296,5.546,1297,5.546]],["title/injectables/TransformInterceptor.html",[194,0.892,897,2.898]],["body/injectables/TransformInterceptor.html",[0,0.321,3,0.166,4,0.136,5,0.136,7,2.177,9,0.478,10,1.553,19,0.348,21,0.919,22,0.011,23,0.669,24,0.296,25,0.813,34,1.196,39,3.106,41,0.295,43,0.788,48,0.21,70,0.009,71,0.009,86,3.576,109,1.38,194,1.425,195,2.038,208,4.51,210,3.92,741,5.069,742,3.924,743,4.772,744,5.324,746,5.069,747,4.626,750,3.451,858,3.451,897,4.626,950,3.924,1245,4.248,1246,4.681,1247,4.681,1248,4.681,1298,5.338]],["title/classes/UpdateConversationDto.html",[0,0.253,505,2.455]],["body/classes/UpdateConversationDto.html",[0,0.462,2,0.764,3,0.147,4,0.12,5,0.12,9,0.422,19,0.453,22,0.011,23,0.871,24,0.41,25,1.202,41,0.278,48,0.23,70,0.008,71,0.008,83,2.205,93,0.995,98,1.494,213,2.085,267,1.799,270,2.135,286,2.216,392,1.799,404,3.4,441,1.654,442,2.884,444,3.45,445,3.3,447,2.716,473,4.104,487,2.742,505,3.616,509,2.742,514,2.742,587,2.615,589,1.988,615,2.716,616,2.372,620,1.45,654,2.742,655,2.884,659,3.236,660,5.079,663,4.303,664,3.464,665,3.047,1299,4.712,1300,4.712,1301,4.712]],["title/classes/UpdateMembersConversationDto.html",[0,0.253,509,2.455]],["body/classes/UpdateMembersConversationDto.html",[0,0.47,2,0.809,3,0.155,4,0.127,5,0.127,9,0.447,19,0.325,22,0.011,23,0.625,24,0.357,41,0.286,48,0.235,70,0.008,71,0.008,83,1.583,93,0.992,98,1.583,213,2.132,267,1.905,270,2.262,286,2.348,392,1.905,404,2.441,441,1.717,442,3.055,444,3.582,445,4.014,447,2.821,473,4.197,487,2.905,505,2.905,509,3.755,514,2.905,587,2.771,589,2.107,615,2.821,616,2.463,620,1.536,654,2.905,655,3.055,659,3.429,660,4.433,663,4.399,664,3.67,665,3.228,1302,4.992]],["title/classes/UpdateMessageDto.html",[0,0.253,998,2.898]],["body/classes/UpdateMessageDto.html",[0,0.347,2,0.935,3,0.18,4,0.147,5,0.147,9,0.517,19,0.461,22,0.011,24,0.392,41,0.282,48,0.18,70,0.009,71,0.009,93,0.931,213,1.627,286,2.714,392,2.918,441,1.882,492,5.251,635,4.572,637,4.592,663,4.114,998,4.856,1303,6.704,1304,5.771,1305,5.771,1306,5.061,1307,4.243,1308,5.771]],["title/classes/UpdatePasswordDto.html",[0,0.253,293,2.898]],["body/classes/UpdatePasswordDto.html",[0,0.379,2,0.782,3,0.15,4,0.122,5,0.122,9,0.432,19,0.458,22,0.011,24,0.44,41,0.252,48,0.15,70,0.008,71,0.008,78,2.23,83,2.519,93,0.993,98,1.529,293,4.334,362,4.093,441,1.679,447,3.261,460,4.863,589,3.353,614,4.639,615,3.261,616,2.685,620,1.484,960,3.838,961,6.322,962,5.022,964,5.534,965,5.938,1309,4.229,1310,7.034,1311,7.034,1312,4.823,1313,4.823,1314,4.823]],["title/classes/UpdatePostDto.html",[0,0.253,1130,2.728]],["body/classes/UpdatePostDto.html",[0,0.422,2,0.78,3,0.15,4,0.122,5,0.122,9,0.431,19,0.504,22,0.011,24,0.429,25,1.209,41,0.28,48,0.196,70,0.008,71,0.008,78,1.525,83,2.227,93,0.992,98,1.525,213,1.356,286,2.262,441,1.676,604,2.554,615,3.382,616,2.845,620,1.48,643,2.944,645,3.11,646,4.825,647,4.088,648,5.165,650,4.218,663,2.799,668,5.12,669,3.536,671,3.828,1125,3.11,1130,4.073,1234,6.318,1235,4.218,1236,4.218,1241,4.218,1242,5.013,1243,4.218,1244,4.218,1315,4.81,1316,4.81,1317,4.81]],["title/classes/UpdateRolesConversationDto.html",[0,0.253,514,2.455]],["body/classes/UpdateRolesConversationDto.html",[0,0.464,2,0.776,3,0.149,4,0.122,5,0.122,9,0.429,19,0.457,22,0.011,23,0.599,24,0.412,41,0.28,48,0.231,70,0.008,71,0.008,83,1.517,93,0.997,98,1.517,213,2.097,267,1.827,270,2.168,286,2.251,392,1.827,404,2.34,441,1.671,442,4.289,444,4.129,445,3.95,447,2.744,473,4.129,487,2.784,505,2.784,509,2.784,514,3.653,587,2.656,589,2.019,615,2.744,616,2.397,620,1.473,654,2.784,655,2.929,659,3.287,660,5.109,663,4.329,664,3.518,665,3.094,1318,4.785,1319,4.785,1320,4.785]],["title/classes/UserAvatarDto.html",[0,0.253,1321,2.898]],["body/classes/UserAvatarDto.html",[0,0.422,2,0.924,3,0.177,4,0.145,5,0.145,9,0.511,19,0.371,22,0.011,24,0.389,41,0.28,48,0.177,70,0.009,71,0.009,78,1.807,85,3.572,93,0.927,98,1.807,404,3.983,441,1.867,447,3.067,588,3.164,589,3.348,616,2.679,620,1.754,1227,4.191,1321,4.82,1322,5.584,1323,4.998,1324,4.536,1325,5.7]],["title/classes/UserCoverDto.html",[0,0.253,1326,2.898]],["body/classes/UserCoverDto.html",[0,0.422,2,0.924,3,0.177,4,0.145,5,0.145,9,0.511,19,0.371,22,0.011,24,0.389,41,0.28,48,0.177,70,0.009,71,0.009,78,1.807,85,3.572,93,0.927,98,1.807,405,5.267,441,1.867,447,3.067,588,3.164,589,3.348,616,2.679,620,1.754,1227,4.191,1322,5.584,1324,4.536,1326,4.82,1327,4.998,1328,5.7]],["title/classes/UserProfileDto.html",[0,0.253,847,2.728]],["body/classes/UserProfileDto.html",[0,0.296,2,0.415,3,0.08,4,0.065,5,0.065,9,0.229,19,0.482,22,0.011,23,0.801,24,0.455,41,0.222,48,0.08,56,4.176,70,0.005,71,0.005,78,2.346,83,1.267,85,3.399,87,4.088,93,0.977,98,0.811,235,1.359,268,2.244,401,4.313,402,4.313,403,3.616,404,2.949,405,3.899,406,4.313,407,4.313,408,5.856,409,5.856,410,4.8,411,4.313,412,2.326,413,4.313,437,4.313,441,1.064,447,3.286,497,2.939,588,4.031,589,3.493,590,2.244,597,3.181,598,2.939,600,5.087,603,3.181,604,3.992,613,2.037,616,2.638,617,2.037,618,2.037,619,2.037,620,0.788,624,2.037,625,2.037,626,5.087,654,2.326,779,2.037,847,2.585,1044,3.181,1045,2.244,1227,2.939,1242,3.915,1324,3.181,1329,6.593,1330,2.244,1331,3.998,1332,3.998,1333,3.998,1334,2.559,1335,5.56,1336,2.559,1337,2.559,1338,3.505,1339,5.56,1340,2.559,1341,2.559,1342,2.559,1343,4.919,1344,2.559,1345,3.998,1346,2.559,1347,2.559,1348,3.998,1349,3.998,1350,2.559,1351,2.559,1352,2.559,1353,2.559,1354,2.559,1355,4.424,1356,2.559,1357,4.919,1358,2.559,1359,2.559,1360,3.998,1361,3.998,1362,2.559,1363,2.559,1364,2.559,1365,2.559,1366,2.559,1367,2.559,1368,3.998,1369,2.559,1370,1.882,1371,3.998,1372,2.559,1373,1.882,1374,1.882,1375,2.559,1376,2.559,1377,2.559,1378,2.244,1379,2.244,1380,2.559,1381,2.559,1382,2.244,1383,2.559,1384,2.559,1385,2.559,1386,2.559,1387,2.559,1388,2.559,1389,2.559,1390,2.559,1391,2.559,1392,2.559]],["title/controllers/UsersController.html",[72,1.984,1393,3.102]],["body/controllers/UsersController.html",[0,0.135,3,0.07,4,0.057,5,0.057,9,0.202,10,0.832,19,0.43,21,1.137,22,0.011,23,0.827,24,0.366,25,1.006,34,1.479,41,0.264,42,1.308,43,0.332,48,0.07,49,1.057,70,0.005,71,0.005,72,1.057,74,1.019,76,1.248,78,2.093,83,2.306,91,0.858,93,0.912,94,1.454,95,4.404,97,1.454,98,0.713,101,3.355,105,4.268,106,4.268,109,1.707,179,1.653,258,3.09,267,3.188,270,3.295,278,3.165,282,4.229,295,3.908,296,2.332,298,4.163,300,1.971,302,4.534,304,2.478,305,2.478,306,2.478,307,4.678,308,2.871,317,1.789,318,1.544,319,5.262,320,1.454,322,1.544,323,1.454,362,3.009,392,2.668,398,2.099,400,4.444,404,1.764,405,2.332,414,1.376,479,3.505,483,4.163,489,2.478,511,2.332,520,1.789,525,1.544,771,1.971,777,4.965,842,3.552,847,3.343,1072,3.552,1321,3.552,1326,3.552,1393,2.652,1394,1.971,1395,3.163,1396,3.163,1397,3.163,1398,3.163,1399,3.163,1400,3.962,1401,3.163,1402,3.962,1403,1.971,1404,2.248,1405,2.248,1406,1.971,1407,2.248,1408,3.608,1409,2.248,1410,1.971,1411,2.248,1412,2.248,1413,1.971,1414,2.248,1415,2.248,1416,1.971,1417,2.248,1418,2.248,1419,1.971,1420,2.248,1421,5.171,1422,2.248,1423,1.971,1424,2.248,1425,2.248,1426,1.971,1427,2.248,1428,2.248,1429,1.971,1430,2.248,1431,1.971,1432,1.789,1433,2.248,1434,2.248,1435,3.343,1436,1.971,1437,2.248,1438,2.248,1439,2.248,1440,3.608,1441,2.248,1442,2.248,1443,2.248,1444,2.248,1445,2.248,1446,2.248,1447,2.248,1448,2.248,1449,2.248,1450,3.608,1451,2.248,1452,2.248,1453,2.248,1454,2.248,1455,2.248,1456,2.248,1457,2.248,1458,2.248,1459,2.248,1460,2.248,1461,2.248,1462,2.248]],["title/modules/UsersModule.html",[111,1.61,125,2.582]],["body/modules/UsersModule.html",[0,0.318,3,0.165,4,0.134,5,0.134,22,0.011,41,0.318,43,0.781,48,0.165,70,0.009,71,0.009,74,3.036,111,2.557,113,2.489,114,3.275,118,5.265,124,4.52,125,5.208,126,3.719,127,2.937,128,2.694,130,3.41,131,4.331,349,4.641,1393,5.404,1435,5.265,1436,4.641,1463,4.641,1464,5.292,1465,4.641,1466,5.292,1467,5.292,1468,5.292]],["title/injectables/UsersService.html",[194,0.892,1435,2.728]],["body/injectables/UsersService.html",[0,0.143,3,0.074,4,0.06,5,0.06,9,0.213,10,0.871,16,0.755,19,0.452,21,1.196,22,0.011,23,0.87,24,0.384,25,1.057,34,1.51,41,0.233,43,0.351,48,0.074,49,1.12,50,2.566,70,0.005,71,0.005,85,1.212,86,2.492,93,0.922,109,1.743,160,3.68,179,1.751,194,0.799,195,0.909,258,3.116,267,2.65,270,3.479,278,3.27,282,4.187,287,2.208,295,3.035,358,3.441,362,3.109,372,1.041,373,2.088,374,1.751,376,2.088,378,4.467,391,4.116,392,2.77,397,2.088,398,3.109,399,2.088,400,4.283,420,3.736,421,3.451,422,3.312,423,4.116,425,2.088,426,2.088,443,3.736,446,4.116,479,3.579,555,1.895,577,3.736,683,1.079,842,3.67,847,3.454,1072,3.67,1181,3.312,1321,3.67,1326,3.67,1395,3.312,1396,3.312,1397,3.312,1398,3.312,1399,3.312,1400,3.312,1401,3.312,1402,3.312,1403,3.312,1406,3.312,1410,3.312,1413,3.312,1416,3.312,1419,3.312,1423,3.312,1426,3.312,1431,2.088,1435,2.442,1469,2.088,1470,2.381,1471,2.381,1472,2.381,1473,2.381,1474,2.381,1475,2.381,1476,2.381,1477,2.381,1478,2.381,1479,3.777,1480,2.381,1481,2.381,1482,4.694,1483,3.777,1484,2.381,1485,3.777,1486,3.777,1487,2.381,1488,2.381,1489,2.381,1490,2.381,1491,6.2,1492,4.694,1493,4.694,1494,2.381,1495,2.381,1496,2.381]],["title/injectables/ValidationPipe.html",[194,0.892,1497,3.357]],["body/injectables/ValidationPipe.html",[0,0.411,3,0.142,4,0.116,5,0.116,7,1.86,9,0.409,10,1.403,12,4.188,19,0.396,21,1.047,22,0.011,23,0.762,24,0.442,25,0.926,34,1.363,41,0.273,43,0.673,48,0.142,50,2.698,70,0.008,71,0.008,93,0.533,109,1.769,194,1.287,195,1.741,235,2.422,258,2.612,287,2.145,378,2.654,412,2.654,421,3.353,479,2.422,604,2.422,620,1.404,679,1.993,783,2.949,866,4.7,884,4.468,1085,4.84,1086,5.333,1087,5.809,1088,6.401,1090,5.333,1094,3.999,1095,3.999,1307,3.353,1370,3.353,1497,4.84,1498,3.999,1499,6.082,1500,6.082,1501,4.561,1502,7.3,1503,4.561,1504,4.561,1505,4.561,1506,5.333,1507,4.561,1508,4.561,1509,4.561,1510,4.561,1511,4.561]],["title/coverage.html",[1512,4.592]],["body/coverage.html",[0,0.511,1,1.643,5,0.052,6,1.811,18,1.264,22,0.011,24,0.114,26,1.335,39,1.201,70,0.004,71,0.004,72,2.734,73,1.518,75,1.811,99,1.335,101,1.146,142,1.418,150,1.518,156,1.518,187,1.518,193,3.011,194,1.622,196,1.811,203,1.811,233,1.418,234,1.811,256,1.518,257,1.811,267,0.788,278,1.264,284,1.418,287,0.971,293,1.418,299,1.146,309,1.335,311,1.643,312,1.643,313,1.518,347,1.418,354,1.811,358,1.146,374,1.518,375,1.643,412,5.13,439,1.518,440,1.811,461,1.518,462,1.811,473,1.146,481,1.418,487,1.201,490,2.313,494,1.264,500,1.335,505,1.201,509,1.201,514,1.201,521,1.335,554,1.811,586,1.811,587,3.549,621,1.418,622,1.418,635,1.335,636,1.811,637,2.68,643,1.264,644,1.811,645,3.504,653,1.811,660,3.379,666,1.418,667,1.811,672,0.936,673,3.341,688,0.936,690,0.936,692,0.936,694,0.936,697,0.936,700,0.936,703,0.936,705,0.936,708,0.936,712,0.936,713,0.936,739,1.643,740,1.811,756,1.518,757,1.811,793,1.643,794,1.643,795,1.643,796,1.335,826,1.811,838,2.68,840,1.418,841,1.811,842,1.418,843,1.811,844,1.811,847,1.335,849,1.643,850,1.811,858,2.177,859,1.518,860,1.811,871,4.862,895,1.518,897,1.418,899,1.811,900,1.811,909,1.811,913,1.643,918,1.811,947,1.811,959,1.811,967,1.518,968,1.811,976,1.335,998,1.418,1031,1.811,1072,1.418,1073,1.811,1082,1.643,1083,1.811,1084,1.811,1096,1.811,1097,1.518,1098,1.811,1125,1.335,1130,1.335,1133,1.335,1163,1.811,1212,1.811,1234,2.68,1245,2.68,1249,1.643,1250,1.643,1251,1.811,1264,1.811,1266,1.811,1274,1.811,1294,1.643,1295,1.811,1303,1.811,1309,1.811,1321,1.418,1322,2.68,1323,1.811,1326,1.418,1327,1.811,1329,1.811,1330,1.811,1373,1.518,1374,1.518,1393,1.518,1394,1.811,1432,1.643,1435,1.335,1469,1.811,1497,1.643,1498,1.811,1512,1.643,1513,1.643,1514,2.065,1515,2.065,1516,8.193,1517,7.432,1518,2.953,1519,7.432,1520,1.811,1521,8.028,1522,1.811,1523,2.065,1524,2.065,1525,1.811,1526,1.811,1527,5.42,1528,3.74,1529,1.811,1530,2.68,1531,1.811,1532,3.74,1533,1.811,1534,1.811,1535,4.265,1536,1.811,1537,1.811,1538,2.68,1539,2.68,1540,2.68,1541,2.68,1542,4.265,1543,5.42,1544,2.953,1545,1.811,1546,1.811,1547,1.811,1548,6.131,1549,4.265,1550,1.811,1551,3.394,1552,1.643,1553,1.811,1554,2.065,1555,1.811,1556,1.811,1557,2.065,1558,2.065]],["title/dependencies.html",[114,2.482,1559,3.084]],["body/dependencies.html",[0,0.382,22,0.011,43,0.721,47,2.712,70,0.008,71,0.008,98,1.549,114,2.389,139,3.356,148,3.159,212,3.356,239,3.592,248,4.679,249,4.372,353,3.888,567,3.592,620,1.504,750,3.159,792,5.581,1005,4.285,1007,5.581,1008,3.888,1087,3.888,1224,3.888,1306,4.285,1307,3.592,1370,3.592,1560,4.887,1561,6.365,1562,4.887,1563,4.887,1564,7.777,1565,4.887,1566,6.365,1567,4.887,1568,6.365,1569,4.887,1570,4.887,1571,4.285,1572,4.887,1573,4.887,1574,4.887,1575,4.285,1576,4.887,1577,4.285,1578,4.285,1579,4.887,1580,4.887,1581,4.285,1582,4.887,1583,4.285,1584,4.887,1585,4.887,1586,4.887,1587,3.888,1588,4.887,1589,4.887,1590,4.887,1591,4.887,1592,4.887,1593,4.887,1594,6.365,1595,4.887,1596,4.285,1597,4.887,1598,4.887]],["title/miscellaneous/enumerations.html",[1599,2.046,1600,4.452]],["body/miscellaneous/enumerations.html",[9,0.583,22,0.011,70,0.01,71,0.01,267,2.899,414,4.648,489,5.215,884,4.648,1599,3.783,1600,5.701,1601,6.502,1602,6.502]],["title/classes/fullNameValidator.html",[0,0.253,1373,3.102]],["body/classes/fullNameValidator.html",[0,0.395,2,0.834,3,0.16,4,0.131,5,0.131,7,2.683,9,0.461,10,1.517,19,0.429,21,1.133,22,0.011,23,0.958,24,0.364,25,1.002,34,1.474,41,0.205,48,0.16,50,1.902,70,0.008,71,0.008,93,0.894,109,1.701,193,3.149,235,3.494,258,1.964,453,2.856,620,1.583,639,3.326,1355,4.094,1373,4.838,1538,4.094,1603,5.334,1604,4.838,1605,4.838,1606,6.042,1607,5.145,1608,5.81,1609,4.838,1610,5.145,1611,4.838,1612,4.094,1613,3.782,1614,3.782,1615,3.782]],["title/miscellaneous/functions.html",[1599,2.046,1616,4.452]],["body/miscellaneous/functions.html",[9,0.407,18,3.71,21,1.373,22,0.011,23,0.999,24,0.442,25,1.215,26,4.413,34,1.53,70,0.008,71,0.008,76,4.044,93,0.995,178,6.041,187,4.457,460,3.71,604,3.219,783,2.934,793,4.824,794,4.824,795,4.824,815,5.316,866,4.164,883,3.337,884,2.778,913,5.432,1219,5.432,1221,3.337,1530,3.612,1532,3.98,1533,5.316,1534,5.316,1536,3.98,1550,3.98,1551,6.215,1552,3.612,1553,3.98,1555,3.98,1556,5.986,1599,2.641,1616,3.98,1617,4.539,1618,4.539,1619,6.826,1620,3.98,1621,4.539,1622,3.98,1623,4.539,1624,4.539,1625,4.539,1626,4.539,1627,4.539,1628,4.539,1629,4.539,1630,4.539,1631,4.539,1632,3.98,1633,4.539]],["title/index.html",[9,0.315,1634,3.084,1635,3.084]],["body/index.html",[0,0.253,4,0.051,5,0.124,10,0.467,14,2.639,22,0.011,23,0.254,26,1.31,34,0.454,39,1.179,47,1.125,56,2.235,58,0.886,70,0.004,71,0.004,74,0.918,80,3.685,83,1.051,84,3.691,85,1.031,86,1.761,101,1.125,114,0.991,128,1.031,130,1.031,162,1.777,169,2.438,179,3.095,185,1.613,187,3.095,188,0.773,223,2.639,224,1.613,248,1.49,249,2.278,267,2.786,286,2.71,287,2.861,295,3.469,296,2.144,299,3.523,323,1.31,362,1.93,389,1.613,392,2.507,398,1.179,400,3.095,404,1.621,405,1.31,414,1.24,415,1.777,444,1.841,445,1.076,463,2.639,475,5.378,483,4.236,484,1.49,489,2.278,490,3.341,502,2.908,511,2.144,516,2.908,525,1.392,578,1.777,589,1.399,620,0.624,647,2.45,687,0.886,722,2.861,765,5.052,776,1.777,783,1.31,867,1.777,881,2.908,887,1.777,888,4.705,890,1.777,901,1.613,980,1.777,1008,2.639,1022,1.49,1041,3.691,1085,1.613,1099,2.908,1180,1.777,1191,1.613,1221,1.49,1224,1.613,1226,4.705,1307,1.49,1355,1.613,1370,1.49,1378,3.691,1379,1.777,1429,1.777,1506,3.691,1512,1.613,1513,1.613,1571,1.777,1575,1.777,1577,3.691,1578,2.908,1581,1.777,1583,1.777,1587,5.809,1596,1.777,1636,2.026,1637,1.777,1638,2.908,1639,2.026,1640,3.316,1641,3.316,1642,4.865,1643,2.026,1644,1.777,1645,1.777,1646,2.026,1647,2.026,1648,2.026,1649,2.026,1650,2.026,1651,2.026,1652,2.026,1653,2.026,1654,3.316,1655,2.026,1656,2.026,1657,2.026,1658,2.026,1659,3.316,1660,2.026,1661,3.316,1662,2.026,1663,2.026,1664,2.026,1665,2.026,1666,3.316,1667,2.026,1668,2.026,1669,2.026,1670,2.026,1671,2.026,1672,4.21,1673,2.026,1674,2.026,1675,2.026,1676,3.316,1677,3.316,1678,2.026,1679,2.026,1680,2.026,1681,2.026,1682,2.026,1683,1.777,1684,2.026,1685,1.777,1686,2.026,1687,2.026,1688,2.026,1689,4.21,1690,2.026,1691,2.026,1692,3.316,1693,1.777,1694,2.026,1695,2.026,1696,2.026,1697,2.026,1698,1.777,1699,2.026,1700,2.026,1701,2.026,1702,2.026,1703,2.026,1704,2.026,1705,2.026,1706,3.316,1707,2.026,1708,2.026,1709,2.026,1710,2.026,1711,2.026,1712,2.026,1713,2.026,1714,2.026,1715,2.026,1716,2.026,1717,2.026,1718,2.026,1719,2.026,1720,3.316,1721,2.026,1722,3.316,1723,2.026,1724,2.026,1725,1.777,1726,2.026,1727,3.691,1728,2.026,1729,2.026,1730,2.026,1731,2.026,1732,2.026,1733,2.026,1734,3.316,1735,2.026,1736,2.026,1737,2.026,1738,2.026,1739,2.026,1740,2.026,1741,2.026,1742,2.026,1743,2.026,1744,2.026,1745,2.026,1746,1.777,1747,2.026,1748,2.026,1749,2.026,1750,3.316,1751,2.026,1752,2.026,1753,2.026,1754,2.026,1755,4.266,1756,3.316,1757,2.026,1758,2.026,1759,2.026,1760,2.026,1761,2.026,1762,2.026,1763,2.026,1764,2.026,1765,2.026,1766,2.026,1767,2.026,1768,2.026,1769,5.366,1770,2.026,1771,2.026,1772,2.026,1773,2.026,1774,2.026,1775,3.316,1776,2.026,1777,1.777,1778,1.777,1779,2.026,1780,2.026,1781,2.026,1782,2.026,1783,2.026,1784,1.777,1785,2.026,1786,2.026,1787,1.777,1788,2.026,1789,2.026,1790,2.026,1791,2.026,1792,6.347,1793,3.316,1794,2.026,1795,3.316,1796,4.865,1797,2.026,1798,2.026,1799,4.21,1800,2.026,1801,3.316,1802,3.316,1803,2.026,1804,2.026,1805,3.316,1806,1.777,1807,2.026,1808,2.026,1809,2.026,1810,2.026,1811,2.026,1812,5.762,1813,2.026,1814,3.316,1815,2.026,1816,2.026,1817,2.026,1818,2.026,1819,3.316,1820,3.316,1821,2.026,1822,2.026,1823,2.026,1824,2.639,1825,2.026,1826,2.026,1827,2.026,1828,3.316,1829,2.026,1830,2.026,1831,2.026,1832,2.026,1833,2.026,1834,1.777,1835,2.026,1836,2.026,1837,1.613,1838,1.613,1839,1.49,1840,1.49,1841,2.026,1842,4.21,1843,2.026,1844,2.026,1845,2.026,1846,2.026,1847,2.026,1848,2.026,1849,2.026,1850,2.026,1851,2.026,1852,2.026,1853,2.026,1854,2.026,1855,2.026,1856,3.316,1857,3.316,1858,2.026,1859,2.026,1860,2.026,1861,2.026,1862,2.026,1863,2.026,1864,2.026,1865,2.026,1866,2.026,1867,2.026,1868,2.026,1869,3.316,1870,3.316,1871,2.026,1872,2.026,1873,2.026,1874,3.316,1875,2.026,1876,2.026,1877,3.316,1878,2.026,1879,2.026,1880,2.026,1881,2.026,1882,2.026,1883,2.026,1884,2.026,1885,3.316,1886,3.316,1887,3.316,1888,3.316,1889,2.026,1890,2.026,1891,2.026,1892,2.026,1893,2.026,1894,2.438,1895,2.026,1896,2.026,1897,1.777,1898,1.777]],["title/license.html",[1634,3.084,1635,3.084,1894,2.586]],["body/license.html",[22,0.008,47,2.816,70,0.008,71,0.008,128,2.583,320,3.281,647,2.953,876,4.449,901,5.19,1382,4.449,1513,4.038,1644,4.449,1824,4.038,1837,4.038,1838,4.038,1839,3.73,1840,3.73,1894,3.73,1897,6.32,1898,4.449,1899,6.522,1900,5.074,1901,5.074,1902,5.074,1903,5.074,1904,5.074,1905,5.074,1906,6.522,1907,8.383,1908,5.074,1909,5.074,1910,7.208,1911,5.074,1912,6.522,1913,5.074,1914,5.074,1915,5.074,1916,5.074,1917,5.074,1918,5.074,1919,5.074,1920,5.074,1921,5.074,1922,6.522,1923,5.074,1924,5.074,1925,5.074,1926,5.074,1927,5.074,1928,5.074,1929,5.074,1930,6.522,1931,6.522,1932,5.074,1933,5.074,1934,5.074,1935,5.074,1936,5.074,1937,5.074,1938,5.074,1939,5.074,1940,5.074,1941,5.074,1942,5.074,1943,5.074,1944,5.074,1945,5.074,1946,5.074,1947,5.074,1948,5.074,1949,5.074,1950,5.074,1951,5.074,1952,5.074,1953,5.074,1954,5.074,1955,5.074,1956,5.074,1957,5.074]],["title/modules.html",[113,2.714]],["body/modules.html",[22,0.009,70,0.009,71,0.009,112,4.324,113,2.766,118,3.803,119,4.039,120,4.039,121,4.039,122,4.039,123,4.039,124,3.264,125,3.6,1727,7.486,1746,5.157,1958,8.538,1959,8.538,1960,8.599,1961,5.881]],["title/overview.html",[1962,5.06]],["body/overview.html",[2,0.665,22,0.011,70,0.007,71,0.007,74,1.86,85,2.09,99,4.192,112,6.323,113,1.931,114,2.769,115,3.6,116,3.6,117,3.6,118,5.355,119,5.518,120,5.036,121,4.453,122,5.036,123,5.518,124,4.514,125,5.027,126,3.143,127,2.279,128,2.09,195,1.567,233,4.453,250,2.389,309,4.192,344,3.6,345,3.6,347,4.453,358,4.312,521,4.192,547,3.6,549,3.6,796,4.192,822,3.6,823,3.6,976,4.192,1027,3.6,1028,3.6,1044,3.267,1133,4.192,1158,3.6,1160,3.6,1207,3.6,1208,3.6,1209,3.6,1249,3.267,1338,3.6,1435,4.192,1463,3.6,1465,3.6,1962,3.6,1963,4.105,1964,4.105,1965,4.105]],["title/classes/passwordValidator.html",[0,0.253,621,2.898]],["body/classes/passwordValidator.html",[0,0.395,2,0.834,3,0.16,4,0.131,5,0.131,7,2.683,9,0.461,10,1.517,19,0.429,21,1.133,22,0.011,23,0.909,24,0.364,25,1.002,34,1.474,41,0.205,48,0.16,50,1.902,70,0.008,71,0.008,93,0.894,109,1.701,193,3.149,235,3.494,258,1.964,398,2.994,453,2.856,620,1.583,621,4.519,639,3.326,1539,4.094,1603,5.334,1604,4.838,1605,4.838,1606,6.042,1608,5.622,1609,4.838,1611,4.838,1613,3.782,1614,3.782,1615,3.782,1966,5.145,1967,5.145,1968,4.511,1969,4.511,1970,4.511,1971,4.511]],["title/classes/phoneNumberValidator.html",[0,0.253,1374,3.102]],["body/classes/phoneNumberValidator.html",[0,0.395,2,0.834,3,0.16,4,0.131,5,0.131,7,2.683,9,0.461,10,1.517,19,0.429,21,1.133,22,0.011,23,0.909,24,0.364,25,1.002,34,1.474,41,0.205,48,0.16,50,1.902,70,0.008,71,0.008,93,0.894,109,1.701,193,3.149,235,3.494,258,1.964,410,4.094,412,2.994,453,2.856,604,2.732,620,1.583,639,3.326,1374,4.838,1540,4.094,1603,5.334,1604,4.838,1605,4.838,1606,6.042,1608,5.622,1609,4.838,1611,4.838,1613,3.782,1614,3.782,1615,3.782,1972,5.145,1973,5.145,1974,4.511,1975,4.511]],["title/properties.html",[441,1.351,1559,3.084]],["body/properties.html",[22,0.011,47,3.35,70,0.009,71,0.009,80,4.99,83,1.913,107,5.292,169,5.731,441,1.606,725,2.735,1191,4.802,1587,4.802,1637,5.292,1638,5.292,1683,5.292,1685,5.292,1787,5.292,1806,5.292,1824,4.802,1837,4.802,1838,4.802,1839,4.437,1840,4.437,1894,4.437,1976,6.035,1977,6.035,1978,6.035,1979,7.266,1980,6.035]],["title/miscellaneous/typealiases.html",[1599,2.046,1981,5.077]],["body/miscellaneous/typealiases.html",[9,0.593,22,0.01,24,0.367,70,0.01,71,0.01,1551,6.106,1552,5.267,1599,3.851,1622,5.803,1632,6.728,1982,6.618]],["title/classes/usenameValidator.html",[0,0.253,622,2.898]],["body/classes/usenameValidator.html",[0,0.397,2,0.841,3,0.161,4,0.132,5,0.132,7,2.698,9,0.465,10,1.525,19,0.431,21,1.139,22,0.011,23,0.912,24,0.366,25,1.008,34,1.482,41,0.207,48,0.161,50,1.918,70,0.008,71,0.008,93,0.897,109,1.711,193,3.175,235,3.512,258,1.98,398,3.019,453,2.88,620,1.597,622,4.544,639,3.354,1541,4.129,1603,5.355,1604,4.864,1605,4.864,1606,6.053,1608,5.639,1609,4.864,1611,4.864,1612,4.129,1613,3.814,1614,3.814,1615,3.814,1983,5.188,1984,5.188]],["title/miscellaneous/variables.html",[1599,2.046,1985,4.452]],["body/miscellaneous/variables.html",[4,0.08,9,0.284,22,0.011,23,0.397,24,0.344,50,2.569,70,0.006,71,0.006,80,3.231,83,1.492,85,1.613,86,3.522,93,0.841,101,2.611,109,1.451,160,2.639,169,4.125,188,1.796,193,4.523,208,2.738,210,2.738,223,2.522,224,2.522,237,2.33,239,2.33,249,2.177,267,1.796,287,2.213,311,3.744,312,3.744,374,3.459,375,3.744,389,3.744,412,1.844,414,1.94,453,1.759,490,4.264,604,2.498,687,1.385,725,1.436,779,3.744,783,2.049,787,2.522,859,2.33,865,2.779,871,2.33,883,6.004,884,4.964,891,2.779,892,4.125,905,2.522,1009,4.125,1219,2.522,1221,3.459,1257,4.125,1258,2.779,1432,3.744,1518,2.779,1520,4.125,1522,4.125,1525,2.779,1526,4.125,1528,2.779,1529,4.92,1530,2.522,1531,4.125,1537,2.779,1538,2.522,1539,2.522,1540,2.522,1541,2.522,1544,4.125,1545,4.125,1546,4.125,1547,2.779,1599,1.844,1612,3.744,1620,2.779,1645,2.779,1693,4.125,1698,4.125,1725,4.125,1755,2.779,1777,2.779,1778,2.779,1784,4.125,1834,2.779,1839,2.33,1840,2.33,1968,2.779,1969,2.779,1970,2.779,1971,2.779,1974,2.779,1975,2.779,1985,2.779,1986,5.611,1987,4.705,1988,4.705,1989,3.169,1990,3.169,1991,3.169,1992,3.169,1993,3.169,1994,3.169,1995,3.169,1996,3.169,1997,3.169,1998,3.169,1999,6.209,2000,3.169,2001,3.169,2002,3.169,2003,4.705,2004,3.169,2005,3.169,2006,3.169,2007,4.705,2008,3.169,2009,3.169,2010,3.169,2011,3.169,2012,3.169,2013,3.169,2014,3.169,2015,3.169,2016,3.169,2017,3.169,2018,3.169,2019,3.169,2020,3.169,2021,3.169,2022,3.169,2023,3.169,2024,3.169,2025,3.169,2026,3.169,2027,3.169,2028,3.169,2029,3.169,2030,3.169,2031,3.169,2032,3.169,2033,3.169,2034,3.169,2035,3.169]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":1589,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1574,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1573,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":1585,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1521,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1549,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1554,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1517,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1548,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1527,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1542,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1535,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1543,"title":{},"body":{"coverage.html":{}}}],["02t05:01:03.938z",{"_index":1386,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["02t05:01:03.938z'})@type(undefined)@isdate",{"_index":1350,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["07",{"_index":1349,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["09999999999",{"_index":1384,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["09999999999'})@isstring()@validate(phonenumbervalidator",{"_index":1367,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["1",{"_index":85,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileController.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"injectables/UsersService.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.18.0",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1579,"title":{},"body":{"dependencies.html":{}}}],["1.5.0",{"_index":1977,"title":{},"body":{"properties.html":{}}}],["1.7.4",{"_index":1576,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":787,"title":{},"body":{"controllers/FileController.html":{},"injectables/ParseIntPipe.html":{},"miscellaneous/variables.html":{}}}],["100",{"_index":1335,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["120",{"_index":601,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["120)@minlength(2",{"_index":596,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["123",{"_index":654,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserProfileDto.html":{}}}],["150",{"_index":1345,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["17.0.3",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1338,"title":{},"body":{"classes/UserProfileDto.html":{},"overview.html":{}}}],["19",{"_index":1387,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["19})@isnumber()@min(17",{"_index":1337,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["1})@isnumber()@min(0)@max(2",{"_index":1362,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["2",{"_index":1044,"title":{},"body":{"injectables/MessagesService.html":{},"classes/UserProfileDto.html":{},"overview.html":{}}}],["2.2.0",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":1580,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":610,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["20)@minlength(2",{"_index":608,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["200",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["2021",{"_index":1348,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["2022",{"_index":1898,"title":{},"body":{"index.html":{},"license.html":{}}}],["21",{"_index":1290,"title":{},"body":{"classes/SignupDto.html":{}}}],["21)@minlength(7",{"_index":1278,"title":{},"body":{"classes/SignupDto.html":{}}}],["3",{"_index":598,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["3.0.2",{"_index":1591,"title":{},"body":{"dependencies.html":{}}}],["3.0.6",{"_index":1570,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1586,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1568,"title":{},"body":{"dependencies.html":{}}}],["4.5.1",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":90,"title":{},"body":{"controllers/AppController.html":{}}}],["45",{"_index":1357,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["45)@minlength(2",{"_index":1354,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["456",{"_index":655,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["47",{"_index":1965,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":1572,"title":{},"body":{"dependencies.html":{}}}],["5/6",{"_index":1524,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":1964,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":1582,"title":{},"body":{"dependencies.html":{}}}],["6.0.4",{"_index":1567,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["789",{"_index":665,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["789'})@isstring()@isnotempty",{"_index":656,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["8",{"_index":1279,"title":{},"body":{"classes/SignupDto.html":{}}}],["8.0.1",{"_index":1584,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["83",{"_index":1523,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1963,"title":{},"body":{"overview.html":{}}}],["9.0.0",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["9.0.9",{"_index":1566,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{9,15",{"_index":1975,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["9]|^0)?[0",{"_index":1974,"title":{},"body":{"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["__dirname}/../public",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["ab*cd",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["abc",{"_index":1343,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["abc'})@isstring()@length(3",{"_index":1353,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["above",{"_index":1929,"title":{},"body":{"license.html":{}}}],["acceptable",{"_index":696,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["access",{"_index":223,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["accesstoken",{"_index":388,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{},"classes/UserProfileDto.html":{}}}],["account'})@httpcode(httpstatus.created)@apiokresponse({description",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{}}}],["account'})@isstring()@maxlength(151",{"_index":1344,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["action",{"_index":1951,"title":{},"body":{"license.html":{}}}],["addbearerauth",{"_index":2020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additional",{"_index":872,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["address",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["addsecurity('api_key",{"_index":2026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('base_url",{"_index":2017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addserver(config.get('host_url",{"_index":2016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addtag('cats",{"_index":2019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["admin",{"_index":489,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["admin)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":1408,"title":{},"body":{"controllers/UsersController.html":{}}}],["admin01",{"_index":632,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admin02",{"_index":633,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["admins",{"_index":442,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["age",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["aliases",{"_index":1982,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["all)'})@apiokresponse({description",{"_index":766,"title":{},"body":{"controllers/FileController.html":{},"controllers/PostsController.html":{}}}],["all)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":771,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["allexceptionsfilter",{"_index":1,"title":{"classes/AllExceptionsFilter.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["allexceptionsfilter.handleresponse(response",{"_index":55,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["allowed",{"_index":707,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["already",{"_index":1203,"title":{},"body":{"injectables/PostsService.html":{}}}],["amazing",{"_index":1829,"title":{},"body":{"index.html":{}}}],["analyzes",{"_index":1761,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1920,"title":{},"body":{"license.html":{}}}],["api",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["api#readme",{"_index":1980,"title":{},"body":{"properties.html":{}}}],["api_key",{"_index":2028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apia",{"_index":1636,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["apiforbiddenresponse",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":2027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apinotacceptableresponse",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":95,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":447,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["apiproperty({example",{"_index":1347,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["apiproperty({required",{"_index":452,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["apiproperty({type",{"_index":588,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["apipropertyoptional",{"_index":612,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["apiresponse",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"controllers/ConversationsController.html":{}}}],["apiresponse({status",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["apis",{"_index":1699,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('conversations",{"_index":524,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["apitags('files",{"_index":800,"title":{},"body":{"controllers/FileController.html":{}}}],["apitags('home",{"_index":103,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('posts",{"_index":1136,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":1437,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":1221,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app.close",{"_index":1233,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["app.get(configservice",{"_index":2006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.service",{"_index":100,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app.useglobalguards(new",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":894,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["appcontroller",{"_index":73,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1638,"title":{},"body":{"index.html":{},"properties.html":{}}}],["applications",{"_index":1682,"title":{},"body":{"index.html":{}}}],["apply",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":112,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps",{"_index":1729,"title":{},"body":{"index.html":{}}}],["appservice",{"_index":99,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["architecture",{"_index":1888,"title":{},"body":{"index.html":{}}}],["args",{"_index":1608,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["argumentmetadata",{"_index":1088,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["argumentshost",{"_index":31,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":1955,"title":{},"body":{"license.html":{}}}],["array",{"_index":783,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["array(whitelist).indexof(req.header('origin",{"_index":2000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arrayfielddecorator",{"_index":793,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["arrayfielddecorator('files",{"_index":811,"title":{},"body":{"controllers/FileController.html":{}}}],["arrayfielddecorator(fieldname",{"_index":1624,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asc",{"_index":1079,"title":{},"body":{"classes/PaginationDto.html":{}}}],["associated",{"_index":1908,"title":{},"body":{"license.html":{}}}],["async",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["atguard",{"_index":142,"title":{"injectables/AtGuard.html":{}},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["atguard(new",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["atstrategy",{"_index":233,"title":{"injectables/AtStrategy.html":{}},"body":{"injectables/AtStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["auth",{"_index":185,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"index.html":{}}}],["auth.controller",{"_index":350,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/decorators",{"_index":1135,"title":{},"body":{"controllers/PostsController.html":{}}}],["authcontroller",{"_index":256,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":1717,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":211,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authguard('jwt",{"_index":214,"title":{},"body":{"injectables/AtGuard.html":{},"classes/RtGuard.html":{}}}],["authmodule",{"_index":118,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1191,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":646,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["authors",{"_index":1944,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":309,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":1687,"title":{},"body":{"index.html":{}}}],["available",{"_index":1961,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":404,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["avatar.dto.ts",{"_index":1323,"title":{},"body":{"classes/UserAvatarDto.html":{},"coverage.html":{}}}],["avatar.dto.ts:10",{"_index":1325,"title":{},"body":{"classes/UserAvatarDto.html":{}}}],["await",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["awesome",{"_index":1785,"title":{},"body":{"index.html":{}}}],["b",{"_index":1332,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["backend",{"_index":1658,"title":{},"body":{"index.html":{}}}],["backers",{"_index":1830,"title":{},"body":{"index.html":{}}}],["badgatewayexception",{"_index":678,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["badrequestexception",{"_index":679,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('validation",{"_index":1094,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["badrequestexception('you",{"_index":1202,"title":{},"body":{"injectables/PostsService.html":{}}}],["base",{"_index":1783,"title":{},"body":{"index.html":{}}}],["based",{"_index":890,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["bcrypt",{"_index":1571,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(data",{"_index":1996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bcrypt.hash(data",{"_index":1997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearer",{"_index":2022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bearerformat",{"_index":2023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["become",{"_index":1876,"title":{},"body":{"index.html":{}}}],["bee",{"_index":1846,"title":{},"body":{"index.html":{}}}],["begin",{"_index":603,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["begining",{"_index":1863,"title":{},"body":{"index.html":{}}}],["beginner",{"_index":1878,"title":{},"body":{"index.html":{}}}],["better",{"_index":1890,"title":{},"body":{"index.html":{}}}],["bio",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["birthdate",{"_index":402,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["bodies",{"_index":1733,"title":{},"body":{"index.html":{}}}],["body",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boilerplate",{"_index":723,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["boolean",{"_index":866,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"classes/MessagesGateway.html":{},"guards/RolesGuard.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":1556,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":1960,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1958,"title":{},"body":{"modules.html":{}}}],["build",{"_index":1777,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["builded",{"_index":2011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builder",{"_index":1686,"title":{},"body":{"index.html":{}}}],["building",{"_index":1678,"title":{},"body":{"index.html":{}}}],["built",{"_index":1765,"title":{},"body":{"index.html":{}}}],["bwrzn7qrlxw",{"_index":727,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["bằng",{"_index":222,"title":{},"body":{"injectables/AtGuard.html":{}}}],["c",{"_index":1382,"title":{},"body":{"classes/UserProfileDto.html":{},"license.html":{}}}],["c'})@isstring()@maxlength(101",{"_index":1334,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["call",{"_index":1747,"title":{},"body":{"index.html":{}}}],["callback",{"_index":1998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback(null",{"_index":2001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callhandler",{"_index":744,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["canactivate",{"_index":204,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":207,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["card",{"_index":1886,"title":{},"body":{"index.html":{}}}],["catch",{"_index":11,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(exception",{"_index":27,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":852,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catcherror",{"_index":748,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["catcherror((err",{"_index":753,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["categories",{"_index":1178,"title":{},"body":{"injectables/PostsService.html":{}}}],["category",{"_index":1180,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["change",{"_index":516,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["character",{"_index":1285,"title":{},"body":{"classes/SignupDto.html":{}}}],["characters",{"_index":626,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["characters!'})@maxlength(121",{"_index":599,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["characters!'})@maxlength(21",{"_index":609,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["characters!'})@maxlength(46",{"_index":1356,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["characters!'})@validate(fullnamevalidator",{"_index":1358,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["characters!'})@validate(passwordvalidator",{"_index":1280,"title":{},"body":{"classes/SignupDto.html":{}}}],["characters!'})@validate(usenamevalidator",{"_index":602,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["charge",{"_index":1903,"title":{},"body":{"license.html":{}}}],["chat",{"_index":1789,"title":{},"body":{"index.html":{}}}],["chats",{"_index":1671,"title":{},"body":{"index.html":{}}}],["checkexist",{"_index":1198,"title":{},"body":{"injectables/PostsService.html":{}}}],["checkexist.length",{"_index":1201,"title":{},"body":{"injectables/PostsService.html":{}}}],["cho",{"_index":218,"title":{},"body":{"injectables/AtGuard.html":{}}}],["city",{"_index":1331,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["claim",{"_index":1947,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/AllExceptionsFilter.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/Post.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"classes/Post.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"classes/fullNameValidator.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["clean",{"_index":1773,"title":{},"body":{"index.html":{}}}],["client",{"_index":980,"title":{},"body":{"classes/MessagesGateway.html":{},"index.html":{}}}],["client.broadcast.emit('typing",{"_index":1020,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["client.id",{"_index":1013,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["clientid",{"_index":1033,"title":{},"body":{"injectables/MessagesService.html":{}}}],["cluster_appmodule",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":344,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":346,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":345,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule",{"_index":547,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_conversationsmodule_imports",{"_index":548,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["cluster_conversationsmodule_providers",{"_index":549,"title":{},"body":{"modules/ConversationsModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":822,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_imports",{"_index":823,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule",{"_index":1027,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_messagesmodule_providers",{"_index":1028,"title":{},"body":{"modules/MessagesModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1158,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1159,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1160,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":1207,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":1209,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":1208,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1463,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1464,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1465,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["commitlint",{"_index":1771,"title":{},"body":{"index.html":{}}}],["commitlint/cli",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["commitlint/config",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["community",{"_index":1891,"title":{},"body":{"index.html":{}}}],["comparepassword",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["comparepassword(dto.password",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["compatible",{"_index":1716,"title":{},"body":{"index.html":{}}}],["compodoc",{"_index":1754,"title":{},"body":{"index.html":{}}}],["compose",{"_index":1807,"title":{},"body":{"index.html":{}}}],["compress",{"_index":1732,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1575,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["computer",{"_index":1887,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1928,"title":{},"body":{"license.html":{}}}],["config",{"_index":239,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["config.get('access_token_secret",{"_index":255,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["config.get('refresh_token_secret",{"_index":1270,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["configmodule",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"modules/PrismaModule.html":{}}}],["configmodule.forroot",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":237,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":715,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["connect",{"_index":1641,"title":{},"body":{"index.html":{}}}],["connectedsocket",{"_index":1004,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["connection",{"_index":1956,"title":{},"body":{"license.html":{}}}],["console.log('before",{"_index":951,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log('connecting",{"_index":952,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`after",{"_index":957,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["console.log(`request",{"_index":907,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["console.log(`response",{"_index":908,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["const",{"_index":50,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AtGuard.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":16,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/MessagesGateway.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(@logger('appservice",{"_index":201,"title":{},"body":{"injectables/AppService.html":{}}}],["constructor(config",{"_index":236,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["constructor(configservice",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(error",{"_index":675,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["constructor(logger",{"_index":17,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{}}}],["constructor(messagesservice",{"_index":975,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["constructor(prismaservice",{"_index":555,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":49,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(reflector",{"_index":205,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["consumer",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(loggercontextmiddleware).forroutes",{"_index":177,"title":{},"body":{"modules/AppModule.html":{}}}],["contain",{"_index":1281,"title":{},"body":{"classes/SignupDto.html":{}}}],["content",{"_index":1751,"title":{},"body":{"index.html":{}}}],["context",{"_index":210,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":231,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.getclass().name",{"_index":953,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["context.gethandler",{"_index":230,"title":{},"body":{"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["context.middleware",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["context.middleware.ts",{"_index":900,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["context.middleware.ts:6",{"_index":904,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["context.switchtohttp().getrequest",{"_index":1257,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["continuous",{"_index":1766,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1952,"title":{},"body":{"license.html":{}}}],["controller",{"_index":72,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":324,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('conversations",{"_index":526,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["controller('files",{"_index":801,"title":{},"body":{"controllers/FileController.html":{}}}],["controller('posts",{"_index":1137,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":1438,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllerkey",{"_index":891,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["controllerkey_methodkey",{"_index":885,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["controllers",{"_index":74,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["conventional",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["conventions",{"_index":1756,"title":{},"body":{"index.html":{}}}],["conversation",{"_index":475,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"index.html":{}}}],["conversation.dto",{"_index":659,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts",{"_index":587,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["conversation.dto.ts:11",{"_index":839,"title":{},"body":{"classes/GetAllConversationDto.html":{}}}],["conversation.dto.ts:14",{"_index":1302,"title":{},"body":{"classes/UpdateMembersConversationDto.html":{}}}],["conversation.dto.ts:20",{"_index":661,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:27",{"_index":662,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{}}}],["conversation.dto.ts:32",{"_index":611,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:33",{"_index":1319,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:34",{"_index":1318,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:35",{"_index":1320,"title":{},"body":{"classes/UpdateRolesConversationDto.html":{}}}],["conversation.dto.ts:52",{"_index":605,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:59",{"_index":606,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:6",{"_index":1301,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:66",{"_index":591,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:7",{"_index":1300,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversation.dto.ts:73",{"_index":593,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["conversation.dto.ts:8",{"_index":1299,"title":{},"body":{"classes/UpdateConversationDto.html":{}}}],["conversationentity",{"_index":439,"title":{"classes/ConversationEntity.html":{}},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"coverage.html":{}}}],["conversationid",{"_index":492,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{}}}],["conversationid).members",{"_index":1052,"title":{},"body":{"injectables/MessagesService.html":{}}}],["conversations",{"_index":463,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/MessagesService.html":{},"index.html":{}}}],["conversations.controller",{"_index":551,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["conversations.service",{"_index":522,"title":{},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{}}}],["conversationscontroller",{"_index":461,"title":{"controllers/ConversationsController.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"coverage.html":{}}}],["conversationsmodule",{"_index":119,"title":{"modules/ConversationsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules.html":{},"overview.html":{}}}],["conversationsservice",{"_index":521,"title":{"injectables/ConversationsService.html":{}},"body":{"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"coverage.html":{},"overview.html":{}}}],["cookie",{"_index":1577,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["cookies",{"_index":1720,"title":{},"body":{"index.html":{}}}],["copies",{"_index":1922,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1906,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1897,"title":{},"body":{"index.html":{},"license.html":{}}}],["core/interceptors/interceptor.module",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.decorator",{"_index":199,"title":{},"body":{"injectables/AppService.html":{}}}],["core/logger/logger.module",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["core/logger/logger.service",{"_index":200,"title":{},"body":{"injectables/AppService.html":{}}}],["core/middleware/logger",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["core/validators",{"_index":1375,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["correct",{"_index":322,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["cors",{"_index":1008,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{},"index.html":{}}}],["corsoptions",{"_index":1520,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":1333,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["course",{"_index":1868,"title":{},"body":{"index.html":{}}}],["cover",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"controllers/FileController.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["cover.dto.ts",{"_index":1327,"title":{},"body":{"classes/UserCoverDto.html":{},"coverage.html":{}}}],["cover.dto.ts:10",{"_index":1328,"title":{},"body":{"classes/UserCoverDto.html":{}}}],["coverage",{"_index":1512,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["createat",{"_index":1179,"title":{},"body":{"injectables/PostsService.html":{}}}],["createconversation",{"_index":464,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversation(@body",{"_index":529,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["createconversation(dto",{"_index":472,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["createconversationdto",{"_index":473,"title":{"classes/CreateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["created",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{}}}],["createdat",{"_index":443,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["createloggerprovider",{"_index":1533,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createloggerprovider(prefix",{"_index":1626,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createloggerproviders",{"_index":913,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createmessage",{"_index":969,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessage(conversationid",{"_index":979,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["createmessagedto",{"_index":635,"title":{"classes/CreateMessageDto.html":{}},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["createmessagedto.text",{"_index":1056,"title":{},"body":{"injectables/MessagesService.html":{}}}],["createparamdecorator",{"_index":2003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createpost",{"_index":1100,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":1138,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(dto",{"_index":1107,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":643,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["creator",{"_index":444,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["creator01",{"_index":634,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["creator01'})@isstring",{"_index":592,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["criteria",{"_index":1715,"title":{},"body":{"index.html":{}}}],["crud",{"_index":1778,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":51,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["ctx.getrequest",{"_index":853,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":53,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["current",{"_index":490,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/PaginationDto.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":886,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["customdecorator",{"_index":2033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customtext",{"_index":1613,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["cập",{"_index":221,"title":{},"body":{"injectables/AtGuard.html":{}}}],["damages",{"_index":1948,"title":{},"body":{"license.html":{}}}],["data",{"_index":86,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"controllers/FileController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":1642,"title":{},"body":{"index.html":{}}}],["datasources",{"_index":1225,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":403,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"injectables/PostsService.html":{},"classes/UserProfileDto.html":{}}}],["date().toisostring",{"_index":856,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["date.now",{"_index":955,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["db",{"_index":1226,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["deal",{"_index":1909,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1957,"title":{},"body":{"license.html":{}}}],["debug",{"_index":919,"title":{},"body":{"injectables/LoggerService.html":{}}}],["debug(message",{"_index":924,"title":{},"body":{"injectables/LoggerService.html":{}}}],["decode",{"_index":1704,"title":{},"body":{"index.html":{}}}],["decorator",{"_index":1706,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{}}}],["deepscanroutes",{"_index":861,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["default",{"_index":883,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1604,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defaultmessage(args",{"_index":1605,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["defined",{"_index":19,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["definition",{"_index":1695,"title":{},"body":{"index.html":{}}}],["delete",{"_index":483,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["delete(':id",{"_index":538,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":482,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["delete(':userid",{"_index":1460,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('delete",{"_index":1152,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('delete')@apibearerauth()@apioperation({summary",{"_index":1113,"title":{},"body":{"controllers/PostsController.html":{}}}],["delete('profile/:userid",{"_index":1457,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('profile/:userid')@apibearerauth()@apioperation({summary",{"_index":1404,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteconversationbyid",{"_index":465,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationbyid(id",{"_index":480,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteconversationdto",{"_index":481,"title":{"classes/DeleteConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["deleteoneadminconversation",{"_index":466,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversation(conversationid",{"_index":486,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["deleteoneadminconversationdto",{"_index":487,"title":{"classes/DeleteOneAdminConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["deleteonepost",{"_index":666,"title":{"classes/DeleteOnePost.html":{}},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["deletepost",{"_index":1101,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@body",{"_index":1153,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(dto",{"_index":1112,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deleteuserbyemail",{"_index":1395,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyemail(@param('userid",{"_index":1458,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyemail(userid",{"_index":1403,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid",{"_index":1396,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuserbyid(@param('userid",{"_index":1461,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuserbyid(userid",{"_index":1406,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["denied",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":114,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1745,"title":{},"body":{"index.html":{}}}],["desc",{"_index":1080,"title":{},"body":{"classes/PaginationDto.html":{}}}],["describe",{"_index":1694,"title":{},"body":{"index.html":{}}}],["description",{"_index":83,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["deserialize",{"_index":1714,"title":{},"body":{"index.html":{}}}],["design",{"_index":1697,"title":{},"body":{"index.html":{}}}],["dev",{"_index":1800,"title":{},"body":{"index.html":{}}}],["development",{"_index":1811,"title":{},"body":{"index.html":{}}}],["devices",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["devto",{"_index":1841,"title":{},"body":{"index.html":{}}}],["diagram",{"_index":1643,"title":{},"body":{"index.html":{}}}],["different",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["directly",{"_index":1748,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":1918,"title":{},"body":{"license.html":{}}}],["distributed",{"_index":1895,"title":{},"body":{"index.html":{}}}],["docker",{"_index":1806,"title":{},"body":{"index.html":{},"properties.html":{}}}],["document",{"_index":1698,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["documentation",{"_index":1513,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["documentbuilder",{"_index":2008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doe",{"_index":1043,"title":{},"body":{"injectables/MessagesService.html":{}}}],["dto",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto.admins",{"_index":573,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.authorid",{"_index":1173,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.avatar",{"_index":580,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.creator",{"_index":574,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.description",{"_index":571,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.email",{"_index":397,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dto.favouritorid",{"_index":1200,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.files",{"_index":1177,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.members",{"_index":572,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.name",{"_index":570,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["dto.newpassword",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.oldpassword",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto.order",{"_index":1486,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto.postid",{"_index":1193,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.reactiontype",{"_index":1206,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.title",{"_index":1176,"title":{},"body":{"injectables/PostsService.html":{}}}],["dto.userid",{"_index":576,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["dto.username",{"_index":399,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["dynamicmodule",{"_index":912,"title":{},"body":{"classes/LoggerModule.html":{}}}],["e",{"_index":1853,"title":{},"body":{"index.html":{}}}],["e2e",{"_index":1821,"title":{},"body":{"index.html":{}}}],["easily",{"_index":1655,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":1679,"title":{},"body":{"index.html":{}}}],["element.id",{"_index":1051,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.foreach((item",{"_index":1062,"title":{},"body":{"injectables/MessagesService.html":{}}}],["element.messages.splice(element.messages.indexof(item",{"_index":1070,"title":{},"body":{"injectables/MessagesService.html":{}}}],["email",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["enable",{"_index":1691,"title":{},"body":{"index.html":{}}}],["enableshutdownhooks",{"_index":1214,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":1218,"title":{},"body":{"injectables/PrismaService.html":{}}}],["end",{"_index":1857,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":1779,"title":{},"body":{"index.html":{}}}],["enhance",{"_index":1855,"title":{},"body":{"index.html":{}}}],["entities",{"_index":523,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["enumerations",{"_index":1600,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["envfilepath",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":1743,"title":{},"body":{"index.html":{}}}],["error",{"_index":29,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AuthController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"controllers/FileController.html":{},"injectables/LoggerService.html":{}}}],["error(message",{"_index":926,"title":{},"body":{"injectables/LoggerService.html":{}}}],["erroracceptableexception",{"_index":672,"title":{"classes/ErrorAcceptableException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorbadgatewayexception",{"_index":712,"title":{"classes/ErrorBadGatewayException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorbadrequestexception",{"_index":694,"title":{"classes/ErrorBadRequestException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorforbiddenexception",{"_index":692,"title":{"classes/ErrorForbiddenException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorgatewaytimeoutexception",{"_index":713,"title":{"classes/ErrorGatewayTimeoutException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorinternalserverexception",{"_index":703,"title":{"classes/ErrorInternalServerException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errormethodnotallowedexception",{"_index":705,"title":{"classes/ErrorMethodNotAllowedException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errornotfoundexception",{"_index":688,"title":{"classes/ErrorNotFoundException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorrequesttimeoutexception",{"_index":697,"title":{"classes/ErrorRequestTimeoutException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errors",{"_index":1508,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errors.length",{"_index":1510,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["errorserviceunavailableexception",{"_index":708,"title":{"classes/ErrorServiceUnavailableException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorsintereptor",{"_index":739,"title":{"injectables/ErrorsIntereptor.html":{}},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["errorunauthorizedexception",{"_index":690,"title":{"classes/ErrorUnauthorizedException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["errorunsupportedmediatypeexception",{"_index":700,"title":{"classes/ErrorUnsupportedMediaTypeException.html":{}},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["eslint",{"_index":1760,"title":{},"body":{"index.html":{}}}],["eval",{"_index":1735,"title":{},"body":{"index.html":{}}}],["event",{"_index":1943,"title":{},"body":{"license.html":{}}}],["everyone",{"_index":1648,"title":{},"body":{"index.html":{}}}],["example",{"_index":589,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"index.html":{}}}],["example@gmail.com",{"_index":962,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["exception",{"_index":33,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":66,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":67,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exception.stack",{"_index":68,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exception.stack.tostring",{"_index":61,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":8,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["executes",{"_index":1740,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":208,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["experiences",{"_index":1652,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":48,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["exports",{"_index":917,"title":{},"body":{"classes/LoggerModule.html":{},"modules/PrismaModule.html":{}}}],["express",{"_index":47,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/FileController.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"properties.html":{}}}],["express.multer.file",{"_index":763,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["expressjs",{"_index":1722,"title":{},"body":{"index.html":{}}}],["extends",{"_index":213,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"injectables/LoggerService.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["extra",{"_index":873,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["extractjwt",{"_index":246,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":253,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["extramodels",{"_index":862,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["failed",{"_index":1095,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["false",{"_index":453,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"guards/RolesGuard.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["favouritorid",{"_index":1235,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["features",{"_index":1663,"title":{},"body":{"index.html":{}}}],["feels",{"_index":1650,"title":{},"body":{"index.html":{}}}],["female",{"_index":1361,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["field",{"_index":1667,"title":{},"body":{"index.html":{}}}],["field.decorator.ts",{"_index":1551,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["fieldname",{"_index":1625,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fields",{"_index":321,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["file.filename",{"_index":834,"title":{},"body":{"classes/FilesService.html":{}}}],["file.originalname",{"_index":832,"title":{},"body":{"classes/FilesService.html":{}}}],["file.size",{"_index":836,"title":{},"body":{"classes/FilesService.html":{}}}],["filecontroller",{"_index":756,"title":{"controllers/FileController.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"coverage.html":{}}}],["filename",{"_index":833,"title":{},"body":{"classes/FilesService.html":{}}}],["files",{"_index":647,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"index.html":{},"license.html":{}}}],["files.controller",{"_index":825,"title":{},"body":{"modules/FilesModule.html":{}}}],["files.map((file",{"_index":837,"title":{},"body":{"classes/FilesService.html":{}}}],["files.service",{"_index":797,"title":{},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{}}}],["fileservice",{"_index":802,"title":{},"body":{"controllers/FileController.html":{}}}],["filesmodule",{"_index":120,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":796,"title":{"classes/FilesService.html":{}},"body":{"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["filled",{"_index":1615,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["filters",{"_index":726,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["find",{"_index":1763,"title":{},"body":{"index.html":{}}}],["find((element",{"_index":1058,"title":{},"body":{"injectables/MessagesService.html":{}}}],["findallmessages",{"_index":970,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["findallmessages(@messagebody('conversationid",{"_index":1014,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["findallmessages(conversationid",{"_index":984,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["finduser",{"_index":1172,"title":{},"body":{"injectables/PostsService.html":{}}}],["fitness",{"_index":1940,"title":{},"body":{"license.html":{}}}],["fix",{"_index":1781,"title":{},"body":{"index.html":{}}}],["flip",{"_index":1885,"title":{},"body":{"index.html":{}}}],["fo",{"_index":1883,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1847,"title":{},"body":{"index.html":{}}}],["following",{"_index":1927,"title":{},"body":{"license.html":{}}}],["forbidden",{"_index":318,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["forbiddenexception",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception('access",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception('you",{"_index":1190,"title":{},"body":{"injectables/PostsService.html":{}}}],["form",{"_index":323,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["format",{"_index":1696,"title":{},"body":{"index.html":{}}}],["formattedmessage",{"_index":941,"title":{},"body":{"injectables/LoggerService.html":{}}}],["formatter",{"_index":1759,"title":{},"body":{"index.html":{}}}],["forroot",{"_index":910,"title":{},"body":{"classes/LoggerModule.html":{}}}],["forroutes",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes('users",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["forroutes(userscontroller",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["found",{"_index":91,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":1677,"title":{},"body":{"index.html":{}}}],["free",{"_index":1902,"title":{},"body":{"license.html":{}}}],["front",{"_index":1856,"title":{},"body":{"index.html":{}}}],["frontend",{"_index":1640,"title":{},"body":{"index.html":{}}}],["full",{"_index":1355,"title":{},"body":{"classes/UserProfileDto.html":{},"classes/fullNameValidator.html":{},"index.html":{}}}],["fullname",{"_index":401,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["fullnamevalidator",{"_index":1373,"title":{"classes/fullNameValidator.html":{}},"body":{"classes/UserProfileDto.html":{},"coverage.html":{},"classes/fullNameValidator.html":{}}}],["function",{"_index":871,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1616,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1925,"title":{},"body":{"license.html":{}}}],["game",{"_index":1874,"title":{},"body":{"index.html":{}}}],["gateway",{"_index":711,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["gatewaytimeoutexception",{"_index":680,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["gender",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["generate",{"_index":888,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["generated",{"_index":1688,"title":{},"body":{"index.html":{}}}],["get(':id",{"_index":533,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":501,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["get(':postid",{"_index":1146,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':postid')@public()@apioperation({summary",{"_index":1122,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid",{"_index":1444,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid/all",{"_index":1143,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':userid/all')@public()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1119,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('all",{"_index":1441,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@apibearerauth()@apioperation({summary",{"_index":1414,"title":{},"body":{"controllers/UsersController.html":{}}}],["get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":495,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversationdto",{"_index":494,"title":{"classes/GetAllConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getallconversationdto:11",{"_index":658,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["getallconversations",{"_index":467,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallconversations(@body",{"_index":531,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["getallconversations(dto",{"_index":493,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getallpostofuserdto",{"_index":840,"title":{"classes/GetAllPostOfUserDto.html":{}},"body":{"classes/GetAllPostOfUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getallpostsofuser",{"_index":1102,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostsofuser(@body",{"_index":1141,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallpostsofuser(dto",{"_index":1115,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts",{"_index":1103,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpublicposts(@param('userid",{"_index":1144,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallpublicposts(userid",{"_index":1118,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallusers",{"_index":1397,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getallusers(@query",{"_index":1442,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers(dto",{"_index":1410,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getconversationbyid",{"_index":468,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getconversationbyid(id",{"_index":499,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["getcurrentuser",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getcurrentuser('refreshtoken",{"_index":339,"title":{},"body":{"controllers/AuthController.html":{}}}],["getcurrentuserid",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["gethello",{"_index":77,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember",{"_index":1032,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getmember(conversationid",{"_index":1036,"title":{},"body":{"injectables/MessagesService.html":{}}}],["getoneconversationdto",{"_index":500,"title":{"classes/GetOneConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["getonepostbyid",{"_index":1104,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getonepostbyid(@param('postid",{"_index":1147,"title":{},"body":{"controllers/PostsController.html":{}}}],["getonepostbyid(postid",{"_index":1121,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getting",{"_index":1634,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettokens",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["gettokens(userid",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserprofilebyemailnamedto",{"_index":842,"title":{"classes/GetUserProfileByEmailNameDto.html":{}},"body":{"classes/GetUserProfileByEmailNameDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["getusersbyemailandname",{"_index":1398,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusersbyemailandname(@body",{"_index":1447,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbyemailandname(dto",{"_index":1413,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusersbyid",{"_index":1399,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusersbyid(@param('userid",{"_index":1445,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersbyid(userid",{"_index":1416,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["gitbox",{"_index":1862,"title":{},"body":{"index.html":{}}}],["github",{"_index":1860,"title":{},"body":{"index.html":{}}}],["global",{"_index":879,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"modules/PrismaModule.html":{}}}],["goneexception",{"_index":716,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["granted",{"_index":1901,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1746,"title":{},"body":{"index.html":{},"modules.html":{}}}],["group01",{"_index":594,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["group01'})@isstring()@isnotempty()@length(3",{"_index":607,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["grow",{"_index":1826,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1249,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{}}}],["handle",{"_index":751,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{}}}],["handlemessage",{"_index":13,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handlemessage(exception",{"_index":36,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse",{"_index":15,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["handleresponse(response",{"_index":38,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["hash",{"_index":389,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["hashedrefreshtoken",{"_index":393,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashmatches",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["hashpassword(dto.newpassword",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(dto.password",{"_index":394,"title":{},"body":{"injectables/AuthService.html":{}}}],["hashpassword(rt",{"_index":390,"title":{},"body":{"injectables/AuthService.html":{}}}],["hasrole",{"_index":1259,"title":{},"body":{"guards/RolesGuard.html":{}}}],["header",{"_index":1725,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":1731,"title":{},"body":{"index.html":{}}}],["hello",{"_index":87,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{},"classes/UserProfileDto.html":{}}}],["helmet",{"_index":1581,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["help",{"_index":1702,"title":{},"body":{"index.html":{}}}],["here",{"_index":1834,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["hereby",{"_index":1900,"title":{},"body":{"license.html":{}}}],["heroku",{"_index":1788,"title":{},"body":{"index.html":{}}}],["holders",{"_index":1945,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":107,"title":{},"body":{"controllers/AppController.html":{},"properties.html":{}}}],["homepage'})@apiresponse({status",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["host",{"_index":30,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["host.interface",{"_index":46,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":52,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["http",{"_index":687,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/MessagesGateway.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["httpargumentshost",{"_index":44,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["httpcode",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpcode(httpstatus.created",{"_index":327,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["httpcode(httpstatus.ok",{"_index":105,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpexception",{"_index":28,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/ErrorsIntereptor.html":{},"classes/HttpExceptionFilter.html":{}}}],["httpexception('new",{"_index":754,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpexceptionfilter",{"_index":849,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["https://github.com/thuongtruong1009",{"_index":2014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://github.com/thuongtruong1009/teneno",{"_index":1979,"title":{},"body":{"properties.html":{}}}],["https://github.dev/narhakobyan/awesome",{"_index":721,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["https://viblo.asia/p/framework",{"_index":724,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["https://www.youtube.com/watch?v=lmjj1_ek4y8&ab_channel=prisma",{"_index":527,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["httpstatus",{"_index":42,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["httpstatus.bad_gateway",{"_index":755,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["httpstatus.internal_server_error",{"_index":65,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["husky",{"_index":1583,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["iarrayfile",{"_index":798,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["id",{"_index":392,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateMessageDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"injectables/MessagesService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["id.decorator.ts",{"_index":1545,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["idea",{"_index":1844,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":1514,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":1194,"title":{},"body":{"injectables/PostsService.html":{}}}],["ignore",{"_index":878,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ignoreglobalprefix",{"_index":863,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["ijwtpayload",{"_index":241,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["image",{"_index":1421,"title":{},"body":{"controllers/UsersController.html":{}}}],["images",{"_index":785,"title":{},"body":{"controllers/FileController.html":{}}}],["imateapotexception",{"_index":720,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["impact",{"_index":1893,"title":{},"body":{"index.html":{}}}],["implements",{"_index":7,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/ErrorsIntereptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"injectables/ParseIntPipe.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["implied",{"_index":1936,"title":{},"body":{"license.html":{}}}],["import",{"_index":41,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["imported",{"_index":870,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["imports",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["improve",{"_index":1660,"title":{},"body":{"index.html":{}}}],["include",{"_index":864,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["included",{"_index":876,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"license.html":{}}}],["including",{"_index":1912,"title":{},"body":{"license.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":1219,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["information",{"_index":502,"title":{},"body":{"controllers/ConversationsController.html":{},"index.html":{}}}],["informations",{"_index":1861,"title":{},"body":{"index.html":{}}}],["infrastructure/auth/auth.module",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/auth/decorators",{"_index":102,"title":{},"body":{"controllers/AppController.html":{}}}],["infrastructure/auth/guards",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/conversations/conversations.module",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/files/files.module",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/messages/messages.module",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/posts/posts.module",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/prisma/prisma.module",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["infrastructure/users/users.module",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["inherited",{"_index":657,"title":{},"body":{"classes/DeleteConversationDto.html":{},"classes/GetOneConversationDto.html":{}}}],["init",{"_index":1795,"title":{},"body":{"index.html":{}}}],["initswagger",{"_index":1526,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":244,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["inject(configservice",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["injectable",{"_index":194,"title":{"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}},"body":{"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["injectables",{"_index":195,"title":{},"body":{"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"overview.html":{}}}],["inputs",{"_index":525,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["inspect",{"_index":1744,"title":{},"body":{"index.html":{}}}],["inspected",{"_index":875,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["inspiration",{"_index":1845,"title":{},"body":{"index.html":{}}}],["install",{"_index":1793,"title":{},"body":{"index.html":{}}}],["installation",{"_index":1791,"title":{},"body":{"index.html":{}}}],["instance",{"_index":1711,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":59,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["int.pipe.ts",{"_index":1084,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["int.pipe.ts:10",{"_index":1089,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["integration",{"_index":1767,"title":{},"body":{"index.html":{}}}],["interactive",{"_index":1742,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":741,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["intercept(context",{"_index":742,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["interceptormodule",{"_index":121,"title":{"modules/InterceptorModule.html":{}},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{},"modules.html":{},"overview.html":{}}}],["interests",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["interface",{"_index":858,"title":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["interfaces",{"_index":250,"title":{},"body":{"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"interfaces/ISwaggerOptions.html":{},"interfaces/Response.html":{},"overview.html":{}}}],["internal",{"_index":57,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["internalservererrorexception",{"_index":681,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["invalid",{"_index":1368,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["isalphanumeric",{"_index":613,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["isarray",{"_index":497,"title":{},"body":{"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/UserProfileDto.html":{}}}],["isdate",{"_index":1371,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["isemail",{"_index":614,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["isglobal",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["isinglefile",{"_index":799,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["isjson",{"_index":1241,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["isnan(val",{"_index":1093,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["isnotempty",{"_index":615,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["isnotempty()@apiproperty({type",{"_index":1276,"title":{},"body":{"classes/SignupDto.html":{}}}],["isnotempty()@isemail()@apiproperty({type",{"_index":960,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["isnotempty()@isstring()@apiproperty({type",{"_index":964,"title":{},"body":{"classes/LoginDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["isnumber",{"_index":1242,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"classes/UserProfileDto.html":{}}}],["isnumber()@isnotempty",{"_index":1239,"title":{},"body":{"classes/ReactionsPost.html":{}}}],["ispublic",{"_index":228,"title":{},"body":{"injectables/AtGuard.html":{}}}],["isstring",{"_index":616,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["isstring()@apiproperty({type",{"_index":1076,"title":{},"body":{"classes/PaginationDto.html":{}}}],["isstring()@isnotempty",{"_index":669,"title":{},"body":{"classes/DeleteOnePost.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["istyping",{"_index":994,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["iswaggeroptions",{"_index":859,"title":{"interfaces/ISwaggerOptions.html":{}},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":1262,"title":{},"body":{"guards/RolesGuard.html":{}}}],["item.id",{"_index":1063,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item.text",{"_index":1065,"title":{},"body":{"injectables/MessagesService.html":{}}}],["item1item2",{"_index":1673,"title":{},"body":{"index.html":{}}}],["item_1",{"_index":814,"title":{},"body":{"controllers/FileController.html":{}}}],["item_2",{"_index":816,"title":{},"body":{"controllers/FileController.html":{}}}],["item_3",{"_index":817,"title":{},"body":{"controllers/FileController.html":{}}}],["item_4",{"_index":818,"title":{},"body":{"controllers/FileController.html":{}}}],["item_5",{"_index":819,"title":{},"body":{"controllers/FileController.html":{}}}],["ititiu19228@student.hcmiu.edu.vn",{"_index":2015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["itokens",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["java",{"_index":1877,"title":{},"body":{"index.html":{}}}],["john",{"_index":1042,"title":{},"body":{"injectables/MessagesService.html":{}}}],["join",{"_index":1672,"title":{},"body":{"index.html":{}}}],["joinconversation",{"_index":971,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["joinconversation(conversationid",{"_index":987,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["json.stringify(exception.getresponse",{"_index":60,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["jwt",{"_index":249,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":252,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["jwtmodule",{"_index":352,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{}}}],["keywords",{"_index":1978,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1935,"title":{},"body":{"license.html":{}}}],["latest",{"_index":1849,"title":{},"body":{"index.html":{}}}],["league",{"_index":1882,"title":{},"body":{"index.html":{}}}],["learn",{"_index":1870,"title":{},"body":{"index.html":{}}}],["learning",{"_index":1866,"title":{},"body":{"index.html":{}}}],["legend",{"_index":1884,"title":{},"body":{"index.html":{}}}],["length",{"_index":617,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["length(3",{"_index":624,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["length(8",{"_index":1289,"title":{},"body":{"classes/SignupDto.html":{}}}],["letter",{"_index":1283,"title":{},"body":{"classes/SignupDto.html":{}}}],["liability",{"_index":1949,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1946,"title":{},"body":{"license.html":{}}}],["library",{"_index":1701,"title":{},"body":{"index.html":{}}}],["license",{"_index":1894,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":1825,"title":{},"body":{"index.html":{}}}],["life",{"_index":1656,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1074,"title":{},"body":{"classes/PaginationDto.html":{}}}],["limitation",{"_index":1913,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1937,"title":{},"body":{"license.html":{}}}],["linkedin",{"_index":1843,"title":{},"body":{"index.html":{}}}],["linter",{"_index":1772,"title":{},"body":{"index.html":{}}}],["lintstage",{"_index":1770,"title":{},"body":{"index.html":{}}}],["list",{"_index":511,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["list.authorid",{"_index":1189,"title":{},"body":{"injectables/PostsService.html":{}}}],["list.length",{"_index":584,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["list.writtenposts.find((post",{"_index":1195,"title":{},"body":{"injectables/PostsService.html":{}}}],["list['creator",{"_index":582,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["list[0]['admins'].filter((admin",{"_index":585,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["load",{"_index":868,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["local",{"_index":1810,"title":{},"body":{"index.html":{}}}],["log",{"_index":920,"title":{},"body":{"injectables/LoggerService.html":{}}}],["log(message",{"_index":929,"title":{},"body":{"injectables/LoggerService.html":{}}}],["logger",{"_index":26,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["logger(prefix",{"_index":1629,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logger.provider",{"_index":914,"title":{},"body":{"classes/LoggerModule.html":{}}}],["logger.service",{"_index":915,"title":{},"body":{"classes/LoggerModule.html":{}}}],["loggercontextmiddleware",{"_index":150,"title":{"injectables/LoggerContextMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["loggerfactory",{"_index":1534,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["loggerfactory(logger",{"_index":1628,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loggermodule",{"_index":156,"title":{"classes/LoggerModule.html":{}},"body":{"modules/AppModule.html":{},"classes/LoggerModule.html":{},"coverage.html":{}}}],["loggermodule.forroot",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["loggerservice",{"_index":18,"title":{"injectables/LoggerService.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["logginginterceptor",{"_index":895,"title":{"injectables/LoggingInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["login",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":278,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["logout",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logout(@getcurrentuserid",{"_index":335,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(userid",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["long",{"_index":600,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["looking",{"_index":1889,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1737,"title":{},"body":{"index.html":{}}}],["lại",{"_index":227,"title":{},"body":{"injectables/AtGuard.html":{}}}],["main.ts",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["make",{"_index":1654,"title":{},"body":{"index.html":{}}}],["male",{"_index":1360,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["map",{"_index":1247,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["marriagestatus",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["master",{"_index":1869,"title":{},"body":{"index.html":{}}}],["match",{"_index":1669,"title":{},"body":{"index.html":{}}}],["matching",{"_index":71,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["matchpassword",{"_index":1493,"title":{},"body":{"injectables/UsersService.html":{}}}],["max",{"_index":1045,"title":{},"body":{"injectables/MessagesService.html":{},"classes/UserProfileDto.html":{}}}],["max(101",{"_index":1389,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["max(2",{"_index":1392,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["maxcount",{"_index":815,"title":{},"body":{"controllers/FileController.html":{},"miscellaneous/functions.html":{}}}],["maxlength",{"_index":618,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["maxlength(101",{"_index":1383,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["maxlength(121",{"_index":629,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["maxlength(151",{"_index":1390,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["maxlength(21",{"_index":627,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["maxlength(46",{"_index":1376,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["media",{"_index":702,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["meet",{"_index":1048,"title":{},"body":{"injectables/MessagesService.html":{}}}],["member",{"_index":517,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["members",{"_index":445,"title":{},"body":{"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"injectables/MessagesService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"index.html":{}}}],["members[clientid",{"_index":1054,"title":{},"body":{"injectables/MessagesService.html":{}}}],["merchantability",{"_index":1939,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1916,"title":{},"body":{"license.html":{}}}],["message",{"_index":56,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"classes/CreateConversationDto.html":{},"injectables/ErrorsIntereptor.html":{},"injectables/LoggerService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{},"index.html":{}}}],["message.dto",{"_index":1308,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts",{"_index":637,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:2",{"_index":640,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:3",{"_index":641,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:4",{"_index":642,"title":{},"body":{"classes/CreateMessageDto.html":{}}}],["message.dto.ts:7",{"_index":1305,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1304,"title":{},"body":{"classes/UpdateMessageDto.html":{}}}],["message['conversationid",{"_index":1068,"title":{},"body":{"injectables/MessagesService.html":{}}}],["message['messageid",{"_index":1069,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messagebody",{"_index":1003,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('conversationid",{"_index":1010,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('istyping",{"_index":1018,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messagebody('senderid",{"_index":1011,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["messages",{"_index":1041,"title":{},"body":{"injectables/MessagesService.html":{},"index.html":{}}}],["messages.gateway",{"_index":1030,"title":{},"body":{"modules/MessagesModule.html":{}}}],["messages.push(message",{"_index":1059,"title":{},"body":{"injectables/MessagesService.html":{}}}],["messages.service",{"_index":1006,"title":{},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{}}}],["messagesgateway",{"_index":967,"title":{"classes/MessagesGateway.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"coverage.html":{}}}],["messagesmodule",{"_index":122,"title":{"modules/MessagesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MessagesModule.html":{},"modules.html":{},"overview.html":{}}}],["messagesservice",{"_index":976,"title":{"injectables/MessagesService.html":{}},"body":{"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"coverage.html":{},"overview.html":{}}}],["meta",{"_index":1859,"title":{},"body":{"index.html":{}}}],["metadata",{"_index":1087,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["metatype",{"_index":1502,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["method",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"interfaces/ISwaggerOptions.html":{}}}],["methodkey",{"_index":892,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["methodnotallowedexception",{"_index":682,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["methods",{"_index":10,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["middleware",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["middleware(app",{"_index":1630,"title":{},"body":{"miscellaneous/functions.html":{}}}],["middlewareconsumer",{"_index":134,"title":{},"body":{"modules/AppModule.html":{}}}],["migrate",{"_index":1799,"title":{},"body":{"index.html":{}}}],["min",{"_index":1372,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["min(0",{"_index":1391,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["min(17",{"_index":1388,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["minlength",{"_index":619,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["minlength(2",{"_index":625,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["minlength(7",{"_index":1291,"title":{},"body":{"classes/SignupDto.html":{}}}],["miscellaneous",{"_index":1599,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1824,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["mode",{"_index":1814,"title":{},"body":{"index.html":{}}}],["models",{"_index":874,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["modify",{"_index":1915,"title":{},"body":{"license.html":{}}}],["module",{"_index":111,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":113,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1833,"title":{},"body":{"index.html":{}}}],["multer",{"_index":1723,"title":{},"body":{"index.html":{}}}],["multi",{"_index":776,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["multifielddecorator",{"_index":795,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["multifielddecorator(uploadfields",{"_index":1631,"title":{},"body":{"miscellaneous/functions.html":{}}}],["music",{"_index":1379,"title":{},"body":{"classes/UserProfileDto.html":{},"index.html":{}}}],["mustermann",{"_index":1046,"title":{},"body":{"injectables/MessagesService.html":{}}}],["name",{"_index":23,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["nest",{"_index":722,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"index.html":{}}}],["nestinterceptor",{"_index":747,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["nestjs",{"_index":725,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":43,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/HttpExceptionFilter.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/features/arguments",{"_index":45,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["nestjs/config",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtStrategy.html":{},"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":139,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"modules/InterceptorModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":353,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1306,"title":{},"body":{"classes/UpdateMessageDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":212,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":792,"title":{},"body":{"controllers/FileController.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":98,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"classes/CreateConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"controllers/PostsController.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":1005,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":906,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["nestmodule",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["network",{"_index":1646,"title":{},"body":{"index.html":{}}}],["new",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ErrorsIntereptor.html":{},"classes/HttpExceptionFilter.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["newconversation",{"_index":568,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["newpassword",{"_index":1310,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["newprofile",{"_index":1491,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":395,"title":{},"body":{"injectables/AuthService.html":{}}}],["newuser.email",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["next",{"_index":743,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":1248,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["next.handle().pipe(timeout(1000",{"_index":1297,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["nguyen",{"_index":1838,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["ngược",{"_index":226,"title":{},"body":{"injectables/AtGuard.html":{}}}],["nice",{"_index":1047,"title":{},"body":{"injectables/MessagesService.html":{}}}],["node.js",{"_index":1719,"title":{},"body":{"index.html":{}}}],["nodejs",{"_index":1676,"title":{},"body":{"index.html":{}}}],["non",{"_index":1707,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1942,"title":{},"body":{"license.html":{}}}],["notacceptableexception",{"_index":674,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["notedev",{"_index":1865,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":683,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('access",{"_index":1495,"title":{},"body":{"injectables/UsersService.html":{}}}],["notfoundexception('post",{"_index":1188,"title":{},"body":{"injectables/PostsService.html":{}}}],["notfoundexception('user",{"_index":1174,"title":{},"body":{"injectables/PostsService.html":{}}}],["notice",{"_index":1930,"title":{},"body":{"license.html":{}}}],["notimplementedexception",{"_index":719,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["now",{"_index":954,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["now}ms",{"_index":958,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["npm",{"_index":1792,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1796,"title":{},"body":{"index.html":{}}}],["null",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConversationEntity.html":{}}}],["nullable",{"_index":454,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{}}}],["number",{"_index":604,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/PaginationDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdatePostDto.html":{},"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/functions.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["number(dto.current",{"_index":1483,"title":{},"body":{"injectables/UsersService.html":{}}}],["number(dto.limit",{"_index":1482,"title":{},"body":{"injectables/UsersService.html":{}}}],["nếu",{"_index":216,"title":{},"body":{"injectables/AtGuard.html":{}}}],["object",{"_index":1506,"title":{},"body":{"injectables/ValidationPipe.html":{},"index.html":{}}}],["object.values",{"_index":1053,"title":{},"body":{"injectables/MessagesService.html":{}}}],["observable",{"_index":746,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["obtaining",{"_index":1905,"title":{},"body":{"license.html":{}}}],["official",{"_index":1637,"title":{},"body":{"index.html":{},"properties.html":{}}}],["old",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{}}}],["old!'})@max(101",{"_index":1340,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["oldpassword",{"_index":1311,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["one",{"_index":484,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"classes/SignupDto.html":{},"index.html":{}}}],["onmoduledestroy",{"_index":1215,"title":{},"body":{"injectables/PrismaService.html":{}}}],["onmoduleinit",{"_index":1216,"title":{},"body":{"injectables/PrismaService.html":{}}}],["oop",{"_index":1875,"title":{},"body":{"index.html":{}}}],["open",{"_index":1801,"title":{},"body":{"index.html":{}}}],["operationid",{"_index":889,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["operationidfactory",{"_index":865,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"miscellaneous/variables.html":{}}}],["opinionated",{"_index":1758,"title":{},"body":{"index.html":{}}}],["option",{"_index":1999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":25,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["options",{"_index":1693,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["order",{"_index":1075,"title":{},"body":{"classes/PaginationDto.html":{}}}],["orderby",{"_index":1485,"title":{},"body":{"injectables/UsersService.html":{}}}],["oriented",{"_index":1871,"title":{},"body":{"index.html":{}}}],["origin",{"_index":1009,"title":{},"body":{"classes/MessagesGateway.html":{},"miscellaneous/variables.html":{}}}],["originalname",{"_index":831,"title":{},"body":{"classes/FilesService.html":{}}}],["otherwise",{"_index":1954,"title":{},"body":{"license.html":{}}}],["out",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1962,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1559,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":1752,"title":{},"body":{"index.html":{}}}],["pagecurrent",{"_index":1490,"title":{},"body":{"injectables/UsersService.html":{}}}],["pageitems",{"_index":1487,"title":{},"body":{"injectables/UsersService.html":{}}}],["pagelimit",{"_index":1489,"title":{},"body":{"injectables/UsersService.html":{}}}],["paginationdto",{"_index":1072,"title":{"classes/PaginationDto.html":{}},"body":{"classes/PaginationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["param",{"_index":520,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('conversationid",{"_index":541,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('id",{"_index":534,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["param('userid",{"_index":1450,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":21,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["parse",{"_index":1724,"title":{},"body":{"index.html":{}}}],["parseint(value",{"_index":1092,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["parseintpipe",{"_index":1082,"title":{"injectables/ParseIntPipe.html":{}},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["parser",{"_index":1578,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["parsing",{"_index":1721,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":663,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createconversationdto",{"_index":664,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{}}}],["partialtype(createpostdto",{"_index":1244,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["partialtype(userprofiledto",{"_index":848,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{}}}],["particular",{"_index":1941,"title":{},"body":{"license.html":{}}}],["passport",{"_index":248,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["passportstrategy",{"_index":245,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":251,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["passreqtocallback",{"_index":1271,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["password",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["password123",{"_index":965,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["password123'})@length(8",{"_index":1277,"title":{},"body":{"classes/SignupDto.html":{}}}],["passwordmatches",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwords",{"_index":1703,"title":{},"body":{"index.html":{}}}],["passwordvalidator",{"_index":621,"title":{"classes/passwordValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"coverage.html":{},"classes/passwordValidator.html":{}}}],["paste",{"_index":2024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patch",{"_index":519,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["patch(':conversationid/deleteadmins",{"_index":543,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/deleteadmins')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":488,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers",{"_index":540,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updatemembers')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":510,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles",{"_index":545,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':conversationid/updateroles')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":515,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id",{"_index":536,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch(':id')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":506,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["patch('update",{"_index":1149,"title":{},"body":{"controllers/PostsController.html":{}}}],["patch('update')@apibearerauth()@apioperation({summary",{"_index":1131,"title":{},"body":{"controllers/PostsController.html":{}}}],["path",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"miscellaneous/functions.html":{}}}],["pattern",{"_index":193,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["pattern.test(text",{"_index":1614,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["payload",{"_index":243,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["payloadtoolargeexception",{"_index":717,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["perform",{"_index":1708,"title":{},"body":{"index.html":{}}}],["permission",{"_index":1899,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1923,"title":{},"body":{"license.html":{}}}],["persistauthorization",{"_index":2032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["person",{"_index":1904,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1924,"title":{},"body":{"license.html":{}}}],["phone",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserProfileDto.html":{},"classes/phoneNumberValidator.html":{}}}],["phonenumbervalidator",{"_index":1374,"title":{"classes/phoneNumberValidator.html":{}},"body":{"classes/UserProfileDto.html":{},"coverage.html":{},"classes/phoneNumberValidator.html":{}}}],["phép",{"_index":219,"title":{},"body":{"injectables/AtGuard.html":{}}}],["pipe",{"_index":752,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["pipe(tap",{"_index":956,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["pipeline",{"_index":1768,"title":{},"body":{"index.html":{}}}],["pipetransform",{"_index":1090,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["plain",{"_index":1710,"title":{},"body":{"index.html":{}}}],["plaintoclass",{"_index":1504,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["plaintoclass(metatype",{"_index":1507,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["platform",{"_index":1647,"title":{},"body":{"index.html":{}}}],["playground",{"_index":1774,"title":{},"body":{"index.html":{}}}],["please",{"_index":1832,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":1675,"title":{},"body":{"index.html":{}}}],["portions",{"_index":1933,"title":{},"body":{"license.html":{}}}],["post",{"_index":299,"title":{"classes/Post.html":{}},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{},"index.html":{}}}],["post('avatar",{"_index":803,"title":{},"body":{"controllers/FileController.html":{}}}],["post('avatar')@httpcode(httpstatus.ok)@apioperation({summary",{"_index":764,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover",{"_index":806,"title":{},"body":{"controllers/FileController.html":{}}}],["post('cover')@apioperation({summary",{"_index":770,"title":{},"body":{"controllers/FileController.html":{}}}],["post('logout",{"_index":333,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout')@apibearerauth()@useguards(atguard)@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('multi",{"_index":813,"title":{},"body":{"controllers/FileController.html":{}}}],["post('multi')@apioperation({summary",{"_index":775,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts",{"_index":810,"title":{},"body":{"controllers/FileController.html":{}}}],["post('posts')@apioperation({summary",{"_index":784,"title":{},"body":{"controllers/FileController.html":{}}}],["post('private/all",{"_index":1140,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('private/all')@apibearerauth()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":1116,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction",{"_index":1155,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('reaction')@apibearerauth()@apioperation({summary",{"_index":1126,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('refresh",{"_index":337,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('refresh')@apibearerauth()@useguards(rtguard)@apiokresponse({description",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signin",{"_index":330,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":326,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apibearerauth()@httpcode(httpstatus.created)@apioperation({summary",{"_index":1108,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@httpcode(httpstatus.created)@apioperation({summary",{"_index":474,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["post.dto",{"_index":1243,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":645,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":670,"title":{},"body":{"classes/DeleteOnePost.html":{}}}],["post.dto.ts:11",{"_index":651,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:13",{"_index":1317,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:14",{"_index":649,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:19",{"_index":1238,"title":{},"body":{"classes/ReactionsPost.html":{}}}],["post.dto.ts:23",{"_index":1237,"title":{},"body":{"classes/ReactionsPost.html":{}}}],["post.dto.ts:27",{"_index":1240,"title":{},"body":{"classes/ReactionsPost.html":{}}}],["post.dto.ts:5",{"_index":652,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:6",{"_index":671,"title":{},"body":{"classes/DeleteOnePost.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts:7",{"_index":1316,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts:8",{"_index":650,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["post.dto.ts:9",{"_index":1315,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.id",{"_index":1196,"title":{},"body":{"injectables/PostsService.html":{}}}],["postgre",{"_index":1787,"title":{},"body":{"index.html":{},"properties.html":{}}}],["postgresql://postgres:123456789@localhost:5432/teneno?schema=public",{"_index":1228,"title":{},"body":{"injectables/PrismaService.html":{}}}],["postid",{"_index":668,"title":{},"body":{"classes/DeleteOnePost.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["postman",{"_index":1782,"title":{},"body":{"index.html":{}}}],["posts",{"_index":1099,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["posts.controller",{"_index":1162,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.service",{"_index":1134,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["postscontroller",{"_index":1097,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":123,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":1133,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["practice",{"_index":1657,"title":{},"body":{"index.html":{}}}],["pratice",{"_index":1880,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["prefixedloggerproviders",{"_index":916,"title":{},"body":{"classes/LoggerModule.html":{}}}],["prefixesforloggers",{"_index":1531,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["prettier",{"_index":1596,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["preview",{"_index":1639,"title":{},"body":{"index.html":{}}}],["print",{"_index":1736,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":1587,"title":{},"body":{"dependencies.html":{},"index.html":{},"properties.html":{}}}],["prisma.service",{"_index":1211,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":1224,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{},"index.html":{}}}],["prisma/prisma.module",{"_index":553,"title":{},"body":{"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["prisma/prisma.service",{"_index":565,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{}}}],["prisma@latest",{"_index":1794,"title":{},"body":{"index.html":{}}}],["prismaclient",{"_index":1213,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":124,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":358,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":12,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/LoggerService.html":{},"controllers/PostsController.html":{},"injectables/RtStrategy.html":{},"injectables/ValidationPipe.html":{}}}],["problems",{"_index":1764,"title":{},"body":{"index.html":{}}}],["process.env.database_url",{"_index":1229,"title":{},"body":{"injectables/PrismaService.html":{}}}],["process.env.white_list",{"_index":2002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1816,"title":{},"body":{"index.html":{}}}],["profile",{"_index":400,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["profile.dto.ts",{"_index":1330,"title":{},"body":{"classes/UserProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:101",{"_index":1341,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:111",{"_index":1346,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:121",{"_index":1363,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:37",{"_index":1359,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:44",{"_index":1342,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:51",{"_index":1352,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:58",{"_index":1366,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:65",{"_index":1364,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:75",{"_index":1336,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:83",{"_index":1369,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["profile.dto.ts:88",{"_index":1351,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["programming",{"_index":1661,"title":{},"body":{"index.html":{}}}],["progresses",{"_index":1848,"title":{},"body":{"index.html":{}}}],["project",{"_index":1755,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["promise.all",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["properties",{"_index":441,"title":{"properties.html":{}},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"properties.html":{}}}],["property",{"_index":961,"title":{},"body":{"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{}}}],["provide",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["provided",{"_index":320,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"license.html":{}}}],["provider",{"_index":1627,"title":{},"body":{"miscellaneous/functions.html":{}}}],["providers",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/InterceptorModule.html":{},"classes/LoggerModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["public",{"_index":101,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AtGuard.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["public()@get(':userid')@apioperation({summary",{"_index":1417,"title":{},"body":{"controllers/UsersController.html":{}}}],["public()@get()@httpcode(httpstatus.ok)@apioperation({summary",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["public()@post('signin')@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('signup')@apioperation({summary",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/multi",{"_index":780,"title":{},"body":{"controllers/FileController.html":{}}}],["public/posts",{"_index":788,"title":{},"body":{"controllers/FileController.html":{}}}],["publish",{"_index":1917,"title":{},"body":{"license.html":{}}}],["published",{"_index":1185,"title":{},"body":{"injectables/PostsService.html":{}}}],["pull",{"_index":1798,"title":{},"body":{"index.html":{}}}],["purpose",{"_index":1644,"title":{},"body":{"index.html":{},"license.html":{}}}],["pushdatabase",{"_index":1804,"title":{},"body":{"index.html":{}}}],["put",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["put('password",{"_index":341,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('password')@apibearerauth()@useguards(atguard)@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('profile/:userid",{"_index":1449,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/:userid')@apibearerauth()@apioperation({summary",{"_index":1427,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar/:userid",{"_index":1452,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/avatar/:userid')@apibearerauth()@apioperation({summary",{"_index":1420,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover/:userid",{"_index":1454,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('profile/cover/:userid')@apibearerauth()@apioperation({summary",{"_index":1424,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":1429,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["quickly",{"_index":1762,"title":{},"body":{"index.html":{}}}],["rapidy",{"_index":1780,"title":{},"body":{"index.html":{}}}],["reach",{"_index":1892,"title":{},"body":{"index.html":{}}}],["react",{"_index":1127,"title":{},"body":{"controllers/PostsController.html":{}}}],["reacted",{"_index":1204,"title":{},"body":{"injectables/PostsService.html":{}}}],["reaction",{"_index":1670,"title":{},"body":{"index.html":{}}}],["reactionpost",{"_index":1105,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactionpost(@body",{"_index":1156,"title":{},"body":{"controllers/PostsController.html":{}}}],["reactionpost(dto",{"_index":1124,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["reactions",{"_index":1184,"title":{},"body":{"injectables/PostsService.html":{}}}],["reactionspost",{"_index":1125,"title":{"classes/ReactionsPost.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["reactiontype",{"_index":1236,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["read",{"_index":1734,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":104,"title":{},"body":{"controllers/AppController.html":{},"controllers/FileController.html":{},"classes/MessagesGateway.html":{}}}],["references",{"_index":1775,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1588,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"guards/RolesGuard.html":{}}}],["refresh",{"_index":1022,"title":{},"body":{"classes/MessagesGateway.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{}}}],["refreshtoken",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/RtStrategy.html":{}}}],["refreshtoken(userid",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["remove",{"_index":972,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["remove(@messagebody",{"_index":1025,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["remove(message",{"_index":990,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["renderpath",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["repl",{"_index":1738,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1685,"title":{},"body":{"index.html":{},"properties.html":{}}}],["req",{"_index":905,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"injectables/RtStrategy.html":{},"miscellaneous/variables.html":{}}}],["req.get('authorization').replace('bearer",{"_index":1272,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["request",{"_index":188,"title":{},"body":{"modules/AppModule.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":857,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["request.user",{"_index":1258,"title":{},"body":{"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["request.user['sub",{"_index":2005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.user[data",{"_index":2004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requesta",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":191,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.get",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["requests",{"_index":1718,"title":{},"body":{"index.html":{}}}],["requesttimeoutexception",{"_index":684,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["required",{"_index":460,"title":{},"body":{"classes/ConversationEntity.html":{},"classes/CreateConversationDto.html":{},"controllers/FileController.html":{},"classes/LoginDto.html":{},"classes/SignupDto.html":{},"classes/UpdatePasswordDto.html":{},"miscellaneous/functions.html":{}}}],["requiredroles",{"_index":1255,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.find((item",{"_index":1261,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":903,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["reset",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":39,"title":{"interfaces/Response.html":{}},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["response.status(status).json",{"_index":854,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["response.status(statuscode).json(responsebody",{"_index":69,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["responsebody",{"_index":63,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["restriction",{"_index":1911,"title":{},"body":{"license.html":{}}}],["result",{"_index":1741,"title":{},"body":{"index.html":{}}}],["results",{"_index":70,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":109,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":34,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["rights",{"_index":1914,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1590,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"guards/RolesGuard.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["roledecorator",{"_index":1432,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roledecorator(role.admin",{"_index":1440,"title":{},"body":{"controllers/UsersController.html":{}}}],["roledecorator(role.admin)@delete(':userid')@apibearerauth()@apioperation({summary",{"_index":1407,"title":{},"body":{"controllers/UsersController.html":{}}}],["roledecorator(role.admin)@get('all')@apibearerauth()@apioperation({summary",{"_index":1411,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles",{"_index":1784,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["roles.enum",{"_index":1254,"title":{},"body":{"guards/RolesGuard.html":{}}}],["rolesguard",{"_index":1250,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["router",{"_index":189,"title":{},"body":{"modules/AppModule.html":{}}}],["routes",{"_index":869,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["rt",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{}}}],["rtguard",{"_index":313,"title":{"classes/RtGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/RtGuard.html":{},"coverage.html":{}}}],["rtstrategy",{"_index":347,"title":{"injectables/RtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/RtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["run",{"_index":1812,"title":{},"body":{"index.html":{}}}],["running",{"_index":1809,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":750,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":950,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"interfaces/Response.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{}}}],["salt_rounds",{"_index":1529,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["same",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["sample_image",{"_index":1668,"title":{},"body":{"index.html":{}}}],["scalable",{"_index":1680,"title":{},"body":{"index.html":{}}}],["scale",{"_index":1700,"title":{},"body":{"index.html":{}}}],["schema",{"_index":1689,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":938,"title":{},"body":{"injectables/LoggerService.html":{}}}],["scope.transient",{"_index":939,"title":{},"body":{"injectables/LoggerService.html":{}}}],["secret",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":254,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["secure",{"_index":1728,"title":{},"body":{"index.html":{}}}],["see",{"_index":1674,"title":{},"body":{"index.html":{}}}],["select",{"_index":577,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["sell",{"_index":1921,"title":{},"body":{"license.html":{}}}],["senderid",{"_index":638,"title":{},"body":{"classes/CreateMessageDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["serialize",{"_index":1713,"title":{},"body":{"index.html":{}}}],["serve",{"_index":1750,"title":{},"body":{"index.html":{}}}],["server",{"_index":58,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/MessagesGateway.html":{},"index.html":{}}}],["servestaticmodule.forroot",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["serviceunavailableexception",{"_index":685,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["set",{"_index":880,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setcontact",{"_index":2013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setdescription",{"_index":2010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setglobalprefix",{"_index":882,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["setmetadata('ispublic",{"_index":2034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata('roles",{"_index":2035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprefix",{"_index":921,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setprefix(prefix",{"_index":931,"title":{},"body":{"injectables/LoggerService.html":{}}}],["setting",{"_index":1730,"title":{},"body":{"index.html":{}}}],["settitle('teneno",{"_index":2009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setversion('1.4",{"_index":2018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shall",{"_index":1931,"title":{},"body":{"license.html":{}}}],["sharing",{"_index":1649,"title":{},"body":{"index.html":{}}}],["shopee",{"_index":1854,"title":{},"body":{"index.html":{}}}],["shopping",{"_index":1851,"title":{},"body":{"index.html":{}}}],["short",{"_index":597,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{}}}],["side",{"_index":1681,"title":{},"body":{"index.html":{}}}],["signed",{"_index":1726,"title":{},"body":{"index.html":{}}}],["signin",{"_index":1665,"title":{},"body":{"index.html":{}}}],["signinlocal",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signinlocal(@body",{"_index":331,"title":{},"body":{"controllers/AuthController.html":{}}}],["signinlocal(dto",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signout",{"_index":1666,"title":{},"body":{"index.html":{}}}],["signup",{"_index":1664,"title":{},"body":{"index.html":{}}}],["signupdto",{"_index":284,"title":{"classes/SignupDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignupDto.html":{},"coverage.html":{}}}],["signuplocal",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signuplocal(@body",{"_index":328,"title":{},"body":{"controllers/AuthController.html":{}}}],["signuplocal(dto",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["single",{"_index":1378,"title":{},"body":{"classes/UserProfileDto.html":{},"index.html":{}}}],["single'})@isstring",{"_index":1365,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["singlefielddecorator",{"_index":794,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["singlefielddecorator('./public/avatars",{"_index":804,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator('./public/covers",{"_index":807,"title":{},"body":{"controllers/FileController.html":{}}}],["singlefielddecorator(path",{"_index":1633,"title":{},"body":{"miscellaneous/functions.html":{}}}],["size",{"_index":835,"title":{},"body":{"classes/FilesService.html":{}}}],["skills",{"_index":1659,"title":{},"body":{"index.html":{}}}],["skip",{"_index":1481,"title":{},"body":{"injectables/UsersService.html":{}}}],["snake",{"_index":1873,"title":{},"body":{"index.html":{}}}],["social",{"_index":1790,"title":{},"body":{"index.html":{}}}],["socket",{"_index":981,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["socket.io",{"_index":1007,"title":{},"body":{"classes/MessagesGateway.html":{},"dependencies.html":{}}}],["software",{"_index":1907,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"modules/ConversationsModule.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"modules/FilesModule.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"modules/InterceptorModule.html":{},"injectables/LoggerContextMiddleware.html":{},"classes/LoggerModule.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"modules/MessagesModule.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"classes/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["spa",{"_index":1753,"title":{},"body":{"index.html":{}}}],["special",{"_index":1284,"title":{},"body":{"classes/SignupDto.html":{}}}],["specification",{"_index":877,"title":{},"body":{"interfaces/ISwaggerOptions.html":{}}}],["sponsors",{"_index":1828,"title":{},"body":{"index.html":{}}}],["sport",{"_index":1380,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["src/.../app.middleware.ts",{"_index":1621,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../array",{"_index":1617,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../cors.config.ts",{"_index":1987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../fullname.validator.ts",{"_index":1990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":1988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../hash.ts",{"_index":1986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../logger.decorator.ts",{"_index":1620,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../logger.provider.ts",{"_index":1619,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":1618,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../multi",{"_index":1622,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../password.validator.ts",{"_index":1991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../phonenumber.validator.ts",{"_index":1992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../public.decorator.ts",{"_index":1994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.decorator.ts",{"_index":1995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../roles.enum.ts",{"_index":1601,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../single",{"_index":1623,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../swagger.ts",{"_index":1989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../username.validator.ts",{"_index":1993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:20",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:50",{"_index":135,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":196,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":197,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:9",{"_index":198,"title":{},"body":{"injectables/AppService.html":{}}}],["src/core/configs/cors.config.ts",{"_index":1518,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/configs/interfaces/option.interface.ts",{"_index":860,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"coverage.html":{}}}],["src/core/configs/swagger.ts",{"_index":1525,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/filters/custom.filter.ts",{"_index":673,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"coverage.html":{}}}],["src/core/filters/custom.filter.ts:16",{"_index":734,"title":{},"body":{"classes/ErrorNotFoundException.html":{}}}],["src/core/filters/custom.filter.ts:22",{"_index":737,"title":{},"body":{"classes/ErrorUnauthorizedException.html":{}}}],["src/core/filters/custom.filter.ts:28",{"_index":730,"title":{},"body":{"classes/ErrorForbiddenException.html":{}}}],["src/core/filters/custom.filter.ts:34",{"_index":729,"title":{},"body":{"classes/ErrorBadRequestException.html":{}}}],["src/core/filters/custom.filter.ts:40",{"_index":676,"title":{},"body":{"classes/ErrorAcceptableException.html":{}}}],["src/core/filters/custom.filter.ts:46",{"_index":735,"title":{},"body":{"classes/ErrorRequestTimeoutException.html":{}}}],["src/core/filters/custom.filter.ts:52",{"_index":738,"title":{},"body":{"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["src/core/filters/custom.filter.ts:58",{"_index":732,"title":{},"body":{"classes/ErrorInternalServerException.html":{}}}],["src/core/filters/custom.filter.ts:64",{"_index":733,"title":{},"body":{"classes/ErrorMethodNotAllowedException.html":{}}}],["src/core/filters/custom.filter.ts:70",{"_index":736,"title":{},"body":{"classes/ErrorServiceUnavailableException.html":{}}}],["src/core/filters/custom.filter.ts:77",{"_index":728,"title":{},"body":{"classes/ErrorBadGatewayException.html":{}}}],["src/core/filters/custom.filter.ts:83",{"_index":731,"title":{},"body":{"classes/ErrorGatewayTimeoutException.html":{}}}],["src/core/filters/exception.filter.ts",{"_index":6,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/filters/exception.filter.ts:13",{"_index":20,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:16",{"_index":32,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:25",{"_index":37,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/exception.filter.ts:37",{"_index":40,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["src/core/filters/http.filter.ts",{"_index":850,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/core/filters/http.filter.ts:11",{"_index":851,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/core/helpers/hash",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/core/helpers/hash.ts",{"_index":1528,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/exception.interceptor.ts",{"_index":740,"title":{},"body":{"injectables/ErrorsIntereptor.html":{},"coverage.html":{}}}],["src/core/interceptors/exception.interceptor.ts:13",{"_index":745,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["src/core/interceptors/interceptor.module.ts",{"_index":893,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor",{"_index":896,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/logging.interceptor.ts",{"_index":947,"title":{},"body":{"injectables/LoggingInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/logging.interceptor.ts:12",{"_index":948,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["src/core/interceptors/timeout.interceptor.ts",{"_index":1295,"title":{},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/timeout.interceptor.ts:12",{"_index":1296,"title":{},"body":{"injectables/TimeoutInterceptor.html":{}}}],["src/core/interceptors/transform.interceptor",{"_index":898,"title":{},"body":{"modules/InterceptorModule.html":{}}}],["src/core/interceptors/transform.interceptor.ts",{"_index":1245,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["src/core/interceptors/transform.interceptor.ts:18",{"_index":1298,"title":{},"body":{"injectables/TransformInterceptor.html":{}}}],["src/core/logger/logger.decorator.ts",{"_index":1530,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/logger/logger.module.ts",{"_index":909,"title":{},"body":{"classes/LoggerModule.html":{},"coverage.html":{}}}],["src/core/logger/logger.module.ts:6",{"_index":911,"title":{},"body":{"classes/LoggerModule.html":{}}}],["src/core/logger/logger.provider.ts",{"_index":1532,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/logger/logger.service.ts",{"_index":918,"title":{},"body":{"injectables/LoggerService.html":{},"coverage.html":{}}}],["src/core/logger/logger.service.ts:11",{"_index":930,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:20",{"_index":928,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:24",{"_index":936,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:28",{"_index":925,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:32",{"_index":934,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:5",{"_index":937,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/logger/logger.service.ts:7",{"_index":932,"title":{},"body":{"injectables/LoggerService.html":{}}}],["src/core/middleware/app.middleware.ts",{"_index":1536,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/middleware/logger",{"_index":899,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"coverage.html":{}}}],["src/core/pipes/parse",{"_index":1083,"title":{},"body":{"injectables/ParseIntPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts",{"_index":1498,"title":{},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["src/core/pipes/validation.pipe.ts:13",{"_index":1503,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/pipes/validation.pipe.ts:26",{"_index":1501,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["src/core/roles",{"_index":1433,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/roles/roles.decorator.ts",{"_index":1537,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/roles/roles.enum",{"_index":1434,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/core/roles/roles.enum.ts",{"_index":1602,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/roles/roles.guard.ts",{"_index":1251,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/core/roles/roles.guard.ts:6",{"_index":1252,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/roles/roles.guard.ts:9",{"_index":1253,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/core/validators",{"_index":623,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["src/core/validators/fullname.validator.ts",{"_index":1538,"title":{},"body":{"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/fullname.validator.ts:11",{"_index":1610,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/fullname.validator.ts:15",{"_index":1607,"title":{},"body":{"classes/fullNameValidator.html":{}}}],["src/core/validators/password.validator.ts",{"_index":1539,"title":{},"body":{"coverage.html":{},"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/password.validator.ts:12",{"_index":1967,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/password.validator.ts:16",{"_index":1966,"title":{},"body":{"classes/passwordValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts",{"_index":1540,"title":{},"body":{"coverage.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/phonenumber.validator.ts:11",{"_index":1973,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/phonenumber.validator.ts:15",{"_index":1972,"title":{},"body":{"classes/phoneNumberValidator.html":{}}}],["src/core/validators/username.validator.ts",{"_index":1541,"title":{},"body":{"coverage.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["src/core/validators/username.validator.ts:11",{"_index":1984,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/core/validators/username.validator.ts:15",{"_index":1983,"title":{},"body":{"classes/usenameValidator.html":{}}}],["src/infrastructure/auth/auth.controller.ts",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.controller.ts:53",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:62",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:72",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:82",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.controller.ts:95",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/infrastructure/auth/auth.module",{"_index":1467,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/auth/auth.module.ts",{"_index":348,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/infrastructure/auth/auth.service.ts",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/infrastructure/auth/auth.service.ts:10",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:104",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:116",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:136",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:18",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:44",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:56",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/auth.service.ts:88",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/infrastructure/auth/decorators",{"_index":1430,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/auth/decorators/get",{"_index":1544,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/decorators/public.decorator.ts",{"_index":1547,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/infrastructure/auth/dto",{"_index":1431,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/auth/dto/password.dto.ts",{"_index":1309,"title":{},"body":{"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/password.dto.ts:12",{"_index":1312,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/password.dto.ts:21",{"_index":1314,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/password.dto.ts:30",{"_index":1313,"title":{},"body":{"classes/UpdatePasswordDto.html":{}}}],["src/infrastructure/auth/dto/sigin.dto.ts",{"_index":959,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/sigin.dto.ts:12",{"_index":963,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/infrastructure/auth/dto/sigin.dto.ts:21",{"_index":966,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/infrastructure/auth/dto/signup.dto.ts",{"_index":1274,"title":{},"body":{"classes/SignupDto.html":{},"coverage.html":{}}}],["src/infrastructure/auth/dto/signup.dto.ts:22",{"_index":1275,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/infrastructure/auth/dto/signup.dto.ts:41",{"_index":1286,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/infrastructure/auth/dto/signup.dto.ts:60",{"_index":1288,"title":{},"body":{"classes/SignupDto.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts",{"_index":203,"title":{},"body":{"injectables/AtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:12",{"_index":209,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/at.guard.ts:6",{"_index":206,"title":{},"body":{"injectables/AtGuard.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts",{"_index":1264,"title":{},"body":{"classes/RtGuard.html":{},"coverage.html":{}}}],["src/infrastructure/auth/guards/rt.guard.ts:3",{"_index":1265,"title":{},"body":{"classes/RtGuard.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts",{"_index":234,"title":{},"body":{"injectables/AtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:16",{"_index":242,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/at.strategy.ts:8",{"_index":238,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts",{"_index":1266,"title":{},"body":{"injectables/RtStrategy.html":{},"coverage.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:20",{"_index":1269,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/auth/strategies/rt.strategy.ts:8",{"_index":1267,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts",{"_index":462,"title":{},"body":{"controllers/ConversationsController.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:102",{"_index":507,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:117",{"_index":485,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:132",{"_index":512,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:151",{"_index":491,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:170",{"_index":518,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:62",{"_index":478,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:74",{"_index":498,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.controller.ts:87",{"_index":503,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["src/infrastructure/conversations/conversations.module.ts",{"_index":550,"title":{},"body":{"modules/ConversationsModule.html":{}}}],["src/infrastructure/conversations/conversations.service.ts",{"_index":554,"title":{},"body":{"injectables/ConversationsService.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:103",{"_index":558,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:120",{"_index":563,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:135",{"_index":559,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:16",{"_index":556,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:168",{"_index":564,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:19",{"_index":557,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:34",{"_index":560,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:62",{"_index":561,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/conversations.service.ts:88",{"_index":562,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["src/infrastructure/conversations/dto/create",{"_index":586,"title":{},"body":{"classes/CreateConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/delete",{"_index":653,"title":{},"body":{"classes/DeleteConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/get",{"_index":838,"title":{},"body":{"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/dto/update",{"_index":660,"title":{},"body":{"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts",{"_index":440,"title":{},"body":{"classes/ConversationEntity.html":{},"coverage.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:11",{"_index":455,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:14",{"_index":449,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:17",{"_index":450,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:20",{"_index":459,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:23",{"_index":457,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:26",{"_index":451,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:29",{"_index":448,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:5",{"_index":456,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/conversations/entities/conversation.entity.ts:8",{"_index":458,"title":{},"body":{"classes/ConversationEntity.html":{}}}],["src/infrastructure/files/decorators/array",{"_index":1550,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/decorators/multi",{"_index":1552,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/infrastructure/files/decorators/single",{"_index":1553,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/infrastructure/files/files.controller.ts",{"_index":757,"title":{},"body":{"controllers/FileController.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.controller.ts:49",{"_index":768,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:60",{"_index":773,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:69",{"_index":789,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.controller.ts:89",{"_index":781,"title":{},"body":{"controllers/FileController.html":{}}}],["src/infrastructure/files/files.module.ts",{"_index":824,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/infrastructure/files/files.service.ts",{"_index":826,"title":{},"body":{"classes/FilesService.html":{},"coverage.html":{}}}],["src/infrastructure/files/files.service.ts:12",{"_index":828,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:20",{"_index":830,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:32",{"_index":829,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/files/files.service.ts:4",{"_index":827,"title":{},"body":{"classes/FilesService.html":{}}}],["src/infrastructure/messages/dto/create",{"_index":636,"title":{},"body":{"classes/CreateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/dto/update",{"_index":1303,"title":{},"body":{"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts",{"_index":968,"title":{},"body":{"classes/MessagesGateway.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:15",{"_index":977,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:19",{"_index":989,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:32",{"_index":986,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:37",{"_index":983,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:52",{"_index":996,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:66",{"_index":1000,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.gateway.ts:73",{"_index":992,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["src/infrastructure/messages/messages.module.ts",{"_index":1029,"title":{},"body":{"modules/MessagesModule.html":{}}}],["src/infrastructure/messages/messages.service.ts",{"_index":1031,"title":{},"body":{"injectables/MessagesService.html":{},"coverage.html":{}}}],["src/infrastructure/messages/messages.service.ts:32",{"_index":1038,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:42",{"_index":1035,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:47",{"_index":1037,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:52",{"_index":1034,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:68",{"_index":1040,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:7",{"_index":1049,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/messages/messages.service.ts:81",{"_index":1039,"title":{},"body":{"injectables/MessagesService.html":{}}}],["src/infrastructure/posts/dto/create",{"_index":644,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/delete",{"_index":667,"title":{},"body":{"classes/DeleteOnePost.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/get",{"_index":841,"title":{},"body":{"classes/GetAllPostOfUserDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/dto/update",{"_index":1234,"title":{},"body":{"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/infrastructure/posts/entities/post.entity.ts",{"_index":1096,"title":{},"body":{"classes/Post.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts",{"_index":1098,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.controller.ts:104",{"_index":1114,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:114",{"_index":1128,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:50",{"_index":1111,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:63",{"_index":1117,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:74",{"_index":1120,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:84",{"_index":1123,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.controller.ts:94",{"_index":1132,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/infrastructure/posts/posts.module.ts",{"_index":1161,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/infrastructure/posts/posts.service.ts",{"_index":1163,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/infrastructure/posts/posts.service.ts:125",{"_index":1169,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:133",{"_index":1171,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:156",{"_index":1166,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:17",{"_index":1164,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:182",{"_index":1170,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:19",{"_index":1165,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:54",{"_index":1167,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/posts/posts.service.ts:89",{"_index":1168,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/infrastructure/prisma/prisma.module",{"_index":349,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["src/infrastructure/prisma/prisma.module.ts",{"_index":1210,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/infrastructure/prisma/prisma.service",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts",{"_index":1212,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:13",{"_index":1217,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:25",{"_index":1223,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:29",{"_index":1222,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/prisma/prisma.service.ts:33",{"_index":1220,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/infrastructure/users/dto/get",{"_index":843,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/dto/pagination.dto.ts",{"_index":1073,"title":{},"body":{"classes/PaginationDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/dto/pagination.dto.ts:11",{"_index":1078,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/infrastructure/users/dto/pagination.dto.ts:15",{"_index":1081,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/infrastructure/users/dto/pagination.dto.ts:7",{"_index":1077,"title":{},"body":{"classes/PaginationDto.html":{}}}],["src/infrastructure/users/dto/user",{"_index":1322,"title":{},"body":{"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/dto/users",{"_index":1329,"title":{},"body":{"classes/UserProfileDto.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts",{"_index":1394,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.controller.ts:113",{"_index":1425,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:122",{"_index":1405,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:134",{"_index":1409,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:54",{"_index":1412,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:65",{"_index":1418,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:76",{"_index":1415,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:85",{"_index":1428,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.controller.ts:99",{"_index":1422,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/infrastructure/users/users.module.ts",{"_index":1466,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/infrastructure/users/users.service.ts",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/infrastructure/users/users.service.ts:113",{"_index":1477,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:128",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:149",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:18",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:21",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:47",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:61",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:83",{"_index":1478,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/infrastructure/users/users.service.ts:98",{"_index":1476,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/main.ts",{"_index":1555,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":1805,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1815,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1817,"title":{},"body":{"index.html":{}}}],["started",{"_index":1635,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":1684,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":14,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/LoggerModule.html":{},"index.html":{}}}],["status",{"_index":108,"title":{},"body":{"controllers/AppController.html":{},"classes/HttpExceptionFilter.html":{}}}],["statuscode",{"_index":64,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"classes/HttpExceptionFilter.html":{}}}],["stay",{"_index":1835,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":351,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":247,"title":{},"body":{"injectables/AtStrategy.html":{},"injectables/RtStrategy.html":{}}}],["string",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerService.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":1786,"title":{},"body":{"index.html":{}}}],["studio",{"_index":1802,"title":{},"body":{"index.html":{}}}],["style",{"_index":1852,"title":{},"body":{"index.html":{}}}],["sub",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["subject",{"_index":1926,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":1919,"title":{},"body":{"license.html":{}}}],["subscribemessage",{"_index":1002,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('createmessage",{"_index":982,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('findallmessages",{"_index":985,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('joinconversation",{"_index":988,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('removemessage",{"_index":991,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('typing",{"_index":995,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["subscribemessage('updatemessage",{"_index":999,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["substantial",{"_index":1932,"title":{},"body":{"license.html":{}}}],["success",{"_index":319,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["success'})@apicreatedresponse({description",{"_index":1109,"title":{},"body":{"controllers/PostsController.html":{}}}],["success'})@arrayfielddecorator('files",{"_index":786,"title":{},"body":{"controllers/FileController.html":{}}}],["success'})@multifielddecorator(['undefined",{"_index":778,"title":{},"body":{"controllers/FileController.html":{}}}],["success'})@singlefielddecorator('./public/avatars",{"_index":767,"title":{},"body":{"controllers/FileController.html":{}}}],["success'})@singlefielddecorator('./public/covers",{"_index":772,"title":{},"body":{"controllers/FileController.html":{}}}],["success.'})@apicreatedresponse({description",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{}}}],["success.'})@apicreatedresponse({type",{"_index":477,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["success.'})@apioperation({summary",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["success.'})@httpcode(httpstatus.ok)@apioperation({summary",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfuly",{"_index":1110,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":106,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/FileController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":215,"title":{},"body":{"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"injectables/PrismaService.html":{},"classes/RtGuard.html":{},"injectables/RtStrategy.html":{}}}],["super('bad",{"_index":695,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('forbidden",{"_index":693,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('gateway",{"_index":714,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('internal",{"_index":704,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('method",{"_index":706,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('not",{"_index":689,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('request",{"_index":698,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('service",{"_index":709,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('unauthorized",{"_index":691,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super('unsupported",{"_index":701,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["super.canactivate(context",{"_index":232,"title":{},"body":{"injectables/AtGuard.html":{}}}],["super.debug(message",{"_index":945,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.error(message",{"_index":943,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.log(formattedmessage",{"_index":942,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.verbose(message",{"_index":946,"title":{},"body":{"injectables/LoggerService.html":{}}}],["super.warn(message",{"_index":944,"title":{},"body":{"injectables/LoggerService.html":{}}}],["support",{"_index":1727,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1959,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":867,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["swaggerconfig",{"_index":2007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.createdocument(app",{"_index":2029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggermodule.setup('api",{"_index":2030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["swaggeroptions",{"_index":2031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sync",{"_index":1803,"title":{},"body":{"index.html":{}}}],["t",{"_index":1246,"title":{},"body":{"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{}}}],["table",{"_index":1558,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1557,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":1690,"title":{},"body":{"index.html":{}}}],["take",{"_index":1484,"title":{},"body":{"injectables/UsersService.html":{}}}],["takes",{"_index":1739,"title":{},"body":{"index.html":{}}}],["tap",{"_index":949,"title":{},"body":{"injectables/LoggingInterceptor.html":{}}}],["teneno",{"_index":80,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["terminal",{"_index":1749,"title":{},"body":{"index.html":{}}}],["test",{"_index":1820,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1823,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1822,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1819,"title":{},"body":{"index.html":{}}}],["text",{"_index":639,"title":{},"body":{"classes/CreateMessageDto.html":{},"injectables/MessagesService.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["th",{"_index":217,"title":{},"body":{"injectables/AtGuard.html":{}}}],["thanks",{"_index":1827,"title":{},"body":{"index.html":{}}}],["thinking",{"_index":1662,"title":{},"body":{"index.html":{}}}],["thinks",{"_index":1651,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":1230,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$disconnect",{"_index":1231,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on('beforeexit",{"_index":1232,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":110,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice",{"_index":325,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.logout(userid",{"_index":336,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.refreshtoken(userid",{"_index":340,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signinlocal(dto",{"_index":332,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signuplocal(dto",{"_index":329,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword(dto",{"_index":343,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.configservice.get('access_token_secret",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_at_time",{"_index":385,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('expire_rt_time",{"_index":387,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('refresh_token_secret",{"_index":386,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.conversations",{"_index":1057,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.find((element",{"_index":1050,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversations.foreach((element",{"_index":1060,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.conversationsservice",{"_index":528,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.createconversation(dto",{"_index":530,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteconversationbyid(id",{"_index":539,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.deleteoneadminconversation",{"_index":544,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getallconversations(dto",{"_index":532,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.getconversationbyid(id",{"_index":535,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updateconversationbyid(id",{"_index":537,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updatemembersconversation",{"_index":542,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.conversationsservice.updaterolesconversation",{"_index":546,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["this.fileservice.uploadavatar(file",{"_index":805,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadcover(file",{"_index":809,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadmulti(files",{"_index":821,"title":{},"body":{"controllers/FileController.html":{}}}],["this.fileservice.uploadposts(files",{"_index":812,"title":{},"body":{"controllers/FileController.html":{}}}],["this.findallmessages(message['conversationid",{"_index":1071,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.findallmessages(updatemessagedto['conversationid",{"_index":1067,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getmember(conversationid",{"_index":1055,"title":{},"body":{"injectables/MessagesService.html":{}}}],["this.getonepostbyid(dto.postid",{"_index":1187,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.gettokens(newuser.id",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.gettokens(user.id",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.getusersbyid(userid",{"_index":1492,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.handlemessage(exception",{"_index":54,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.jwtservice.signasync",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(message",{"_index":62,"title":{},"body":{"classes/AllExceptionsFilter.html":{}}}],["this.logger.log('hello",{"_index":202,"title":{},"body":{"injectables/AppService.html":{}}}],["this.messagesservice.createmessage",{"_index":1016,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.findallmessages(conversationid",{"_index":1015,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.getmember",{"_index":1019,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.joinconversation",{"_index":1012,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.remove(message",{"_index":1026,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.messagesservice.updatemessage(updatemessagedto",{"_index":1023,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.postsservice.createpost(dto",{"_index":1139,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(dto",{"_index":1154,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostsofuser(dto",{"_index":1142,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpublicposts(userid",{"_index":1145,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getonepostbyid(postid",{"_index":1148,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.reactionpost(dto",{"_index":1157,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(dto",{"_index":1151,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.prefix",{"_index":940,"title":{},"body":{"injectables/LoggerService.html":{}}}],["this.prismaservice.conversation.create",{"_index":569,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.delete",{"_index":583,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findmany",{"_index":575,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.findunique",{"_index":581,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.conversation.update",{"_index":579,"title":{},"body":{"injectables/ConversationsService.html":{}}}],["this.prismaservice.post.create",{"_index":1175,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.delete",{"_index":1197,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findmany",{"_index":1183,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.findunique",{"_index":1186,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.post.update",{"_index":1192,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.create",{"_index":1205,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.reaction.findmany",{"_index":1199,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.prismaservice.user.count",{"_index":1480,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.create",{"_index":396,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.user.delete",{"_index":1496,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prismaservice.user.findmany",{"_index":1181,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.findunique",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.update",{"_index":391,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.prismaservice.user.updatemany",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prismaservice.userprofile.delete",{"_index":1494,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.reflector.getallandoverride('ispublic",{"_index":229,"title":{},"body":{"injectables/AtGuard.html":{}}}],["this.reflector.getallandoverride('roles",{"_index":1256,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.server.emit('message",{"_index":1017,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.server.emit('refresh",{"_index":1024,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["this.tovalidate(metatype",{"_index":1505,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["this.updaterthash(newuser.id",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.updaterthash(user.id",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice",{"_index":1439,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyemail(userid",{"_index":1459,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuserbyid(userid",{"_index":1462,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers(dto",{"_index":1443,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getusersbyemailandname(dto",{"_index":1448,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getusersbyid(userid",{"_index":1446,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateusersavatar(userid",{"_index":1453,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateuserscover(userid",{"_index":1456,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.updateusersprofile(userid",{"_index":1451,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":881,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["throw",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ParseIntPipe.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["throwerror",{"_index":749,"title":{},"body":{"injectables/ErrorsIntereptor.html":{}}}],["thuong",{"_index":1839,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["thuongtruong1009",{"_index":1842,"title":{},"body":{"index.html":{}}}],["timeout",{"_index":699,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/TimeoutInterceptor.html":{}}}],["timeoutinterceptor",{"_index":1294,"title":{"injectables/TimeoutInterceptor.html":{}},"body":{"injectables/TimeoutInterceptor.html":{},"coverage.html":{}}}],["timestamp",{"_index":855,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["tips",{"_index":1776,"title":{},"body":{"index.html":{}}}],["title",{"_index":648,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{}}}],["together",{"_index":1653,"title":{},"body":{"index.html":{}}}],["token",{"_index":224,"title":{},"body":{"injectables/AtGuard.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["tokens.refreshtoken",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["tools",{"_index":1757,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1953,"title":{},"body":{"license.html":{}}}],["total",{"_index":1479,"title":{},"body":{"injectables/UsersService.html":{}}}],["touch",{"_index":1836,"title":{},"body":{"index.html":{}}}],["tovalidate",{"_index":1499,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["tovalidate(metatype",{"_index":1500,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["trace",{"_index":927,"title":{},"body":{"injectables/LoggerService.html":{}}}],["trading",{"_index":1850,"title":{},"body":{"index.html":{}}}],["training",{"_index":1879,"title":{},"body":{"index.html":{}}}],["tran",{"_index":1837,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["transform",{"_index":1085,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"index.html":{}}}],["transform(value",{"_index":1086,"title":{},"body":{"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{}}}],["transformer",{"_index":1370,"title":{},"body":{"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["transforminterceptor",{"_index":897,"title":{"injectables/TransformInterceptor.html":{}},"body":{"modules/InterceptorModule.html":{},"interfaces/Response.html":{},"injectables/TransformInterceptor.html":{},"coverage.html":{}}}],["travel",{"_index":1381,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["trim",{"_index":1273,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["true",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"injectables/AtGuard.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"controllers/FileController.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/PostsService.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["true})@isstring()@isnotempty()@length(3",{"_index":595,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["truong",{"_index":1840,"title":{},"body":{"index.html":{},"license.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["truy",{"_index":220,"title":{},"body":{"injectables/AtGuard.html":{}}}],["tslint",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":1797,"title":{},"body":{"index.html":{}}}],["tutorial",{"_index":1872,"title":{},"body":{"index.html":{}}}],["twitter",{"_index":1858,"title":{},"body":{"index.html":{}}}],["type",{"_index":24,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AtGuard.html":{},"injectables/AtStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConversationEntity.html":{},"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/CreateConversationDto.html":{},"classes/CreateMessageDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/ErrorsIntereptor.html":{},"controllers/FileController.html":{},"classes/FilesService.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/ISwaggerOptions.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{},"injectables/LoggingInterceptor.html":{},"classes/LoginDto.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/PaginationDto.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/PrismaService.html":{},"classes/ReactionsPost.html":{},"interfaces/Response.html":{},"guards/RolesGuard.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"injectables/TimeoutInterceptor.html":{},"injectables/TransformInterceptor.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateMessageDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{},"coverage.html":{},"classes/fullNameValidator.html":{},"miscellaneous/functions.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"miscellaneous/typealiases.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1981,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1307,"title":{},"body":{"classes/UpdateMessageDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"index.html":{}}}],["types.find((type",{"_index":1511,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["types/passport",{"_index":1569,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1683,"title":{},"body":{"index.html":{},"properties.html":{}}}],["typing",{"_index":973,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["typing(conversationid",{"_index":993,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["ui/ux",{"_index":1881,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":317,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["unavailable",{"_index":710,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["undefined",{"_index":779,"title":{},"body":{"controllers/FileController.html":{},"classes/UserProfileDto.html":{},"miscellaneous/variables.html":{}}}],["undefined})@isarray",{"_index":590,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/UserProfileDto.html":{}}}],["under",{"_index":1896,"title":{},"body":{"index.html":{}}}],["unit",{"_index":1818,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":479,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidationPipe.html":{}}}],["unprocessableentityexception",{"_index":718,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["unsupportedmediatypeexception",{"_index":686,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{}}}],["update",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ConversationsController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["updateconversationbyid",{"_index":469,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationbyid(id",{"_index":504,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updateconversationdto",{"_index":505,"title":{"classes/UpdateConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updated",{"_index":578,"title":{},"body":{"injectables/ConversationsService.html":{},"index.html":{}}}],["updatedat",{"_index":446,"title":{},"body":{"classes/ConversationEntity.html":{},"injectables/UsersService.html":{}}}],["updatemembersconversation",{"_index":470,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversation(conversationid",{"_index":508,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updatemembersconversationdto",{"_index":509,"title":{"classes/UpdateMembersConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updatemessage",{"_index":974,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessage(@messagebody",{"_index":1021,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["updatemessage(updatemessagedto",{"_index":997,"title":{},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{}}}],["updatemessagedto",{"_index":998,"title":{"classes/UpdateMessageDto.html":{}},"body":{"classes/MessagesGateway.html":{},"injectables/MessagesService.html":{},"classes/UpdateMessageDto.html":{},"coverage.html":{}}}],["updatemessagedto['conversationid",{"_index":1061,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['messageid",{"_index":1064,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatemessagedto['text",{"_index":1066,"title":{},"body":{"injectables/MessagesService.html":{}}}],["updatepassword",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassword(@body",{"_index":342,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(dto",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updatepassworddto",{"_index":293,"title":{"classes/UpdatePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePasswordDto.html":{},"coverage.html":{}}}],["updatepost",{"_index":1106,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":1150,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(dto",{"_index":1129,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1130,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/ReactionsPost.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["updaterolesconversation",{"_index":471,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversation(conversationid",{"_index":513,"title":{},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{}}}],["updaterolesconversationdto",{"_index":514,"title":{"classes/UpdateRolesConversationDto.html":{}},"body":{"controllers/ConversationsController.html":{},"injectables/ConversationsService.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"coverage.html":{}}}],["updaterthash",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{}}}],["updaterthash(userid",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateusersavatar",{"_index":1400,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersavatar(userid",{"_index":1419,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover",{"_index":1401,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserscover(@param('userid",{"_index":1455,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserscover(userid",{"_index":1423,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile",{"_index":1402,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateusersprofile(userid",{"_index":1426,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["upload",{"_index":765,"title":{},"body":{"controllers/FileController.html":{},"index.html":{}}}],["uploadavatar",{"_index":758,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadavatar(file",{"_index":762,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcover",{"_index":759,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadcover(@uploadedfile",{"_index":808,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadcover(file",{"_index":769,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadedfile",{"_index":790,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadedfiles",{"_index":791,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadfields",{"_index":1632,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["uploadmulti",{"_index":760,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadmulti(@uploadedfiles",{"_index":820,"title":{},"body":{"controllers/FileController.html":{}}}],["uploadmulti(files",{"_index":774,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts",{"_index":761,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uploadposts(files",{"_index":782,"title":{},"body":{"controllers/FileController.html":{},"classes/FilesService.html":{}}}],["uppercase",{"_index":1282,"title":{},"body":{"classes/SignupDto.html":{}}}],["uprunning",{"_index":1808,"title":{},"body":{"index.html":{}}}],["url",{"_index":1227,"title":{},"body":{"injectables/PrismaService.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["url'})@isstring",{"_index":1324,"title":{},"body":{"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{}}}],["use",{"_index":901,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{},"index.html":{},"license.html":{}}}],["use(req",{"_index":902,"title":{},"body":{"injectables/LoggerContextMiddleware.html":{}}}],["useclass",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/InterceptorModule.html":{}}}],["used",{"_index":887,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"index.html":{}}}],["useguards",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(atguard",{"_index":334,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(rtguard",{"_index":338,"title":{},"body":{"controllers/AuthController.html":{}}}],["usenamevalidator",{"_index":622,"title":{"classes/usenameValidator.html":{}},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{},"coverage.html":{},"classes/usenameValidator.html":{}}}],["user",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/ConversationsController.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"controllers/FileController.html":{},"classes/GetAllConversationDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/PostsController.html":{},"guards/RolesGuard.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user)'})@apiokresponse({description",{"_index":476,"title":{},"body":{"controllers/ConversationsController.html":{},"controllers/PostsController.html":{}}}],["user)'})@apiokresponse({type",{"_index":496,"title":{},"body":{"controllers/ConversationsController.html":{}}}],["user)'})@httpcode(httpstatus.ok)@apiokresponse({description",{"_index":777,"title":{},"body":{"controllers/FileController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1546,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts",{"_index":844,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{},"coverage.html":{}}}],["user.dto.ts:5",{"_index":845,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{}}}],["user.dto.ts:6",{"_index":846,"title":{},"body":{"classes/GetUserProfileByEmailNameDto.html":{}}}],["user.email",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.hashedrefreshtoken",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.length",{"_index":1488,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.roles",{"_index":1263,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.roles.some((role",{"_index":1260,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user01",{"_index":630,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["user02",{"_index":631,"title":{},"body":{"classes/CreateConversationDto.html":{}}}],["useravatardto",{"_index":1321,"title":{"classes/UserAvatarDto.html":{}},"body":{"classes/UserAvatarDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["usercoverdto",{"_index":1326,"title":{"classes/UserCoverDto.html":{}},"body":{"classes/UserCoverDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userid",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/DeleteConversationDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdateRolesConversationDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":398,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserProfileByEmailNameDto.html":{},"classes/SignupDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/usenameValidator.html":{}}}],["username123",{"_index":1293,"title":{},"body":{"classes/SignupDto.html":{}}}],["username123'})@isstring()@isnotempty()@isalphanumeric()@length(3",{"_index":1287,"title":{},"body":{"classes/SignupDto.html":{}}}],["userprofiledto",{"_index":847,"title":{"classes/UserProfileDto.html":{}},"body":{"classes/GetUserProfileByEmailNameDto.html":{},"classes/UserProfileDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["users.controller",{"_index":1468,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1436,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":552,"title":{},"body":{"modules/ConversationsModule.html":{},"modules/PostsModule.html":{}}}],["userscontroller",{"_index":1393,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":125,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConversationsModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":1435,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":567,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["v",{"_index":225,"title":{},"body":{"injectables/AtGuard.html":{}}}],["v4",{"_index":566,"title":{},"body":{"injectables/ConversationsService.html":{},"injectables/MessagesService.html":{}}}],["val",{"_index":1091,"title":{},"body":{"injectables/ParseIntPipe.html":{}}}],["valid",{"_index":2025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":235,"title":{},"body":{"injectables/AtStrategy.html":{},"classes/CreateConversationDto.html":{},"injectables/RtStrategy.html":{},"classes/SignupDto.html":{},"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(fullnamevalidator",{"_index":1377,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["validate(object",{"_index":1509,"title":{},"body":{"injectables/ValidationPipe.html":{}}}],["validate(passwordvalidator",{"_index":1292,"title":{},"body":{"classes/SignupDto.html":{}}}],["validate(payload",{"_index":240,"title":{},"body":{"injectables/AtStrategy.html":{}}}],["validate(phonenumbervalidator",{"_index":1385,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["validate(req",{"_index":1268,"title":{},"body":{"injectables/RtStrategy.html":{}}}],["validate(text",{"_index":1609,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validate(usenamevalidator",{"_index":628,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/SignupDto.html":{}}}],["validation",{"_index":1709,"title":{},"body":{"index.html":{}}}],["validationarguments",{"_index":1606,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validationpipe",{"_index":1497,"title":{"injectables/ValidationPipe.html":{}},"body":{"injectables/ValidationPipe.html":{},"coverage.html":{}}}],["validator",{"_index":620,"title":{},"body":{"classes/CreateConversationDto.html":{},"classes/CreatePostDto.html":{},"classes/DeleteOneAdminConversationDto.html":{},"classes/DeleteOnePost.html":{},"classes/GetAllConversationDto.html":{},"classes/GetAllPostOfUserDto.html":{},"classes/GetOneConversationDto.html":{},"classes/LoginDto.html":{},"classes/PaginationDto.html":{},"classes/ReactionsPost.html":{},"classes/SignupDto.html":{},"classes/UpdateConversationDto.html":{},"classes/UpdateMembersConversationDto.html":{},"classes/UpdatePasswordDto.html":{},"classes/UpdatePostDto.html":{},"classes/UpdateRolesConversationDto.html":{},"classes/UserAvatarDto.html":{},"classes/UserCoverDto.html":{},"classes/UserProfileDto.html":{},"injectables/ValidationPipe.html":{},"dependencies.html":{},"classes/fullNameValidator.html":{},"index.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraint",{"_index":1611,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["validatorconstraintinterface",{"_index":1603,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/passwordValidator.html":{},"classes/phoneNumberValidator.html":{},"classes/usenameValidator.html":{}}}],["value",{"_index":884,"title":{},"body":{"interfaces/ISwaggerOptions.html":{},"injectables/MessagesService.html":{},"injectables/ParseIntPipe.html":{},"injectables/ValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1519,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1985,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["various",{"_index":1692,"title":{},"body":{"index.html":{}}}],["verbose",{"_index":922,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verbose(message",{"_index":933,"title":{},"body":{"injectables/LoggerService.html":{}}}],["verify",{"_index":1705,"title":{},"body":{"index.html":{}}}],["versa",{"_index":1712,"title":{},"body":{"index.html":{}}}],["version",{"_index":1976,"title":{},"body":{"properties.html":{}}}],["view",{"_index":2012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":35,"title":{},"body":{"classes/AllExceptionsFilter.html":{},"modules/AppModule.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoggerContextMiddleware.html":{},"injectables/LoggerService.html":{}}}],["vue",{"_index":1864,"title":{},"body":{"index.html":{}}}],["warn",{"_index":923,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warn(message",{"_index":935,"title":{},"body":{"injectables/LoggerService.html":{}}}],["warranties",{"_index":1938,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1934,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1813,"title":{},"body":{"index.html":{}}}],["web",{"_index":1867,"title":{},"body":{"index.html":{}}}],["webapp",{"_index":1645,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["websocketgateway",{"_index":1001,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["websocketserver",{"_index":978,"title":{},"body":{"classes/MessagesGateway.html":{}}}],["whether",{"_index":1950,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":1522,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":1910,"title":{},"body":{"license.html":{}}}],["world",{"_index":88,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/MessagesService.html":{}}}],["writtenposts",{"_index":1182,"title":{},"body":{"injectables/PostsService.html":{}}}],["x",{"_index":1769,"title":{},"body":{"index.html":{}}}],["years",{"_index":1339,"title":{},"body":{"classes/UserProfileDto.html":{}}}],["yes",{"_index":677,"title":{},"body":{"classes/ErrorAcceptableException.html":{},"classes/ErrorBadGatewayException.html":{},"classes/ErrorBadRequestException.html":{},"classes/ErrorForbiddenException.html":{},"classes/ErrorGatewayTimeoutException.html":{},"classes/ErrorInternalServerException.html":{},"classes/ErrorMethodNotAllowedException.html":{},"classes/ErrorNotFoundException.html":{},"classes/ErrorRequestTimeoutException.html":{},"classes/ErrorServiceUnavailableException.html":{},"classes/ErrorUnauthorizedException.html":{},"classes/ErrorUnsupportedMediaTypeException.html":{},"injectables/LoggerService.html":{}}}],["you'd",{"_index":1831,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":1971,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":1968,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":1969,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["z]\\w",{"_index":1612,"title":{},"body":{"classes/fullNameValidator.html":{},"classes/usenameValidator.html":{},"miscellaneous/variables.html":{}}}],["za",{"_index":1970,"title":{},"body":{"classes/passwordValidator.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":126,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConversationsModule.html":{},"modules/FilesModule.html":{},"modules/MessagesModule.html":{},"modules/PostsModule.html":{},"modules/PrismaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AllExceptionsFilter.html":{"url":"classes/AllExceptionsFilter.html","title":"class - AllExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/exception.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                            \n                                    Private\n                                handleMessage\n                            \n                            \n                                    Private\n                                    Static\n                                handleResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/exception.filter.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException | Error, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        handleMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleMessage(exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        handleResponse\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleResponse(response: Response, exception: HttpException | Error)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/exception.filter.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    exception\n                                    \n                                            HttpException | Error\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        message: exception.stack,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Teneno homepage'})@ApiResponse({status: 200, description: '{code: 1, data: {Hello world}, message: \"\"'})@ApiResponse({status: 404, description: 'Not found'})\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, HttpCode, HttpStatus } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\nimport { Public } from './infrastructure/auth/decorators';\n\n@ApiTags('Home')\n@Controller('/')\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Public()\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Teneno homepage' })\n  @ApiResponse({\n    status: 200,\n    description: '{code: 1, data: {Hello world}, message: \"\"',\n  })\n  @ApiResponse({ status: 404, description: 'Not found' })\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            ConversationsModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            InterceptorModule\n                        \n                        \n                            MessagesModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        configure\n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './infrastructure/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middleware/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\n\n@Module({\n  imports: [\n    InterceptorModule,\n    AuthModule,\n    PrismaModule,\n    UsersModule,\n    FilesModule,\n    PostsModule,\n    ConversationsModule,\n    MessagesModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      // envFilePath: ['.env'],\n    }),\n    LoggerModule.forRoot(),\n    // ServeStaticModule.forRoot({\n    //   rootPath: `${__dirname}/../public`,\n    //   renderPath: '/',\n    //   exclude: ['/api*'],\n    // }),\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n    {\n      provide: APP_GUARD,\n      useClass: AtGuard,\n    },\n  ],\n})\nexport class AppModule implements NestModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    consumer.apply(LoggerContextMiddleware).forRoutes('*');\n    //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n    //   .forRoutes(UsersController);\n    // .forRoutes('users');\n    // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n    // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: LoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/app.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                        LoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\nexport class AppService {\n  constructor(@Logger('AppService') private logger: LoggerService) {}\n\n  getHello(): string {\n    this.logger.log('Hello World', '200');\n    return 'Hello World from Teneno!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtGuard.html":{"url":"injectables/AtGuard.html","title":"injectable - AtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/at.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/at.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                    \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/guards/at.guard.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AtGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  // nếu true thì cho phép truy cập bằng access-token , và ngược lại\n  public canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) return true;\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AtStrategy.html":{"url":"injectables/AtStrategy.html","title":"injectable - AtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/at.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/at.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: IJwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/at.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IJwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IJwtPayload\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { IJwtPayload } from '../interfaces';\n\n@Injectable()\nexport class AtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  validate(payload: IJwtPayload): IJwtPayload {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')@ApiBearerAuth()@UseGuards(AtGuard)@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success.'})@ApiOperation({summary: 'Logout user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('refresh')@ApiBearerAuth()@UseGuards(RtGuard)@ApiOkResponse({description: 'Success.'})@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Logout account on all devices (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signin')@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success.'})@ApiOperation({summary: 'Login to user account (user)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('signup')@ApiOperation({summary: 'Create new user account'})@HttpCode(HttpStatus.CREATED)@ApiOkResponse({description: 'Success.'})@ApiCreatedResponse({description: 'The new account has been created.', type: SignupDto})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('password')@ApiBearerAuth()@UseGuards(AtGuard)@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success.'})@ApiOperation({summary: 'Update user password (all)'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/auth/auth.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { GetCurrentUser, GetCurrentUserId, Public } from './decorators';\nimport { AtGuard, RtGuard } from './guards';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto';\nimport { ITokens } from './interfaces';\n\n@ApiTags('Auth')\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden.' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiOkResponse({ description: 'Success.' })\n@ApiNotAcceptableResponse({\n  description: 'Provided fields are not in correct form.',\n})\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {\n    this.authService = authService;\n  }\n\n  @Public()\n  @Post('signup')\n  @ApiOperation({ summary: 'Create new user account' })\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiCreatedResponse({\n    description: 'The new account has been created.',\n    type: SignupDto,\n  })\n  async signupLocal(@Body() dto: SignupDto): Promise {\n    return this.authService.signupLocal(dto);\n  }\n\n  @Public()\n  @Post('signin')\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiOperation({ summary: 'Login to user account (user)' })\n  async signinLocal(@Body() dto: LoginDto): Promise {\n    return this.authService.signinLocal(dto);\n  }\n\n  @Post('logout')\n  @ApiBearerAuth()\n  @UseGuards(AtGuard)\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiOperation({ summary: 'Logout user account (user)' })\n  async logout(@GetCurrentUserId() userId: string): Promise {\n    return this.authService.logout(userId);\n  }\n\n  @Post('refresh')\n  @ApiBearerAuth()\n  @UseGuards(RtGuard)\n  @ApiOkResponse({ description: 'Success.' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Logout account on all devices (user)' })\n  async refreshToken(\n    @GetCurrentUserId() userId: string,\n    @GetCurrentUser('refreshToken') refreshToken: string,\n  ): Promise {\n    return this.authService.refreshToken(userId, refreshToken);\n  }\n\n  @Put('password')\n  @ApiBearerAuth()\n  @UseGuards(AtGuard)\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success.' })\n  @ApiOperation({ summary: 'Update user password (all)' })\n  async updatePassWord(@Body() dto: UpdatePasswordDto): Promise {\n    return this.authService.updatePassWord(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AtStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            RtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [PrismaModule, JwtModule],\n  controllers: [AuthController],\n  providers: [AuthService, AtStrategy, RtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getTokens\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                refreshToken\n                            \n                            \n                                    Async\n                                signinLocal\n                            \n                            \n                                    Async\n                                signupLocal\n                            \n                            \n                                    Async\n                                updatePassWord\n                            \n                            \n                                    Async\n                                updateRtHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, prismaService: PrismaService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getTokens\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTokens(userId: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        refreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    refreshToken(userId: string, refreshToken: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signinLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signinLocal(dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signupLocal\n                        \n                    \n                \n            \n            \n                \n                    \n                    signupLocal(dto: SignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                SignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassWord\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassWord(dto: UpdatePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRtHash\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRtHash(userId: string, rt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/auth.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    rt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ForbiddenException, Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport { ITokens } from './interfaces';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { comparePassword, hashPassword } from 'src/core/helpers/hash';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(ConfigService)\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getTokens(userId: string, email: string): Promise {\n    const [at, rt] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get('ACCESS_TOKEN_SECRET'),\n          expiresIn: this.configService.get('EXPIRE_AT_TIME'),\n        },\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get('REFRESH_TOKEN_SECRET'),\n          expiresIn: this.configService.get('EXPIRE_RT_TIME'),\n        },\n      ),\n    ]);\n    return { accessToken: at, refreshToken: rt };\n  }\n\n  async updateRtHash(userId: string, rt: string) {\n    const hash = await hashPassword(rt);\n    await this.prismaService.user.update({\n      where: {\n        id: userId,\n      },\n      data: {\n        hashedRefreshToken: hash,\n      },\n    });\n  }\n\n  async signupLocal(dto: SignupDto): Promise {\n    const hash = await hashPassword(dto.password);\n\n    const newUser = await this.prismaService.user.create({\n      data: {\n        email: dto.email,\n        password: hash,\n        username: dto.username,\n        profile: {\n          create: {\n            fullName: '',\n            birthdate: new Date(),\n            avatar: '',\n            cover: '',\n            marriageStatus: '',\n            interests: [],\n            bio: '',\n            address: '',\n            phone: '',\n            age: 0,\n            gender: 0,\n          },\n        },\n        role: ['USER'],\n      },\n    });\n\n    const tokens = await this.getTokens(newUser.id, newUser.email);\n    await this.updateRtHash(newUser.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async signinLocal(dto: LoginDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n    if (!user) throw new ForbiddenException('Access denied');\n\n    const passwordMatches = await comparePassword(dto.password, user.password);\n    if (!passwordMatches) throw new ForbiddenException('Access denied');\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async logout(userId: string): Promise {\n    await this.prismaService.user.updateMany({\n      where: {\n        id: userId,\n        hashedRefreshToken: {\n          not: null,\n        },\n      },\n      data: { hashedRefreshToken: null },\n    });\n  }\n\n  async refreshToken(userId: string, refreshToken: string): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n    if (!user || !user.hashedRefreshToken)\n      throw new ForbiddenException('Access denied');\n\n    const hashMatches = await comparePassword(\n      refreshToken,\n      user.hashedRefreshToken,\n    );\n    if (!hashMatches) throw new ForbiddenException('Access denied');\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async updatePassWord(dto: UpdatePasswordDto): Promise {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n\n    const passwordMatches = await comparePassword(\n      dto.oldPassword,\n      user.password,\n    );\n\n    if (!passwordMatches) throw new ForbiddenException('Access denied');\n\n    if (dto.newPassword === dto.oldPassword)\n      throw new ForbiddenException(\n        'New password must be different from old password',\n      );\n\n    if (passwordMatches) {\n      await this.prismaService.user.update({\n        where: { email: dto.email },\n        data: {\n          password: await hashPassword(dto.newPassword),\n        },\n      });\n    }\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConversationEntity.html":{"url":"classes/ConversationEntity.html","title":"class - ConversationEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConversationEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/entities/conversation.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                avatar\n                            \n                            \n                                createdAt\n                            \n                            \n                                creator\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/entities/conversation.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ConversationEntity {\n  @ApiProperty()\n  id: string;\n\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty({ required: false, nullable: true })\n  description: string | null;\n\n  @ApiProperty()\n  avatar: string;\n\n  @ApiProperty()\n  createdAt: Date;\n\n  @ApiProperty()\n  updatedAt: Date;\n\n  @ApiProperty()\n  members: string[];\n\n  @ApiProperty()\n  creator: string;\n\n  @ApiProperty()\n  admins: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ConversationsController.html":{"url":"controllers/ConversationsController.html","title":"controller - ConversationsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ConversationsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                conversations\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Create a new conversation (user)'})@ApiOkResponse({description: 'Success.'})@ApiCreatedResponse({type: ConversationEntity, description: 'The new conversation has been created.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one conversation by creator-conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/deleteAdmins')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Delete one admin of current conversation by creator-conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all conversations of current user (user)'})@ApiOkResponse({type: ConversationEntity, isArray: true, description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get one conversation information of current user (user)'})@ApiOkResponse({type: ConversationEntity, description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update one conversation information of current user (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateMembers')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Update members list of current conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:132\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':conversationId/updateRoles')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Change role of any member of current conversation by creator-conversation (user)'})@ApiOkResponse({description: 'Success.'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.controller.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { ConversationsService } from './conversations.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { ConversationEntity } from './entities';\n\n@ApiTags('Conversations')\n@ApiBearerAuth()\n@ApiForbiddenResponse({ description: 'Forbidden.' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n})\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('conversations')\n// https://www.youtube.com/watch?v=LMjj1_EK4y8&ab_channel=Prisma\nexport class ConversationsController {\n  constructor(private conversationsService: ConversationsService) {\n    this.conversationsService = conversationsService;\n  }\n\n  @Post()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Create a new conversation (user)' })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  @ApiCreatedResponse({\n    type: ConversationEntity,\n    description: 'The new conversation has been created.',\n  })\n  async createConversation(@Body() dto: CreateConversationDto) {\n    return await this.conversationsService.createConversation(dto);\n  }\n\n  @Get()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all conversations of current user (user)' })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    isArray: true,\n    description: 'Success.',\n  })\n  async getAllConversations(@Body() dto: GetAllConversationDto) {\n    return this.conversationsService.getAllConversations(dto);\n  }\n\n  @Get(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    type: ConversationEntity,\n    description: 'Success.',\n  })\n  async getConversationById(\n    @Param('id') id: string,\n    @Body() dto: GetOneConversationDto,\n  ) {\n    return this.conversationsService.getConversationById(id, dto);\n  }\n\n  @Patch(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update one conversation information of current user (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  updateConversationById(\n    @Param('id') id: string,\n    @Body() dto: UpdateConversationDto,\n  ) {\n    return this.conversationsService.updateConversationById(id, dto);\n  }\n\n  @Delete(':id')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Delete one conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async deleteConversationById(\n    @Param('id') id: string,\n    @Body() dto: DeleteConversationDto,\n  ) {\n    return this.conversationsService.deleteConversationById(id, dto);\n  }\n\n  @Patch(':conversationId/updateMembers')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Update members list of current conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async updateMembersConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateMembersConversationDto,\n  ) {\n    return this.conversationsService.updateMembersConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/deleteAdmins')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Delete one admin of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async deleteOneAdminConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: DeleteOneAdminConversationDto,\n  ) {\n    return this.conversationsService.deleteOneAdminConversation(\n      conversationId,\n      dto,\n    );\n  }\n\n  @Patch(':conversationId/updateRoles')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary:\n      'Change role of any member of current conversation by creator-conversation (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success.',\n  })\n  async updateRolesConversation(\n    @Param('conversationId') conversationId: string,\n    @Body() dto: UpdateRolesConversationDto,\n  ) {\n    return this.conversationsService.updateRolesConversation(\n      conversationId,\n      dto,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConversationsModule.html":{"url":"modules/ConversationsModule.html","title":"module - ConversationsModule","body":"\n                   \n\n\n\n\n    Modules\n    ConversationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_imports\n\n\n\ncluster_ConversationsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nConversationsModule\n\nConversationsModule\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ConversationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ConversationsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConversationsService } from './conversations.service';\nimport { ConversationsController } from './conversations.controller';\nimport { UsersModule } from '../users/users.module';\nimport { PrismaModule } from '../prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [ConversationsController],\n  providers: [ConversationsService],\n})\nexport class ConversationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConversationsService.html":{"url":"injectables/ConversationsService.html","title":"injectable - ConversationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConversationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/conversations.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createConversation\n                            \n                            \n                                    Async\n                                deleteConversationById\n                            \n                            \n                                    Async\n                                deleteOneAdminConversation\n                            \n                            \n                                    Async\n                                getAllConversations\n                            \n                            \n                                    Async\n                                getConversationById\n                            \n                            \n                                updateConversationById\n                            \n                            \n                                    Async\n                                updateMembersConversation\n                            \n                            \n                                    Async\n                                updateRolesConversation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/conversations/conversations.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    createConversation(dto: CreateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteConversationById(id: string, dto: DeleteConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:103\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteOneAdminConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOneAdminConversation(conversationId: string, dto: DeleteOneAdminConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:135\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                DeleteOneAdminConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllConversations\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllConversations(dto: GetAllConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getConversationById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getConversationById(id: string, dto: GetOneConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                GetOneConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateConversationById\n                        \n                    \n                \n            \n            \n                \nupdateConversationById(id: string, dto: UpdateConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateMembersConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMembersConversation(conversationId: string, dto: UpdateMembersConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:120\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateMembersConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRolesConversation\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRolesConversation(conversationId: string, dto: UpdateRolesConversationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/conversations/conversations.service.ts:168\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UpdateRolesConversationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreateConversationDto,\n  DeleteConversationDto,\n  DeleteOneAdminConversationDto,\n  GetAllConversationDto,\n  GetOneConversationDto,\n  UpdateConversationDto,\n  UpdateMembersConversationDto,\n  UpdateRolesConversationDto,\n} from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class ConversationsService {\n  constructor(private prismaService: PrismaService) {}\n\n  async createConversation(dto: CreateConversationDto) {\n    const newConversation = await this.prismaService.conversation.create({\n      data: {\n        id: uuid(),\n        name: dto.name,\n        description: dto.description,\n        avatar: '',\n        members: dto.members,\n        admins: dto.admins,\n        creator: dto.creator,\n      },\n    });\n    return newConversation;\n  }\n\n  async getAllConversations(dto: GetAllConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n      },\n      select: {\n        id: true,\n        name: true,\n        avatar: true,\n      },\n    });\n    return list;\n  }\n\n  async getConversationById(id: string, dto: GetOneConversationDto) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.userId,\n          },\n          {\n            admins: {\n              has: dto.userId,\n            },\n          },\n          {\n            members: {\n              has: dto.userId,\n            },\n          },\n        ],\n        AND: {\n          id: id,\n        },\n      },\n    });\n    return list;\n  }\n\n  updateConversationById(id: string, dto: UpdateConversationDto) {\n    const updated = this.prismaService.conversation.update({\n      where: {\n        id: id,\n      },\n      data: {\n        name: dto.name,\n        description: dto.description,\n        avatar: dto.avatar,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteConversationById(id: string, dto: DeleteConversationDto) {\n    const list = await this.prismaService.conversation.findUnique({\n      where: {\n        id: id,\n      },\n    });\n    if (list['creator'] === dto.userId) {\n      await this.prismaService.conversation.delete({\n        where: {\n          id: id,\n        },\n      });\n      return '';\n    }\n    return false;\n  }\n\n  async updateMembersConversation(\n    conversationId: string,\n    dto: UpdateMembersConversationDto,\n  ) {\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n\n  async deleteOneAdminConversation(\n    conversationId: string,\n    dto: DeleteOneAdminConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n\n    if (list.length === 0) {\n      return 'You not creator of this conversation';\n    }\n    const updated = list[0]['admins'].filter((admin) => admin !== dto.userId);\n\n    await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: updated,\n      },\n    });\n    return updated;\n  }\n\n  async updateRolesConversation(\n    conversationId: string,\n    dto: UpdateRolesConversationDto,\n  ) {\n    const list = await this.prismaService.conversation.findMany({\n      where: {\n        OR: [\n          {\n            creator: dto.creator,\n          },\n        ],\n        AND: {\n          id: conversationId,\n        },\n      },\n    });\n    if (list.length === 0) {\n      return 'You not creator of this conversation';\n    }\n\n    const updated = await this.prismaService.conversation.update({\n      where: {\n        id: conversationId,\n      },\n      data: {\n        admins: dto.admins,\n        members: dto.members,\n      },\n    });\n    return updated;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateConversationDto.html":{"url":"classes/CreateConversationDto.html","title":"class - CreateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/create-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'creator01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01', required: false, nullable: true})@IsString()@IsNotEmpty()@Length(3, 120)@MinLength(2, {message: 'Description is too short, must be at least 3 characters!'})@MaxLength(121, {message: 'Description is too long, must be at most 120 characters!'})@Validate(usenameValidator, {message: 'Description must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'group01'})@IsString()@IsNotEmpty()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/create-conversation.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class CreateConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Name must be not begin with number!',\n  })\n  name: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'group01',\n    required: false,\n    nullable: true,\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 120)\n  @MinLength(2, {\n    message: 'Description is too short, must be at least 3 characters!',\n  })\n  @MaxLength(121, {\n    message: 'Description is too long, must be at most 120 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Description must be not begin with number!',\n  })\n  description?: string;\n\n  @ApiProperty({\n    type: String,\n    example: ['user01', 'user02'],\n  })\n  @IsArray()\n  members: string[];\n\n  @ApiProperty({\n    type: String,\n    example: ['admin01', 'admin02'],\n  })\n  @IsArray()\n  admins: string[];\n\n  @ApiProperty({\n    type: String,\n    example: 'creator01',\n  })\n  @IsString()\n  creator: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMessageDto.html":{"url":"classes/CreateMessageDto.html","title":"class - CreateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/create-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                senderId\n                            \n                            \n                                text\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        senderId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/create-message.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateMessageDto {\n  id: string;\n  senderId: string;\n  text: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                description\n                            \n                            \n                                files\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/create-post.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/create-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/create-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/create-post.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString()\n  title: string;\n\n  @IsString()\n  description: string;\n\n  @IsArray()\n  files: string[];\n\n  @IsString()\n  authorId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteConversationDto.html":{"url":"classes/DeleteConversationDto.html","title":"class - DeleteConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/delete-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetAllConversationDto } from './get-conversation.dto';\n\nexport class DeleteConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOneAdminConversationDto.html":{"url":"classes/DeleteOneAdminConversationDto.html","title":"class - DeleteOneAdminConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOneAdminConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creator\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DeleteOnePost.html":{"url":"classes/DeleteOnePost.html","title":"class - DeleteOnePost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DeleteOnePost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/delete-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/delete-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/delete-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class DeleteOnePost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  authorId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorAcceptableException.html":{"url":"classes/ErrorAcceptableException.html","title":"class - ErrorAcceptableException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorAcceptableException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotAcceptableException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorBadGatewayException.html":{"url":"classes/ErrorBadGatewayException.html","title":"class - ErrorBadGatewayException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorBadGatewayException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BadGatewayException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:77\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorBadRequestException.html":{"url":"classes/ErrorBadRequestException.html","title":"class - ErrorBadRequestException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorBadRequestException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorForbiddenException.html":{"url":"classes/ErrorForbiddenException.html","title":"class - ErrorForbiddenException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorForbiddenException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ForbiddenException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorGatewayTimeoutException.html":{"url":"classes/ErrorGatewayTimeoutException.html","title":"class - ErrorGatewayTimeoutException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorGatewayTimeoutException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    GatewayTimeoutException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:83\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorInternalServerException.html":{"url":"classes/ErrorInternalServerException.html","title":"class - ErrorInternalServerException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorInternalServerException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    InternalServerErrorException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:58\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorMethodNotAllowedException.html":{"url":"classes/ErrorMethodNotAllowedException.html","title":"class - ErrorMethodNotAllowedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorMethodNotAllowedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    MethodNotAllowedException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:64\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorNotFoundException.html":{"url":"classes/ErrorNotFoundException.html","title":"class - ErrorNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorRequestTimeoutException.html":{"url":"classes/ErrorRequestTimeoutException.html","title":"class - ErrorRequestTimeoutException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorRequestTimeoutException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    RequestTimeoutException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:46\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorServiceUnavailableException.html":{"url":"classes/ErrorServiceUnavailableException.html","title":"class - ErrorServiceUnavailableException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorServiceUnavailableException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ServiceUnavailableException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:70\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorUnauthorizedException.html":{"url":"classes/ErrorUnauthorizedException.html","title":"class - ErrorUnauthorizedException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorUnauthorizedException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    ForbiddenException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorUnsupportedMediaTypeException.html":{"url":"classes/ErrorUnsupportedMediaTypeException.html","title":"class - ErrorUnsupportedMediaTypeException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorUnsupportedMediaTypeException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/custom.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    UnsupportedMediaTypeException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(error?: string)\n                    \n                \n                        \n                            \n                                Defined in src/core/filters/custom.filter.ts:52\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        error\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ErrorsIntereptor.html":{"url":"injectables/ErrorsIntereptor.html","title":"injectable - ErrorsIntereptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ErrorsIntereptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/exception.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/exception.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { catchError, Observable, throwError } from 'rxjs';\n\n@Injectable()\nexport class ErrorsIntereptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next\n      .handle()\n      .pipe(\n        catchError((err) =>\n          throwError(\n            () => new HttpException('New message', HttpStatus.BAD_GATEWAY),\n          ),\n        ),\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FileController.html":{"url":"controllers/FileController.html","title":"controller - FileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                files\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Upload avatar file form data (all)'})@ApiOkResponse({description: 'Success'})@SingleFieldDecorator('./public/avatars')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('cover')@ApiOperation({summary: 'Upload cover file form data (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})@SingleFieldDecorator('./public/covers')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('multi')@ApiOperation({summary: 'Upload multi fields form data (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})@MultiFieldDecorator(['undefined', 'undefined', 'undefined', 'undefined', 'undefined'], './public/multi')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('posts')@ApiOperation({summary: 'Upload post with multi images (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})@ArrayFieldDecorator('files', undefined, 10, './public/posts')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/files/files.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UploadedFile,\n  UploadedFiles,\n} from '@nestjs/common';\nimport {} from '@nestjs/platform-express';\nimport {\n  ApiBearerAuth,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Express } from 'express';\nimport {\n  ArrayFieldDecorator,\n  SingleFieldDecorator,\n  MultiFieldDecorator,\n} from './decorators';\nimport { FilesService } from './files.service';\nimport { IArrayFile, ISingleFile } from './interfaces';\n\n@ApiTags('Files')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({\n  description: 'Not Found.',\n  type: Error,\n})\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('files')\nexport class FileController {\n  constructor(private readonly fileService: FilesService) {}\n\n  @Post('avatar')\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Upload avatar file form data (all)' })\n  @ApiOkResponse({ description: 'Success' })\n  @SingleFieldDecorator('./public/avatars')\n  async uploadAvatar(\n    @UploadedFile() file: Express.Multer.File,\n  ): Promise {\n    return this.fileService.uploadAvatar(file);\n  }\n\n  @Post('cover')\n  @ApiOperation({ summary: 'Upload cover file form data (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  @SingleFieldDecorator('./public/covers')\n  async uploadCover(@UploadedFile() file: Express.Multer.File): Promise {\n    return this.fileService.uploadCover(file);\n  }\n\n  @Post('posts')\n  @ApiOperation({ summary: 'Upload post with multi images (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  @ArrayFieldDecorator('files', true, 10, './public/posts')\n  async uploadPosts(\n    @UploadedFiles() files: Array,\n  ): Promise {\n    return this.fileService.uploadPosts(files);\n  }\n\n  @Post('multi')\n  @ApiOperation({ summary: 'Upload multi fields form data (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  @MultiFieldDecorator(\n    [\n      { name: 'item_1', maxCount: 1, required: true },\n      { name: 'item_2', maxCount: 1 },\n      { name: 'item_3', maxCount: 1 },\n      { name: 'item_4', maxCount: 1 },\n      { name: 'item_5', maxCount: 1 },\n    ],\n    './public/multi',\n  )\n  async uploadMulti(@UploadedFiles() files: Express.Multer.File[]): Promise {\n    return this.fileService.uploadMulti(files);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/files/files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            FileController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FileController } from './files.controller';\nimport { FilesService } from './files.service';\n\n@Module({\n  imports: [FilesService],\n  controllers: [FileController],\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FilesService.html":{"url":"classes/FilesService.html","title":"class - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/files/files.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                uploadAvatar\n                            \n                            \n                                    Async\n                                uploadCover\n                            \n                            \n                                    Async\n                                uploadMulti\n                            \n                            \n                                    Async\n                                uploadPosts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadAvatar(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadCover(file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadMulti\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadMulti(files: Express.Multer.File[])\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPosts(files: Array)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/files/files.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Array\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array): Promise {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise {\n    return { files: files };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllConversationDto.html":{"url":"classes/GetAllConversationDto.html","title":"class - GetAllConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/get-conversation.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetAllPostOfUserDto.html":{"url":"classes/GetAllPostOfUserDto.html","title":"class - GetAllPostOfUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetAllPostOfUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/get-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/get-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllPostOfUserDto {\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetOneConversationDto.html":{"url":"classes/GetOneConversationDto.html","title":"class - GetOneConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetOneConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/get-conversation.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        GetAllConversationDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'user-id-123-456-789'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         GetAllConversationDto\n\n                            \n                        \n                    \n                        \n                                Defined in         GetAllConversationDto:11\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nexport class GetAllConversationDto {\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class GetOneConversationDto extends GetAllConversationDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserProfileByEmailNameDto.html":{"url":"classes/GetUserProfileByEmailNameDto.html","title":"class - GetUserProfileByEmailNameDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserProfileByEmailNameDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/get-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/get-user.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/get-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { UserProfileDto } from '.';\n\nexport class GetUserProfileByEmailNameDto extends PartialType(UserProfileDto) {\n  email: string;\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/filters/http.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/filters/http.filter.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ISwaggerOptions.html":{"url":"interfaces/ISwaggerOptions.html","title":"interface - ISwaggerOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ISwaggerOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/configs/interfaces/option.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            deepScanRoutes\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraModels\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            ignoreGlobalPrefix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            include\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            operationIdFactory\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        deepScanRoutes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        deepScanRoutes:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will also load routes from the modules imported by include modules\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraModels\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraModels:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Additional, extra models that should be inspected and included in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ignoreGlobalPrefix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ignoreGlobalPrefix:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, swagger will ignore the global prefix set through setGlobalPrefix() method\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        include\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        include:     Function[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Function[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    List of modules to include in the specification\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        operationIdFactory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        operationIdFactory:         function\n\n                                    \n                                \n\n                                \n                                    \n                                        Default value : () => controllerKey_methodKey\n\n                                    \n                                \n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Custom operationIdFactory that will be used to generate the operationId\nbased on the controllerKey and methodKey\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/InterceptorModule.html":{"url":"modules/InterceptorModule.html","title":"module - InterceptorModule","body":"\n                   \n\n\n\n\n    Modules\n    InterceptorModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/interceptors/interceptor.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class InterceptorModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerContextMiddleware.html":{"url":"injectables/LoggerContextMiddleware.html","title":"injectable - LoggerContextMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerContextMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/middleware/logger-context.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/core/middleware/logger-context.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                                Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport type { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void): void {\n    console.log(`Request ${req}...`);\n    console.log(`Response ${res}...`);\n    return next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggerModule.html":{"url":"classes/LoggerModule.html","title":"class - LoggerModule","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggerModule\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.module.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                forRoot\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot()\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.module.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DynamicModule\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerService.html":{"url":"injectables/LoggerService.html","title":"injectable - LoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/logger/logger.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Logger\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Optional\n                                prefix\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debug\n                            \n                            \n                                error\n                            \n                            \n                                log\n                            \n                            \n                                setPrefix\n                            \n                            \n                                verbose\n                            \n                            \n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debug\n                        \n                    \n                \n            \n            \n                \ndebug(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(message: any, trace?: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    trace\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        log\n                        \n                    \n                \n            \n            \n                \nlog(message: string, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setPrefix\n                        \n                    \n                \n            \n            \n                \nsetPrefix(prefix: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verbose\n                        \n                    \n                \n            \n            \n                \nverbose(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        warn\n                        \n                    \n                \n            \n            \n                \nwarn(message: any, prefix?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/logger/logger.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        prefix\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/core/logger/logger.service.ts:5\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingInterceptor.html":{"url":"injectables/LoggingInterceptor.html","title":"injectable - LoggingInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggingInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/logging.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/logging.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/sigin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/sigin.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/sigin.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class LoginDto {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MessagesGateway.html":{"url":"classes/MessagesGateway.html","title":"class - MessagesGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MessagesGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.gateway.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                typing\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(messagesService: MessagesService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        messagesService\n                                                  \n                                                        \n                                                                        MessagesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.gateway.ts:15\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    createMessage(conversationId: string, createMessageDto: CreateMessageDto, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('createMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('findAllMessages')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('joinConversation')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('removeMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        typing\n                        \n                    \n                \n            \n            \n                \n                    \n                    typing(conversationId: string, isTyping: boolean, client: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('typing')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    isTyping\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    client\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('updateMessage')\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/messages/messages.gateway.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  WebSocketGateway,\n  SubscribeMessage,\n  MessageBody,\n  WebSocketServer,\n  ConnectedSocket,\n} from '@nestjs/websockets';\nimport { MessagesService } from './messages.service';\nimport { Server } from 'http';\nimport { Socket } from 'socket.io';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\n\n@WebSocketGateway({ cors: { origin: '*' } })\nexport class MessagesGateway {\n  @WebSocketServer() server: Server;\n  constructor(private readonly messagesService: MessagesService) {}\n\n  @SubscribeMessage('joinConversation')\n  joinConversation(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('senderId') senderId: string,\n    @ConnectedSocket() client: Socket,\n  ) {\n    return this.messagesService.joinConversation(\n      conversationId,\n      senderId,\n      client.id,\n    );\n  }\n\n  @SubscribeMessage('findAllMessages')\n  findAllMessages(@MessageBody('conversationId') conversationId: string) {\n    return this.messagesService.findAllMessages(conversationId);\n  }\n\n  @SubscribeMessage('createMessage')\n  async createMessage(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody() createMessageDto: CreateMessageDto,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const message = await this.messagesService.createMessage(\n      conversationId,\n      createMessageDto,\n      client.id,\n    );\n    this.server.emit('message', message);\n    return message;\n  }\n\n  @SubscribeMessage('typing')\n  async typing(\n    @MessageBody('conversationId') conversationId: string,\n    @MessageBody('isTyping') isTyping: boolean,\n    @ConnectedSocket() client: Socket,\n  ) {\n    const name = await this.messagesService.getMember(\n      conversationId,\n      client.id,\n    );\n\n    client.broadcast.emit('typing', { senderId: name, isTyping });\n  }\n\n  @SubscribeMessage('updateMessage')\n  updateMessage(@MessageBody() updateMessageDto: UpdateMessageDto) {\n    const refresh = this.messagesService.updateMessage(updateMessageDto);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n\n  @SubscribeMessage('removeMessage')\n  async remove(@MessageBody() message: string) {\n    const refresh = await this.messagesService.remove(message);\n    this.server.emit('refresh', refresh);\n    return refresh;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MessagesModule.html":{"url":"modules/MessagesModule.html","title":"module - MessagesModule","body":"\n                   \n\n\n\n\n    Modules\n    MessagesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\n\nMessagesService\n\nMessagesService\n\n\n\nMessagesModule\n\nMessagesModule\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/messages/messages.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MessagesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MessagesGateway } from './messages.gateway';\nimport { MessagesService } from './messages.service';\n\n@Module({\n  providers: [MessagesGateway, MessagesService],\n})\nexport class MessagesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MessagesService.html":{"url":"injectables/MessagesService.html","title":"injectable - MessagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MessagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/messages.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversations\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMessage\n                            \n                            \n                                findAllMessages\n                            \n                            \n                                getMember\n                            \n                            \n                                joinConversation\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                updateMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createMessage\n                        \n                    \n                \n            \n            \n                \ncreateMessage(conversationId: string, createMessageDto: CreateMessageDto, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createMessageDto\n                                    \n                                                CreateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { id: any; senderId: any; text: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAllMessages\n                        \n                    \n                \n            \n            \n                \nfindAllMessages(conversationId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMember\n                        \n                    \n                \n            \n            \n                \ngetMember(conversationId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        joinConversation\n                        \n                    \n                \n            \n            \n                \njoinConversation(conversationId: string, senderId: string, clientId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    conversationId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    senderId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    clientId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateMessage\n                        \n                    \n                \n            \n            \n                \nupdateMessage(updateMessageDto: UpdateMessageDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/messages/messages.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateMessageDto\n                                    \n                                                UpdateMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversations\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/messages.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\nimport { v4 as uuid } from 'uuid';\n\n@Injectable()\nexport class MessagesService {\n  conversations = [\n    {\n      id: '1',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'John Doe',\n        //   text: 'Hello World',\n        // },\n      ],\n    },\n    {\n      id: '2',\n      members: {},\n      messages: [\n        // {\n        //   id: '1',\n        //   name: 'Max Mustermann',\n        //   text: 'Nice to meet you',\n        // },\n      ],\n    },\n  ];\n\n  joinConversation(conversationId: string, senderId: string, clientId: string) {\n    this.conversations.find((element) => element.id === conversationId).members[\n      clientId\n    ] = senderId;\n    return Object.values(\n      this.conversations.find((element) => element.id === conversationId)\n        .members,\n    );\n  }\n\n  findAllMessages(conversationId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .messages;\n  }\n\n  getMember(conversationId: string, clientId: string) {\n    return this.conversations.find((element) => element.id === conversationId)\n      .members[clientId];\n  }\n\n  createMessage(\n    conversationId: string,\n    createMessageDto: CreateMessageDto,\n    clientId: string,\n  ) {\n    const message = {\n      id: uuid(),\n      senderId: this.getMember(conversationId, clientId),\n      text: createMessageDto.text,\n    };\n    this.conversations\n      .find((element) => element.id === conversationId)\n      .messages.push(message);\n    return message;\n  }\n\n  updateMessage(updateMessageDto: UpdateMessageDto) {\n    this.conversations.forEach((element) => {\n      if (element.id === updateMessageDto['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === updateMessageDto['messageId']) {\n            item.text = updateMessageDto['text'];\n          }\n        });\n      }\n    });\n    return this.findAllMessages(updateMessageDto['conversationId']);\n  }\n\n  async remove(message: string) {\n    this.conversations.forEach((element) => {\n      if (element.id === message['conversationId']) {\n        element.messages.forEach((item) => {\n          if (item.id === message['messageId']) {\n            element.messages.splice(element.messages.indexOf(item), 1);\n          }\n        });\n      }\n    });\n\n    return this.findAllMessages(message['conversationId']);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationDto.html":{"url":"classes/PaginationDto.html","title":"class - PaginationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                current\n                            \n                            \n                                limit\n                            \n                            \n                                order\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        current\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: Number, example: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/pagination.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: Number, example: 3})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/pagination.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        order\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@ApiProperty({type: String, description: 'asc, desc', example: 'asc'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/pagination.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class PaginationDto {\n  @IsString()\n  @ApiProperty({ type: Number, example: 1 })\n  current: string;\n\n  @IsString()\n  @ApiProperty({ type: Number, example: 3 })\n  limit: string;\n\n  @IsString()\n  @ApiProperty({ type: String, description: 'asc, desc', example: 'asc' })\n  order: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ParseIntPipe.html":{"url":"injectables/ParseIntPipe.html","title":"injectable - ParseIntPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ParseIntPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/parse-int.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/parse-int.pipe.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n} from '@nestjs/common';\n\n@Injectable()\nexport class ParseIntPipe implements PipeTransform {\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const val = parseInt(value, 10);\n    if (isNaN(val)) {\n      throw new BadRequestException('Validation failed');\n    }\n    return val;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Post.html":{"url":"classes/Post.html","title":"class - Post","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/entities/post.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Post {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(dto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiBearerAuth()@HttpCode(HttpStatus.CREATED)@ApiOperation({summary: 'Get all posts of user by user-id (all)'})@ApiOkResponse({description: 'Success'})@ApiCreatedResponse({description: 'Create new post successfuly'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(dto: DeleteOnePost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('delete')@ApiBearerAuth()@ApiOperation({summary: 'Delete one post of user (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(dto: GetAllPostOfUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('private/all')@ApiBearerAuth()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public and private posts of user (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllPostOfUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userId/all')@Public()@HttpCode(HttpStatus.OK)@ApiOperation({summary: 'Get all public posts of user by user-id (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':postId')@Public()@ApiOperation({summary: 'Get one post of user (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('reaction')@ApiBearerAuth()@ApiOperation({summary: 'React to posts of user (user)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('update')@ApiBearerAuth()@ApiOperation({summary: 'Update one post of user (all)'})@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/posts/posts.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { Public } from '../auth/decorators';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  UpdatePostDto,\n  ReactionsPost,\n  GetAllPostOfUserDto,\n} from './dto';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@ApiTags('Posts')\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({ description: 'Not found' })\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('posts')\nexport class PostsController {\n  constructor(private postsService: PostsService) {}\n\n  @Post()\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.CREATED)\n  @ApiOperation({ summary: 'Get all posts of user by user-id (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  @ApiCreatedResponse({ description: 'Create new post successfuly' })\n  async createPost(@Body() dto: CreatePostDto) {\n    return this.postsService.createPost(dto);\n  }\n\n  @Post('private/all')\n  @ApiBearerAuth()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({\n    summary: 'Get all public and private posts of user (user)',\n  })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getAllPostsOfUser(@Body() dto: GetAllPostOfUserDto) {\n    return this.postsService.getAllPostsOfUser(dto);\n  }\n\n  @Get(':userId/all')\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @ApiOperation({ summary: 'Get all public posts of user by user-id (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getAllPublicPosts(@Param('userId') userId: string) {\n    return this.postsService.getAllPublicPosts(userId);\n  }\n\n  @Get(':postId')\n  @Public()\n  @ApiOperation({ summary: 'Get one post of user (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getOnePostById(@Param('postId') postId: string) {\n    return this.postsService.getOnePostById(postId);\n  }\n\n  @Patch('update')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update one post of user (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updatePost(@Body() dto: UpdatePostDto) {\n    return this.postsService.updatePost(dto);\n  }\n\n  @Delete('delete')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete one post of user (all)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deletePost(@Body() dto: DeleteOnePost) {\n    return this.postsService.deletePost(dto);\n  }\n\n  @Post('reaction')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'React to posts of user (user)' })\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async reactionPost(@Body() dto: ReactionsPost) {\n    return this.postsService.reactionPost(dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsService } from './posts.service';\nimport { PostsController } from './posts.controller';\nimport { PrismaModule } from '../prisma/prisma.module';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [PrismaModule, UsersModule],\n  controllers: [PostsController],\n  providers: [PostsService],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPostsOfUser\n                            \n                            \n                                    Async\n                                getAllPublicPosts\n                            \n                            \n                                    Async\n                                getOnePostById\n                            \n                            \n                                    Async\n                                reactionPost\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/posts/posts.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(dto: CreatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(dto: DeleteOnePost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                DeleteOnePost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPostsOfUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPostsOfUser(dto: GetAllPostOfUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetAllPostOfUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPublicPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPublicPosts(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOnePostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOnePostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        reactionPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    reactionPost(dto: ReactionsPost)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                ReactionsPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(dto: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/posts/posts.service.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { PrismaService } from '../prisma/prisma.service';\nimport {\n  CreatePostDto,\n  DeleteOnePost,\n  GetAllPostOfUserDto,\n  ReactionsPost,\n  UpdatePostDto,\n} from './dto';\n\n@Injectable()\nexport class PostsService {\n  constructor(private prismaService: PrismaService) {}\n  async createPost(dto: CreatePostDto) {\n    const findUser = await this.prismaService.user.findUnique({\n      where: {\n        id: dto.authorId,\n      },\n    });\n\n    if (!findUser) {\n      return new NotFoundException('User not found');\n    }\n\n    const post = await this.prismaService.post.create({\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n        authorId: dto.authorId,\n        // categories: {\n        //   create: [\n        //     {\n        //       createAt: new Date(),\n        //       category: {\n        //         create: {\n        //           id: uuid(),\n        //           name: 'New category',\n        //         },\n        //       },\n        //     },\n        //   ],\n        // },\n      },\n    });\n    return post;\n  }\n\n  async getAllPostsOfUser(dto: GetAllPostOfUserDto) {\n    const list = await this.prismaService.user.findMany({\n      where: {\n        id: dto.userId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    if (!list) {\n      return new NotFoundException('User not found');\n    }\n    if (list.length === 0) {\n      return new NotFoundException('User not have post!');\n    }\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: dto.userId,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getAllPublicPosts(userId: string) {\n    const list = await this.prismaService.user.findMany({\n      where: {\n        id: userId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    if (!list) {\n      return new NotFoundException('User not found');\n    }\n    if (list.length === 0) {\n      return new NotFoundException('User not have post!');\n    }\n    return await this.prismaService.post.findMany({\n      where: {\n        authorId: userId,\n        published: true,\n      },\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        files: true,\n        authorId: true,\n        createdAt: true,\n        reactions: true,\n      },\n    });\n  }\n\n  async getOnePostById(postId: string) {\n    return await this.prismaService.post.findUnique({\n      where: {\n        id: postId,\n      },\n    });\n  }\n\n  async updatePost(dto: UpdatePostDto) {\n    const list = await this.getOnePostById(dto.postId);\n\n    if (!list) {\n      return new NotFoundException('Post not found');\n    }\n\n    if (list.authorId !== dto.authorId) {\n      return new ForbiddenException('You are not author of this post');\n    }\n\n    return await this.prismaService.post.update({\n      where: {\n        id: dto.postId,\n      },\n      data: {\n        title: dto.title,\n        description: dto.description,\n        files: dto.files,\n      },\n    });\n  }\n\n  async deletePost(dto: DeleteOnePost) {\n    const list = await this.prismaService.user.findUnique({\n      where: {\n        id: dto.authorId,\n      },\n      select: {\n        writtenPosts: {\n          select: {\n            id: true,\n          },\n        },\n      },\n    });\n    const identify = list.writtenPosts.find((post) => post.id === dto.postId);\n    if (!identify) {\n      return new NotFoundException('Post not found');\n    }\n\n    await this.prismaService.post.delete({\n      where: {\n        id: dto.postId,\n      },\n    });\n    return '';\n  }\n\n  async reactionPost(dto: ReactionsPost) {\n    const list = await this.getOnePostById(dto.postId);\n\n    if (!list) {\n      return new NotFoundException('Post not found');\n    }\n\n    const checkExist = await this.prismaService.reaction.findMany({\n      where: {\n        postId: dto.postId,\n        userId: dto.favouritorId,\n      },\n    });\n\n    if (checkExist.length > 0) {\n      return new BadRequestException('You already reacted to this post');\n    }\n    return this.prismaService.reaction.create({\n      data: {\n        userId: dto.favouritorId,\n        postId: dto.postId,\n        type: dto.reactionType,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_PrismaModule_exports\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { PrismaService } from './prisma.service';\n\n@Global()\n@Module({\n  providers: [PrismaService, ConfigModule],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleDestroy\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/prisma/prisma.service.ts:13\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                    \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleDestroy\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleDestroy()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                    \n                    onModuleInit()\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/prisma/prisma.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  INestApplication,\n  Injectable,\n  OnModuleDestroy,\n  OnModuleInit,\n} from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService\n  extends PrismaClient\n  implements OnModuleInit, OnModuleDestroy\n{\n  constructor() {\n    super({\n      datasources: {\n        db: {\n          url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\n          // url: process.env.DATABASE_URL,\n        },\n      },\n    });\n  }\n\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async onModuleDestroy() {\n    await this.$disconnect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on('beforeExit', async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReactionsPost.html":{"url":"classes/ReactionsPost.html","title":"class - ReactionsPost","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReactionsPost\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                favouritorId\n                            \n                            \n                                postId\n                            \n                            \n                                reactionType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        favouritorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reactionType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsJSON, IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\n  title?: string;\n  description?: string;\n  files?: string[];\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\nexport class ReactionsPost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Response.html":{"url":"interfaces/Response.html","title":"interface - Response","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Response\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/core/roles/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/core/roles/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/core/roles/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE } from './roles.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    // return false;\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () =>\n      user.roles.some((role) => !!requiredRoles.find((item) => item === role));\n\n    return user && user.roles && hasRole();\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RtGuard.html":{"url":"classes/RtGuard.html","title":"class - RtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/guards/rt.guard.ts\n        \n\n\n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/guards/rt.guard.ts:3\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthGuard } from '@nestjs/passport';\n\nexport class RtGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RtStrategy.html":{"url":"injectables/RtStrategy.html","title":"injectable - RtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/strategies/rt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/auth/strategies/rt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/auth/strategies/rt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Request } from 'express';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class RtStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\n  constructor(\n    @Inject(ConfigService)\n    private config: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  validate(req: Request, payload: any) {\n    const refreshToken = req.get('authorization').replace('Bearer', '').trim();\n    return {\n      ...payload,\n      refreshToken,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignupDto.html":{"url":"classes/SignupDto.html","title":"class - SignupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/signup.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/signup.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})@Length(8, 21)@MinLength(7, {message: 'Password is too short, must be at least 8 characters!'})@MaxLength(21, {message: 'Password is too long, must be at most 20 characters!'})@Validate(passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/signup.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'username123'})@IsString()@IsNotEmpty()@IsAlphanumeric()@Length(3, 20)@MinLength(2, {message: 'Name is too short, must be at least 3 characters!'})@MaxLength(21, {message: 'Name is too long, must be at most 20 characters!'})@Validate(usenameValidator, {message: 'Username must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/signup.dto.ts:60\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsAlphanumeric,\n  IsEmail,\n  IsNotEmpty,\n  IsString,\n  Length,\n  MaxLength,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\n\nexport class SignupDto {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  @Length(8, 21)\n  @MinLength(7, {\n    message: 'Password is too short, must be at least 8 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Password is too long, must be at most 20 characters!',\n  })\n  @Validate(passwordValidator, {\n    message:\n      'Password must be at contain at least one number, one uppercase letter and one special character',\n  })\n  password: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'username123',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsAlphanumeric()\n  @Length(3, 20)\n  @MinLength(2, {\n    message: 'Name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(21, {\n    message: 'Name is too long, must be at most 20 characters!',\n  })\n  @Validate(usenameValidator, {\n    message: 'Username must be not begin with number!',\n  })\n  username: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TimeoutInterceptor.html":{"url":"injectables/TimeoutInterceptor.html","title":"injectable - TimeoutInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TimeoutInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/timeout.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/timeout.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { timeout } from 'rxjs/operators';\n\n@Injectable()\nexport class TimeoutInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    return next.handle().pipe(timeout(1000));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransformInterceptor.html":{"url":"injectables/TransformInterceptor.html","title":"injectable - TransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/core/interceptors/transform.interceptor.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor\n  implements NestInterceptor>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateConversationDto.html":{"url":"classes/UpdateConversationDto.html","title":"class - UpdateConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMembersConversationDto.html":{"url":"classes/UpdateMembersConversationDto.html","title":"class - UpdateMembersConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMembersConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMessageDto.html":{"url":"classes/UpdateMessageDto.html","title":"class - UpdateMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/messages/dto/update-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                conversationId\n                            \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        conversationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/messages/dto/update-message.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateMessageDto } from './create-message.dto';\n\nexport class UpdateMessageDto extends PartialType(\n  CreateMessageDto,\n) {\n  id: string;\n  conversationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePasswordDto.html":{"url":"classes/UpdatePasswordDto.html","title":"class - UpdatePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/auth/dto/password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                newPassword\n                            \n                            \n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@ApiProperty({type: String, description: 'This is a required property', example: 'example@gmail.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/password.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/password.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        oldPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({type: String, description: 'This is a required property', example: 'password123'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/auth/dto/password.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class UpdatePasswordDto {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/posts/dto/update-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorId\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                files\n                            \n                            \n                                postId\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/posts/dto/update-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { IsJSON, IsNotEmpty, IsNumber, IsString } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\n  title?: string;\n  description?: string;\n  files?: string[];\n  authorId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n}\n\nexport class ReactionsPost {\n  @IsString()\n  @IsNotEmpty()\n  postId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  favouritorId: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  reactionType: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRolesConversationDto.html":{"url":"classes/UpdateRolesConversationDto.html","title":"class - UpdateRolesConversationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRolesConversationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/conversations/dto/update-conversation.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                admins\n                            \n                            \n                                creator\n                            \n                            \n                                members\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        admins\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        creator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        members\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/conversations/dto/update-conversation.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\nimport { CreateConversationDto } from './create-conversation.dto';\n\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\n  name?: string;\n  description?: string;\n  avatar?: string;\n}\n\nexport class UpdateMembersConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  members: string[];\n}\n\nexport class DeleteOneAdminConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  @ApiProperty({\n    type: String,\n    example: 'user-id-123-456-789',\n  })\n  @IsString()\n  @IsNotEmpty()\n  userId: string;\n}\n\nexport class UpdateRolesConversationDto extends PartialType(\n  CreateConversationDto,\n) {\n  creator: string;\n  admins: string[];\n  members: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserAvatarDto.html":{"url":"classes/UserAvatarDto.html","title":"class - UserAvatarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserAvatarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/user-avatar.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/user-avatar.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class UserAvatarDto {\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  avatar: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserCoverDto.html":{"url":"classes/UserCoverDto.html","title":"class - UserCoverDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserCoverDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/user-cover.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                cover\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/user-cover.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString } from 'class-validator';\n\nexport class UserCoverDto {\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  cover: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserProfileDto.html":{"url":"classes/UserProfileDto.html","title":"class - UserProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/dto/users-profile.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                age\n                            \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                birthdate\n                            \n                            \n                                cover\n                            \n                            \n                                fullName\n                            \n                            \n                                gender\n                            \n                            \n                                interests\n                            \n                            \n                                marriageStatus\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '123, Address A, City B, Country C'})@IsString()@MaxLength(101, {message: 'Address is too long, must be at most 100 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, example: 19})@IsNumber()@Min(17, {message: 'You must be at least 18 years old!'})@Max(101, {message: 'You must be at most 100 years old!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:101\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Avatar example 1 url'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'This is bio of Hello ABC account'})@IsString()@MaxLength(151, {message: 'Bio is too long, must be at most 150 characters!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        birthdate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '2021-07-02T05:01:03.938Z'})@Type(undefined)@IsDate()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cover\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Cover example 1 url'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        fullName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Hello ABC'})@IsString()@Length(3, 45)@MinLength(2, {message: 'Full name is too short, must be at least 3 characters!'})@MaxLength(46, {message: 'Name is too long, must be at most 45 characters!'})@Validate(fullNameValidator, {message: 'Full name must be not begin with number!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        gender\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: Number, description: '1: male, 2: female, 0: other', example: 1})@IsNumber()@Min(0)@Max(2)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:121\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interests\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: undefined, example: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        marriageStatus\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: 'Single'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: String, example: '09999999999'})@IsString()@Validate(phoneNumberValidator, {message: 'Phone number is invalid!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/infrastructure/users/dto/users-profile.dto.ts:83\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsAlphanumeric,\n  IsArray,\n  IsDate,\n  IsNumber,\n  IsString,\n  Length,\n  Max,\n  MaxLength,\n  Min,\n  MinLength,\n  Validate,\n} from 'class-validator';\nimport {\n  fullNameValidator,\n  phoneNumberValidator,\n} from '../../../core/validators';\n\nexport class UserProfileDto {\n  @ApiProperty({\n    type: String,\n    example: 'Hello ABC',\n  })\n  @IsString()\n  @Length(3, 45)\n  @MinLength(2, {\n    message: 'Full name is too short, must be at least 3 characters!',\n  })\n  @MaxLength(46, {\n    message: 'Name is too long, must be at most 45 characters!',\n  })\n  @Validate(fullNameValidator, {\n    message: 'Full name must be not begin with number!',\n  })\n  fullName: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Avatar example 1 url',\n  })\n  @IsString()\n  avatar: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Cover example 1 url',\n  })\n  @IsString()\n  cover: string;\n\n  @ApiProperty({\n    type: String,\n    example: 'Single',\n  })\n  @IsString()\n  marriageStatus: string;\n\n  @ApiProperty({\n    type: [],\n    example: ['Music', 'Sport', 'Travel'],\n  })\n  @IsArray()\n  interests: [];\n\n  @ApiProperty({\n    type: String,\n    example: '123, Address A, City B, Country C',\n  })\n  @IsString()\n  @MaxLength(101, {\n    message: 'Address is too long, must be at most 100 characters!',\n  })\n  address: string;\n\n  @ApiProperty({\n    type: String,\n    example: '09999999999',\n  })\n  @IsString()\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\n  phone: string;\n\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\n  @Type(() => Date)\n  @IsDate()\n  birthdate: Date;\n\n  @ApiProperty({\n    type: Number,\n    example: 19,\n  })\n  @IsNumber()\n  @Min(17, {\n    message: 'You must be at least 18 years old!',\n  })\n  @Max(101, {\n    message: 'You must be at most 100 years old!',\n  })\n  age: number;\n\n  @ApiProperty({\n    type: String,\n    example: 'This is bio of Hello ABC account',\n  })\n  @IsString()\n  @MaxLength(151, {\n    message: 'Bio is too long, must be at most 150 characters!',\n  })\n  bio: string;\n\n  @ApiProperty({\n    type: Number,\n    description: '1: male, 2: female, 0: other',\n    example: 1,\n  })\n  @IsNumber()\n  @Min(0)\n  @Max(2)\n  gender: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByEmail\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUsersByEmailAndName\n                            \n                            \n                                    Async\n                                getUsersById\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByEmail(userId: string, dto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user profile by email & password (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @RoleDecorator(ROLE.ADMIN)@Delete(':userId')@ApiBearerAuth()@ApiOperation({summary: 'Delete user by user-id (admin)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:134\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @RoleDecorator(ROLE.ADMIN)@Get('all')@ApiBearerAuth()@ApiOperation({summary: 'Get list all public user (admin)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersByEmailAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByEmailAndName(dto: GetUserProfileByEmailNameDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiBearerAuth()@ApiOperation({summary: 'Get user profile by user email and username (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetUserProfileByEmailNameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersById(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Get(':userId')@ApiOperation({summary: 'Get public user by user id (all)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UserAvatarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/avatar/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user avatar image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UserCoverDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/cover/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user cover image by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UserProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('profile/:userId')@ApiBearerAuth()@ApiOperation({summary: 'Update user profile by user id (user)'})@HttpCode(HttpStatus.OK)@ApiOkResponse({description: 'Success'})\n                \n            \n\n            \n                \n                    Defined in src/infrastructure/users/users.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Put,\n  Query,\n} from '@nestjs/common';\nimport {\n  ApiBearerAuth,\n  ApiForbiddenResponse,\n  ApiNotAcceptableResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Public } from 'src/infrastructure/auth/decorators';\nimport { LoginDto } from 'src/infrastructure/auth/dto';\nimport { RoleDecorator } from 'src/core/roles';\nimport { ROLE } from 'src/core/roles/roles.enum';\nimport {\n  GetUserProfileByEmailNameDto,\n  PaginationDto,\n  UserAvatarDto,\n  UserCoverDto,\n  UserProfileDto,\n} from './dto';\nimport { UsersService } from './users.service';\n\n@ApiTags('Users')\n@ApiUnauthorizedResponse({ description: 'Unauthorized' })\n@ApiForbiddenResponse({ description: 'Forbidden' })\n@ApiNotFoundResponse({ description: 'Not found' })\n@ApiNotAcceptableResponse({\n  description: 'Provided inputs are not in correct form.',\n})\n@Controller('users')\nexport class UsersController {\n  constructor(private usersService: UsersService) {\n    this.usersService = usersService;\n  }\n\n  @RoleDecorator(ROLE.ADMIN)\n  @Get('all')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Get list all public user (admin)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getAllUsers(@Query() dto: PaginationDto) {\n    return this.usersService.getAllUsers(dto);\n  }\n\n  @Public()\n  @Get(':userId')\n  @ApiOperation({ summary: 'Get public user by user id (all)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async getUsersById(@Param('userId') userId: string) {\n    return this.usersService.getUsersById(userId);\n  }\n\n  @Get()\n  @ApiBearerAuth()\n  @ApiOperation({\n    summary: 'Get user profile by user email and username (user)',\n  })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async getUsersByEmailAndName(@Body() dto: GetUserProfileByEmailNameDto) {\n    return this.usersService.getUsersByEmailAndName(dto);\n  }\n\n  @Put('profile/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user profile by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async updateUsersProfile(\n    @Param('userId') userId: string,\n    @Body() dto: UserProfileDto,\n  ) {\n    return this.usersService.updateUsersProfile(userId, dto);\n  }\n\n  @Put('profile/avatar/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user avatar image by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersAvatar(\n    @Param('userId') userId: string,\n    @Body() dto: UserAvatarDto,\n  ) {\n    return this.usersService.updateUsersAvatar(userId, dto);\n  }\n\n  @Put('profile/cover/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Update user cover image by user id (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async updateUsersCover(@Param('userId') userId: string, @Body() dto: UserCoverDto) {\n    return this.usersService.updateUsersCover(userId, dto);\n  }\n\n  @Delete('profile/:userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user profile by email & password (user)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({ description: 'Success' })\n  async deleteUserByEmail(@Param('userId') userId: string, @Body() dto: LoginDto) {\n    return this.usersService.deleteUserByEmail(userId, dto);\n  }\n\n  @RoleDecorator(ROLE.ADMIN)\n  @Delete(':userId')\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Delete user by user-id (admin)' })\n  @HttpCode(HttpStatus.OK)\n  @ApiOkResponse({\n    description: 'Success',\n  })\n  async deleteUserById(@Param('userId') userId: string) {\n    return this.usersService.deleteUserById(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/infrastructure/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [PrismaModule, AuthModule],\n  controllers: [UsersController],\n  providers: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/infrastructure/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUserByEmail\n                            \n                            \n                                    Async\n                                deleteUserById\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                getUsersByEmailAndName\n                            \n                            \n                                    Async\n                                getUsersById\n                            \n                            \n                                    Async\n                                updateUsersAvatar\n                            \n                            \n                                    Async\n                                updateUsersCover\n                            \n                            \n                                    Async\n                                updateUsersProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaService: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/infrastructure/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaService\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserByEmail(userId: string, dto: LoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:128\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                LoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers(dto: PaginationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                PaginationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersByEmailAndName\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersByEmailAndName(dto: GetUserProfileByEmailNameDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                GetUserProfileByEmailNameDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsersById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsersById(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersAvatar(userId: string, dto: UserAvatarDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserAvatarDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersCover\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersCover(userId: string, dto: UserCoverDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserCoverDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUsersProfile\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUsersProfile(userId: string, dto: UserProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/infrastructure/users/users.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dto\n                                    \n                                                UserProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { LoginDto } from 'src/infrastructure/auth/dto';\nimport { comparePassword } from 'src/core/helpers/hash';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport {\n  GetUserProfileByEmailNameDto,\n  PaginationDto,\n  UserAvatarDto,\n  UserCoverDto,\n  UserProfileDto,\n} from './dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(private prismaService: PrismaService) {}\n\n  async getAllUsers(dto: PaginationDto) {\n    const total = await this.prismaService.user.count();\n    const user = await this.prismaService.user.findMany({\n      skip: Number(dto.limit) * (Number(dto.current) - 1),\n      take: Number(dto.limit),\n      orderBy: {\n        id: dto.order as any,\n      },\n      select: {\n        id: true,\n        email: true,\n        username: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n    return {\n      total,\n      orderBy: dto.order,\n      pageItems: user.length,\n      pageLimit: Number(dto.limit),\n      pageCurrent: Number(dto.current),\n      users: user,\n    };\n  }\n\n  async getUsersById(userId: string) {\n    return await this.prismaService.user.findUnique({\n      where: { id: userId },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n  }\n\n  async getUsersByEmailAndName(dto: GetUserProfileByEmailNameDto) {\n    const user = await this.prismaService.user.findMany({\n      where: {\n        AND: [\n          {\n            email: dto.email,\n            username: dto.username,\n          },\n        ],\n      },\n      select: {\n        id: true,\n        username: true,\n        email: true,\n        profile: true,\n        createdAt: true,\n        updatedAt: true,\n      },\n    });\n    return user;\n  }\n\n  async updateUsersProfile(userId: string, dto: UserProfileDto) {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newProfile = await this.getUsersById(userId);\n    return newProfile;\n  }\n\n  async updateUsersAvatar(userId: string, dto: UserAvatarDto) {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newProfile = await this.getUsersById(userId);\n    return newProfile;\n  }\n\n  async updateUsersCover(userId: string, dto: UserCoverDto) {\n    await this.prismaService.user.update({\n      where: { id: userId },\n      data: {\n        profile: {\n          update: {\n            ...dto,\n          },\n        },\n      },\n    });\n    const newProfile = await this.getUsersById(userId);\n    return newProfile;\n  }\n\n  async deleteUserByEmail(userId: string, dto: LoginDto) {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new ForbiddenException('Access denied');\n\n    const matchPassword = await comparePassword(dto.password, user.password);\n\n    if (!matchPassword) throw new ForbiddenException('Access denied');\n\n    await this.prismaService.userProfile.delete({\n      where: {\n        userId: userId,\n      },\n    });\n    return matchPassword;\n  }\n\n  async deleteUserById(userId: string) {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n\n    if (!user) throw new NotFoundException('Access denied');\n\n    await this.prismaService.user.delete({\n      where: {\n        id: userId,\n      },\n    });\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidationPipe.html":{"url":"injectables/ValidationPipe.html","title":"injectable - ValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/pipes/validation.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        toValidate\n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype: Type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n                                    \n                                                Type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/core/pipes/validation.pipe.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ArgumentMetadata,\n  BadRequestException,\n  Injectable,\n  PipeTransform,\n  Type,\n} from '@nestjs/common';\nimport { plainToClass } from 'class-transformer';\nimport { validate } from 'class-validator';\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new BadRequestException('Validation failed');\n    }\n    return value;\n  }\n\n  private toValidate(metatype: Type): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.find((type) => metatype === type);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            corsOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/cors.config.ts\n            \n            variable\n            whiteList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/configs/interfaces/option.interface.ts\n            \n            interface\n            ISwaggerOptions\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/core/configs/swagger.ts\n            \n            variable\n            initSwagger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorAcceptableException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorBadGatewayException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorBadRequestException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorForbiddenException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorGatewayTimeoutException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorInternalServerException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorMethodNotAllowedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorRequestTimeoutException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorServiceUnavailableException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorUnauthorizedException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/custom.filter.ts\n            \n            class\n            ErrorUnsupportedMediaTypeException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/filters/exception.filter.ts\n            \n            class\n            AllExceptionsFilter\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/filters/http.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            comparePassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            hashPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/helpers/hash.ts\n            \n            variable\n            SALT_ROUNDS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/exception.interceptor.ts\n            \n            injectable\n            ErrorsIntereptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/logging.interceptor.ts\n            \n            injectable\n            LoggingInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/timeout.interceptor.ts\n            \n            injectable\n            TimeoutInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            injectable\n            TransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/transform.interceptor.ts\n            \n            interface\n            Response\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            function\n            Logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.decorator.ts\n            \n            variable\n            prefixesForLoggers\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.module.ts\n            \n            class\n            LoggerModule\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            createLoggerProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.provider.ts\n            \n            function\n            loggerFactory\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/logger/logger.service.ts\n            \n            injectable\n            LoggerService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/middleware/app.middleware.ts\n            \n            function\n            middleware\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/middleware/logger-context.middleware.ts\n            \n            injectable\n            LoggerContextMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/parse-int.pipe.ts\n            \n            injectable\n            ParseIntPipe\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/pipes/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/roles/roles.decorator.ts\n            \n            variable\n            RoleDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/roles/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            class\n            fullNameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/fullName.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            class\n            passwordValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/password.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            class\n            phoneNumberValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/phoneNumber.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            class\n            usenameValidator\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/validators/username.validator.ts\n            \n            variable\n            pattern\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n            \n            variable\n            GetCurrentUserId\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/get-current-user.decorator.ts\n            \n            variable\n            GetCurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/password.dto.ts\n            \n            class\n            UpdatePasswordDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/sigin.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/dto/signup.dto.ts\n            \n            class\n            SignupDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/at.guard.ts\n            \n            injectable\n            AtGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/guards/rt.guard.ts\n            \n            class\n            RtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/at.strategy.ts\n            \n            injectable\n            AtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/auth/strategies/rt.strategy.ts\n            \n            injectable\n            RtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.controller.ts\n            \n            controller\n            ConversationsController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/conversations.service.ts\n            \n            injectable\n            ConversationsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/create-conversation.dto.ts\n            \n            class\n            CreateConversationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/delete-conversation.dto.ts\n            \n            class\n            DeleteConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetAllConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/get-conversation.dto.ts\n            \n            class\n            GetOneConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            DeleteOneAdminConversationDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateMembersConversationDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/dto/update-conversation.dto.ts\n            \n            class\n            UpdateRolesConversationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/conversations/entities/conversation.entity.ts\n            \n            class\n            ConversationEntity\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/array-field.decorator.ts\n            \n            function\n            ArrayFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/multi-field.decorator.ts\n            \n            function\n            MultiFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/decorators/single-field.decorator.ts\n            \n            function\n            SingleFieldDecorator\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.controller.ts\n            \n            controller\n            FileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/files/files.service.ts\n            \n            class\n            FilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/create-message.dto.ts\n            \n            class\n            CreateMessageDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/dto/update-message.dto.ts\n            \n            class\n            UpdateMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.gateway.ts\n            \n            class\n            MessagesGateway\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/messages/messages.service.ts\n            \n            injectable\n            MessagesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/delete-post.dto.ts\n            \n            class\n            DeleteOnePost\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/get-post.dto.ts\n            \n            class\n            GetAllPostOfUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/update-post.dto.ts\n            \n            class\n            ReactionsPost\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/entities/post.entity.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/infrastructure/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/get-user.dto.ts\n            \n            class\n            GetUserProfileByEmailNameDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/pagination.dto.ts\n            \n            class\n            PaginationDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/user-avatar.dto.ts\n            \n            class\n            UserAvatarDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/user-cover.dto.ts\n            \n            class\n            UserCoverDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/infrastructure/users/dto/users-profile.dto.ts\n            \n            class\n            UserProfileDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/infrastructure/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @commitlint/cli : ^17.0.3\n        \n            @commitlint/config-conventional : ^17.0.3\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.0.9\n        \n            @nestjs/swagger : ^6.0.4\n        \n            @nestjs/websockets : ^9.0.9\n        \n            @prisma/client : ^4.1.0\n        \n            @types/passport-jwt : ^3.0.6\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            helmet : ^6.0.0\n        \n            husky : ^8.0.1\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            prisma : ^4.1.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            socket.io : ^4.5.1\n        \n            tslint : ^6.1.3\n        \n            tslint-config-prettier : ^1.18.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ROLE   (src/.../roles.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/roles/roles.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        ROLE\n                    \n                \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/fullNameValidator.html":{"url":"classes/fullNameValidator.html","title":"class - fullNameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  fullNameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/fullName.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/fullName.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class fullNameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments) {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'Full name has must filled !' + args;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ArrayFieldDecorator   (src/.../array-field.decorator.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            createLoggerProvider   (src/.../logger.provider.ts)\n                        \n                        \n                            createLoggerProviders   (src/.../logger.provider.ts)\n                        \n                        \n                            Logger   (src/.../logger.decorator.ts)\n                        \n                        \n                            loggerFactory   (src/.../logger.provider.ts)\n                        \n                        \n                            middleware   (src/.../app.middleware.ts)\n                        \n                        \n                            MultiFieldDecorator   (src/.../multi-field.decorator.ts)\n                        \n                        \n                            SingleFieldDecorator   (src/.../single-field.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/array-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ArrayFieldDecorator\n                        \n                    \n                \n            \n            \n                \nArrayFieldDecorator(fieldName: string, required: boolean, maxCount: number, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fieldName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    required\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    maxCount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/core/logger/logger.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLoggerProvider\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProvider(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Provider\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createLoggerProviders\n                        \n                    \n                \n            \n            \n                \ncreateLoggerProviders()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         Array>\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loggerFactory\n                        \n                    \n                \n            \n            \n                \nloggerFactory(logger: LoggerService, prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    logger\n                                    \n                                                LoggerService\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Logger\n                        \n                    \n                \n            \n            \n                \nLogger(prefix: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    prefix\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/core/middleware/app.middleware.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        middleware\n                        \n                    \n                \n            \n            \n                \nmiddleware(app: INestApplication)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    app\n                                    \n                                            INestApplication\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     INestApplication\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MultiFieldDecorator\n                        \n                    \n                \n            \n            \n                \nMultiFieldDecorator(uploadFields, path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uploadFields\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/infrastructure/files/decorators/single-field.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SingleFieldDecorator\n                        \n                    \n                \n            \n            \n                \nSingleFieldDecorator(path: string)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\nTeneno APIA official api for teneno application\n\n\n\nPreview\n\nFrontend connect\n\n\n\n\n\n\nDatabase diagram\n\nDescription\n\nThe purpose of Teneno webapp is create a new network platform where everyone can sharing their feels, thinks or experiences together\nMake an easily life with Teneno\nPractice Backend skills and improve programming thinking\n\nFeatures\n\n\n\nAuth\nFiles\n\n\n\n\n✅  Signup\n✅  Upload single file (avatar, cover)\n\n\n✅  Signin\n✅  Upload multi files\n\n\n✅  Signout\n✅  Upload array-field files (post, sample_image)\n\n\n✅  Signout\n\n\n\n✅  Refresh access-token\n\n\n\n✅  Update password\n\n\n\n\n\n\n\nUsers\nPosts\n\n\n\n\n✅  Get list all users\n✅  Create a new post\n\n\n✅  Get user data by user-id\n✅  Get all posts of user by user-id\n\n\n✅  Get public user profile by user-id / username / email\n✅  Match a new category with new post\n\n\n✅  Update user profile\n✅ Get a post by post-id\n\n\n✅  Delete user-profile by email & password\n✅ Delete a post by post-id\n\n\n✅  Delete user by user-id (admin)\n✅ Reaction to post\n\n\n\n\n\n\nConversations\nChats\n\n\n\n\n✅  Create new conversation\n✅  Join conversation by conversation-id\n\n\n✅  Get all conversations of user\n✅  Get all messages in conversation\n\n\n✅  Get one conversation information has current user\n✅  Create new messages\n\n\n✅  Update members to current conversation\n✅ Update message by message-id\n\n\n✅  Update conversation information (name, description, avatar)\n✅ Delete messages by message-id\n\n\n✅  Delete admin out of current conversation by creator\n\n\n\n✅  Delete conversation by creator\n\n\n\n✅  Change users role in current conversation\n\n\n\n\nitem1item2| See the list | -->\n\n\nPlugins & Dependencies\n\nNodejs framework for building efficient and scalable server-side applications\nNest framework TypeScript starter repository\nPrisma query builder and auto-generated schema with types tailored\nCORS connect middleware that can be used to enable CORS with various options\nSwagger describe definition format and design document APIs at scale\nBcrypt a library to help you hash passwords\nJWT decode, verify and generate access tokens\nClass-validator use of decorator and non-decorator to perform validation\nClass-transformer transform plain object to some instance of class and versa and serialize / deserialize object based on criteria\nPassport compatible authentication requests middleware for Node.js\nCookies-Parser middleware parsing of cookies in Nodejs and Expressjs.\nMulter upload file data form in Expressjs\nCookie-parser Parse Cookie header and signed cookie support\nHelmet secure Express apps by setting various HTTP headers\nCompression compress response bodies for all request\nRead-Eval-Print-Loop (REPL) takes - executes single user inputs, and returns the result to the user, interactive environment, inspect dependency graph and call methods on providers - controllers directly from terminal\nServe Static serve static content like a Single Page Application (SPA)\nCompodoc Generate project documentation\n\nConventions & Tools\n\nPrettier opinionated code formatter\nEslint analyzes code to quickly find problems and built with continuous integration pipeline\nHusky x Lintstage x Commitlint linter conventions for clean code\nJWT Playground\n\nReferences & Tips\n\nPrisma x Nest build CRUD API endpoints rapidy\nFix upload file on Postman\nFile upload with Nest\nBase roles example\nLogger 1\nNest example\nNest awesome\nNest structure\nPostgre x Heroku\nNest x Prisma\nDatabase for chat\nDatabase for social\n\nPrisma\n# Installation\nnpm install prisma@latest @prisma/client# Init prisma\nnpx prisma init\n\n# turn database schema into a Prisma schema\nprisma db pull\n\n# generate the Prisma Client\nprisma generate# Create env and migrate db\nnpx prisma migrate dev --create-only# Open prisma studio\nnpx prisma studio# Sync migrate change to db\nnpx prisma db pushDatabase\n# Start db\n$ docker-compose upRunning\n# Running the app in local\n$ npm install# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nTeneno is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Tran Nguyen Thuong Truong\nDevto - @thuongtruong1009\nLinkedin - @thuongtruong1009\n\nReferences\n\nGet idea inspiration: bee-music\nFollow progresses at latest project updated\nTrading and shopping your style with e-shopee\nEnhance front-end skills through twitter-meta\nGenerate your GitHub informations by gitbox\nBegining Vue through notedev\nLearning front-end web full course at frontend-master\nLearn Object-Oriented-Programming tutorial at Snake-Game-OOP\nBecome Java master for new beginner at Java-training\nPratice UI/UX at league-fo-legend\nMake flip card game at flip-card\nLearn computer architecture at computer-architecture\n\n❤️ Support me\n\nWe are looking for sponsors to join us to have better community reach and impact.\n\n\n\n\n\n\n\n\n📰 License\n\nThis project is distributed under the MIT License.\n\nCopyright of @thuongtruong1009, 2022.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2022 Tran Nguyen Thuong Truong\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConversationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        InterceptorModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MessagesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_ConversationsModule\n\n\n\ncluster_ConversationsModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_imports\n\n\n\ncluster_MessagesModule\n\n\n\ncluster_MessagesModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nConversationsModule\n\nConversationsModule\n\nAppModule -->\n\nConversationsModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nInterceptorModule\n\nInterceptorModule\n\nAppModule -->\n\nInterceptorModule->AppModule\n\n\n\n\n\nMessagesModule\n\nMessagesModule\n\nAppModule -->\n\nMessagesModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\nConversationsModule -->\n\nPrismaModule->ConversationsModule\n\n\n\nPostsModule -->\n\nPrismaModule->PostsModule\n\n\n\nUsersModule -->\n\nPrismaModule->UsersModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nConversationsModule -->\n\nUsersModule->ConversationsModule\n\n\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAtStrategy\n\nAtStrategy\n\nAuthModule -->\n\nAtStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nRtStrategy\n\nRtStrategy\n\nAuthModule -->\n\nRtStrategy->AuthModule\n\n\n\n\n\nConversationsService\n\nConversationsService\n\nConversationsModule -->\n\nConversationsService->ConversationsModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nMessagesService\n\nMessagesService\n\nMessagesModule -->\n\nMessagesService->MessagesModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    47 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/passwordValidator.html":{"url":"classes/passwordValidator.html","title":"class - passwordValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  passwordValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/password.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/password.validator.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern =\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class passwordValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments) {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'Username has must filled !';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/phoneNumberValidator.html":{"url":"classes/phoneNumberValidator.html","title":"class - phoneNumberValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  phoneNumberValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/phoneNumber.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/phoneNumber.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments) {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'Phone number has must filled !';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.5.0\n        \n            Description : The official Teneno API application\n        \n            Keywords : teneno, nestjs, prisma, postgre, API, typescript, express, docker\n        \n            Homepage : https://github.com/thuongtruong1009/teneno-api#readme\n        \n            License : MIT\n        \n            Repository : https://github.com/thuongtruong1009/teneno-api\n        \n            Author : Tran Nguyen Thuong Truong \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UploadFields   (src/.../multi-field.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/infrastructure/files/decorators/multi-field.decorator.ts\n    \n    \n        \n            \n                \n                    \n                    UploadFields\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/usenameValidator.html":{"url":"classes/usenameValidator.html","title":"class - usenameValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  usenameValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/validators/username.validator.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(text: string, args: ValidationArguments)\n                \n            \n\n\n            \n                \n                    Defined in src/core/validators/username.validator.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    args\n                                    \n                                            ValidationArguments\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n  ValidationArguments,\n} from 'class-validator';\n\nconst pattern = /^[a-z]\\w/;\n\n@ValidatorConstraint({ name: 'customText', async: false })\nexport class usenameValidator implements ValidatorConstraintInterface {\n  validate(text: string, args: ValidationArguments) {\n    return pattern.test(text);\n  }\n\n  defaultMessage(args: ValidationArguments) {\n    return 'Username has must filled !';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            comparePassword   (src/.../hash.ts)\n                        \n                        \n                            corsOptions   (src/.../cors.config.ts)\n                        \n                        \n                            GetCurrentUser   (src/.../get-current-user.decorator.ts)\n                        \n                        \n                            GetCurrentUserId   (src/.../get-current-user-id.decorator.ts)\n                        \n                        \n                            hashPassword   (src/.../hash.ts)\n                        \n                        \n                            initSwagger   (src/.../swagger.ts)\n                        \n                        \n                            pattern   (src/.../fullName.validator.ts)\n                        \n                        \n                            pattern   (src/.../password.validator.ts)\n                        \n                        \n                            pattern   (src/.../phoneNumber.validator.ts)\n                        \n                        \n                            pattern   (src/.../username.validator.ts)\n                        \n                        \n                            prefixesForLoggers   (src/.../logger.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            RoleDecorator   (src/.../roles.decorator.ts)\n                        \n                        \n                            SALT_ROUNDS   (src/.../hash.ts)\n                        \n                        \n                            whiteList   (src/.../cors.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/helpers/hash.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        comparePassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string, hash: string) =>\n  bcrypt.compare(data, hash)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hashPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (data: string) => bcrypt.hash(data, SALT_ROUNDS)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SALT_ROUNDS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n\n\n        \n    \n\n    src/core/configs/cors.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        corsOptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : function (req: any, callback: any) {\n  let option;\n\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\n    option = { origin: true };\n  } else {\n    option = { origin: false };\n  }\n  callback(null, option);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whiteList\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.WHITE_LIST\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/get-current-user-id.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetCurrentUserId\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/core/configs/swagger.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        initSwagger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (app: INestApplication) => {\n  const config: ConfigService = app.get(ConfigService);\n\n  const swaggerConfig = new DocumentBuilder()\n    .setTitle('Teneno API')\n    .setDescription(\n      \"This is CRUD API for Teneno - the webapp project builded with NestJS. View the source at teneno-api\",\n    )\n    .setContact(\n      'Thuong Truong',\n      'https://github.com/thuongtruong1009',\n      'ititiu19228@student.hcmiu.edu.vn',\n    )\n    .addServer(config.get('HOST_URL'))\n    .addServer(config.get('BASE_URL'))\n    .setVersion('1.4')\n    .addTag('cats', 'default description')\n    .addBearerAuth({\n      type: 'http',\n      scheme: 'Bearer',\n      bearerFormat: 'JWT',\n      description: 'Paste a valid access token here.',\n      in: 'Header',\n    })\n    .addSecurity('api_key', {\n      type: 'apiKey',\n      name: 'api_key',\n      in: 'header',\n    })\n    .build();\n\n  const options: ISwaggerOptions = {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  };\n  const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n  SwaggerModule.setup('api', app, document, {\n    swaggerOptions: {\n      persistAuthorization: true,\n    },\n  });\n}\n                    \n                \n\n\n        \n    \n\n    src/core/validators/fullName.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/password.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/phoneNumber.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/\n                    \n                \n\n\n        \n    \n\n    src/core/validators/username.validator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        pattern\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^[a-z]\\w/\n                    \n                \n\n\n        \n    \n\n    src/core/logger/logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        prefixesForLoggers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : new Array()\n                    \n                \n\n\n        \n    \n\n    src/infrastructure/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (): CustomDecorator => SetMetadata('isPublic', true)\n                    \n                \n\n\n        \n    \n\n    src/core/roles/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleDecorator\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: ROLE[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
