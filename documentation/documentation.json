{
    "pipes": [],
    "interfaces": [
        {
            "name": "ISwaggerOptions",
            "id": "interface-ISwaggerOptions-36a75985f0d994339b334475aa8a1856b8c9995fc533a6b3845a361b539eff6cf590b6b767a1735ba715884938bc5e1bb4de72fe11825452e2c2348de3176e3a",
            "file": "src/core/configs/interfaces/option.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ISwaggerOptions {\n  /**\n   * List of modules to include in the specification\n   */\n  include?: Function[];\n\n  /**\n   * Additional, extra models that should be inspected and included in the specification\n   */\n  extraModels?: Function[];\n\n  /**\n   * If `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n   */\n  ignoreGlobalPrefix?: boolean;\n\n  /**\n   * If `true`, swagger will also load routes from the modules imported by `include` modules\n   */\n  deepScanRoutes?: boolean;\n\n  /**\n   * Custom operationIdFactory that will be used to generate the `operationId`\n   * based on the `controllerKey` and `methodKey`\n   * @default () => controllerKey_methodKey\n   */\n  operationIdFactory?: (controllerKey: string, methodKey: string) => string;\n}\n",
            "properties": [
                {
                    "name": "deepScanRoutes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If <code>true</code>, swagger will also load routes from the modules imported by <code>include</code> modules</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nIf `true`, swagger will also load routes from the modules imported by `include` modules\n"
                },
                {
                    "name": "extraModels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function[]",
                    "optional": true,
                    "description": "<p>Additional, extra models that should be inspected and included in the specification</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nAdditional, extra models that should be inspected and included in the specification\n"
                },
                {
                    "name": "ignoreGlobalPrefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>If <code>true</code>, swagger will ignore the global prefix set through <code>setGlobalPrefix()</code> method</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nIf `true`, swagger will ignore the global prefix set through `setGlobalPrefix()` method\n"
                },
                {
                    "name": "include",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function[]",
                    "optional": true,
                    "description": "<p>List of modules to include in the specification</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nList of modules to include in the specification\n"
                },
                {
                    "name": "operationIdFactory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "<p>Custom operationIdFactory that will be used to generate the <code>operationId</code>\nbased on the <code>controllerKey</code> and <code>methodKey</code></p>\n",
                    "line": 27,
                    "rawdescription": "\n\nCustom operationIdFactory that will be used to generate the `operationId`\nbased on the `controllerKey` and `methodKey`\n",
                    "jsdoctags": [
                        {
                            "pos": 667,
                            "end": 709,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 668,
                                "end": 675,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>() =&gt; controllerKey_methodKey</p>\n"
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Response",
            "id": "interface-Response-16c4034e847673f6d915c65b6177a95d329c65e9933521516b6869e9de997196c7efae4d93995cd9e9a689efbed4c7d420e22bdf26e90f73ef3f8bcfa473aff2",
            "file": "src/core/interceptors/transform.interceptor.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response<T> {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor<T>\n  implements NestInterceptor<T, Response<T>>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler<T>,\n  ): Observable<Response<T>> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppService",
            "id": "injectable-AppService-6bee08b0dbbb6089d3b348e8abfb52d4b442a0dbbc629f334c73ff10a2ed7c4dc6f7e9173e1779e530453d1b5933daefe36b7ec010133d1ac50b64746c48c597",
            "file": "src/app.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getHello",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\nimport { Logger } from './core/logger/logger.decorator';\nimport { LoggerService } from './core/logger/logger.service';\n\n@Injectable()\nexport class AppService {\n  constructor(@Logger('AppService') private logger: LoggerService) {}\n\n  getHello(): string {\n    this.logger.log('Hello World', '200');\n    return 'Hello World from Teneno!';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AtGuard",
            "id": "injectable-AtGuard-ee0ec3a4eaac4276b7954ac5b22394716f3926275d2e1e44200d91dfbd961763bfb8fdd6a583147bc05f4243687fd62ff5095f2ef00180150c3a1eb6e544cfa6",
            "file": "src/infrastructure/auth/guards/at.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AtGuard extends AuthGuard('jwt') {\n  constructor(private reflector: Reflector) {\n    super();\n  }\n\n  // nếu true thì cho phép truy cập bằng access-token , và ngược lại\n  public canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride<boolean>('isPublic', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (isPublic) return true;\n\n    return super.canActivate(context);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AtStrategy",
            "id": "injectable-AtStrategy-36d0faafaacb98845a969e33da1f0e54b18d993154071da4032f5b4af4df4f0e2d2f4d543cef62ee553ec02a548aa3d2110a8816ee43c2721e2fc17d12b269e3",
            "file": "src/infrastructure/auth/strategies/at.strategy.ts",
            "properties": [],
            "methods": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "payload",
                            "type": "IJwtPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IJwtPayload",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "IJwtPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@nestjs/common';\r\nimport { PassportStrategy } from '@nestjs/passport';\r\nimport { ExtractJwt, Strategy } from 'passport-jwt';\r\nimport { ConfigService } from '@nestjs/config';\r\nimport { IJwtPayload } from '../interfaces';\r\n\r\n@Injectable()\r\nexport class AtStrategy extends PassportStrategy(Strategy, 'jwt') {\r\n  constructor(config: ConfigService) {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      secretOrKey: config.get<string>('ACCESS_TOKEN_SECRET'),\r\n    });\r\n  }\n\r\n  validate(payload: IJwtPayload): IJwtPayload {\r\n    return payload;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-51ee8edc439a21dd72c26e1aeedfd8fee61c8ffa9fb912d18feb43f0ce926705d055982ce86a68ed5c0a4af9a22d65331cfa320cb52ed455c9f55acefe73e9ae",
            "file": "src/infrastructure/auth/auth.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTokens",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ITokens>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshToken",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ITokens>",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signinLocal",
                    "args": [
                        {
                            "name": "dto",
                            "type": "LoginDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ITokens>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "LoginDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signupLocal",
                    "args": [
                        {
                            "name": "dto",
                            "type": "SignupDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ITokens>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "SignupDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePassWord",
                    "args": [
                        {
                            "name": "dto",
                            "type": "UpdatePasswordDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ITokens>",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "UpdatePasswordDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRtHash",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rt",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { ForbiddenException, Inject, Injectable } from '@nestjs/common';\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\nimport { ITokens } from './interfaces';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { comparePassword, hashPassword } from 'src/core/helpers/hash';\nimport { LoginDto, SignupDto, UpdatePasswordDto } from './dto/';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(ConfigService)\n    private configService: ConfigService,\n    private prismaService: PrismaService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getTokens(userId: string, email: string): Promise<ITokens> {\n    const [at, rt] = await Promise.all([\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get<string>('ACCESS_TOKEN_SECRET'),\n          expiresIn: this.configService.get<string>('EXPIRE_AT_TIME'),\n        },\n      ),\n      this.jwtService.signAsync(\n        {\n          sub: userId,\n          email: email,\n        },\n        {\n          secret: this.configService.get<string>('REFRESH_TOKEN_SECRET'),\n          expiresIn: this.configService.get<string>('EXPIRE_RT_TIME'),\n        },\n      ),\n    ]);\n    return { accessToken: at, refreshToken: rt };\n  }\n\n  async updateRtHash(userId: string, rt: string) {\n    const hash = await hashPassword(rt);\n    await this.prismaService.user.update({\n      where: {\n        id: userId,\n      },\n      data: {\n        hashedRefreshToken: hash,\n      },\n    });\n  }\n\n  async signupLocal(dto: SignupDto): Promise<ITokens> {\n    const hash = await hashPassword(dto.password);\n\n    const newUser = await this.prismaService.user.create({\n      data: {\n        email: dto.email,\n        password: hash,\n        username: dto.username,\n        profile: {\n          create: {\n            fullName: '',\n            birthdate: new Date(),\n            avatar: '',\n            cover: '',\n            marriageStatus: '',\n            interests: [],\n            bio: '',\n            address: '',\n            phone: '',\n            age: 0,\n            gender: 0,\n          },\n        },\n        role: ['USER'],\n      },\n    });\n\n    const tokens = await this.getTokens(newUser.id, newUser.email);\n    await this.updateRtHash(newUser.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async signinLocal(dto: LoginDto): Promise<ITokens> {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n    if (!user) throw new ForbiddenException('Access denied');\n\n    const passwordMatches = await comparePassword(dto.password, user.password);\n    if (!passwordMatches) throw new ForbiddenException('Access denied');\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async logout(userId: string): Promise<void> {\n    await this.prismaService.user.updateMany({\n      where: {\n        id: userId,\n        hashedRefreshToken: {\n          not: null,\n        },\n      },\n      data: { hashedRefreshToken: null },\n    });\n  }\n\n  async refreshToken(userId: string, refreshToken: string): Promise<ITokens> {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        id: userId,\n      },\n    });\n    if (!user || !user.hashedRefreshToken)\n      throw new ForbiddenException('Access denied');\n\n    const hashMatches = await comparePassword(\n      refreshToken,\n      user.hashedRefreshToken,\n    );\n    if (!hashMatches) throw new ForbiddenException('Access denied');\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n\n  async updatePassWord(dto: UpdatePasswordDto): Promise<ITokens> {\n    const user = await this.prismaService.user.findUnique({\n      where: {\n        email: dto.email,\n      },\n    });\n\n    const passwordMatches = await comparePassword(\n      dto.oldPassword,\n      user.password,\n    );\n\n    if (!passwordMatches) throw new ForbiddenException('Access denied');\n\n    if (dto.newPassword === dto.oldPassword)\n      throw new ForbiddenException(\n        'New password must be different from old password',\n      );\n\n    if (passwordMatches) {\n      await this.prismaService.user.update({\n        where: { email: dto.email },\n        data: {\n          password: await hashPassword(dto.newPassword),\n        },\n      });\n    }\n\n    const tokens = await this.getTokens(user.id, user.email);\n    await this.updateRtHash(user.id, tokens.refreshToken);\n    return tokens;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "prismaService",
                        "type": "PrismaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "jwtService",
                        "type": "JwtService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "prismaService",
                        "type": "PrismaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "jwtService",
                        "type": "JwtService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ConversationsService",
            "id": "injectable-ConversationsService-a456972cbc9eca1d12557e71d2a81875096d7a40795842649c48c92e2f86422d6f032a3e43ff275e88f3f6efcdb97cc6924fab0fda3eb602b081121d6f45a038",
            "file": "src/infrastructure/conversations/conversations.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createConversation",
                    "args": [
                        {
                            "name": "dto",
                            "type": "CreateConversationDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "CreateConversationDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteConversationById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "DeleteConversationDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "DeleteConversationDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteOneAdminConversation",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "DeleteOneAdminConversationDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "DeleteOneAdminConversationDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllConversations",
                    "args": [
                        {
                            "name": "dto",
                            "type": "GetAllConversationDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "GetAllConversationDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getConversationById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "GetOneConversationDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "GetOneConversationDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateConversationById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "UpdateConversationDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "UpdateConversationDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMembersConversation",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "UpdateMembersConversationDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "UpdateMembersConversationDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRolesConversation",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "UpdateRolesConversationDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "UpdateRolesConversationDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\r\nimport { PrismaService } from '../prisma/prisma.service';\r\nimport {\r\n  CreateConversationDto,\r\n  DeleteConversationDto,\r\n  DeleteOneAdminConversationDto,\r\n  GetAllConversationDto,\r\n  GetOneConversationDto,\r\n  UpdateConversationDto,\r\n  UpdateMembersConversationDto,\r\n  UpdateRolesConversationDto,\r\n} from './dto';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n@Injectable()\r\nexport class ConversationsService {\r\n  constructor(private prismaService: PrismaService) {}\r\n\r\n  async createConversation(dto: CreateConversationDto) {\r\n    const newConversation = await this.prismaService.conversation.create({\r\n      data: {\r\n        id: uuid(),\r\n        name: dto.name,\r\n        description: dto.description,\r\n        avatar: '',\r\n        members: dto.members,\r\n        admins: dto.admins,\r\n        creator: dto.creator,\r\n      },\r\n    });\r\n    return newConversation;\r\n  }\r\n\r\n  async getAllConversations(dto: GetAllConversationDto) {\r\n    const list = await this.prismaService.conversation.findMany({\r\n      where: {\r\n        OR: [\r\n          {\r\n            creator: dto.userId,\r\n          },\r\n          {\r\n            admins: {\r\n              has: dto.userId,\r\n            },\r\n          },\r\n          {\r\n            members: {\r\n              has: dto.userId,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      select: {\r\n        id: true,\r\n        name: true,\r\n        avatar: true,\r\n      },\r\n    });\r\n    return list;\r\n  }\r\n\r\n  async getConversationById(id: string, dto: GetOneConversationDto) {\r\n    const list = await this.prismaService.conversation.findMany({\r\n      where: {\r\n        OR: [\r\n          {\r\n            creator: dto.userId,\r\n          },\r\n          {\r\n            admins: {\r\n              has: dto.userId,\r\n            },\r\n          },\r\n          {\r\n            members: {\r\n              has: dto.userId,\r\n            },\r\n          },\r\n        ],\r\n        AND: {\r\n          id: id,\r\n        },\r\n      },\r\n    });\r\n    return list;\r\n  }\r\n\r\n  updateConversationById(id: string, dto: UpdateConversationDto) {\r\n    const updated = this.prismaService.conversation.update({\r\n      where: {\r\n        id: id,\r\n      },\r\n      data: {\r\n        name: dto.name,\r\n        description: dto.description,\r\n        avatar: dto.avatar,\r\n        members: dto.members,\r\n      },\r\n    });\r\n    return updated;\r\n  }\r\n\r\n  async deleteConversationById(id: string, dto: DeleteConversationDto) {\r\n    const list = await this.prismaService.conversation.findUnique({\r\n      where: {\r\n        id: id,\r\n      },\r\n    });\r\n    if (list['creator'] === dto.userId) {\r\n      await this.prismaService.conversation.delete({\r\n        where: {\r\n          id: id,\r\n        },\r\n      });\r\n      return '';\r\n    }\r\n    return false;\r\n  }\r\n\r\n  async updateMembersConversation(\r\n    conversationId: string,\r\n    dto: UpdateMembersConversationDto,\r\n  ) {\r\n    const updated = await this.prismaService.conversation.update({\r\n      where: {\r\n        id: conversationId,\r\n      },\r\n      data: {\r\n        members: dto.members,\r\n      },\r\n    });\r\n    return updated;\r\n  }\r\n\r\n  async deleteOneAdminConversation(\r\n    conversationId: string,\r\n    dto: DeleteOneAdminConversationDto,\r\n  ) {\r\n    const list = await this.prismaService.conversation.findMany({\r\n      where: {\r\n        OR: [\r\n          {\r\n            creator: dto.creator,\r\n          },\r\n        ],\r\n        AND: {\r\n          id: conversationId,\r\n        },\r\n      },\r\n    });\r\n\r\n    if (list.length === 0) {\r\n      return 'You not creator of this conversation';\r\n    }\r\n    const updated = list[0]['admins'].filter((admin) => admin !== dto.userId);\r\n\r\n    await this.prismaService.conversation.update({\r\n      where: {\r\n        id: conversationId,\r\n      },\r\n      data: {\r\n        admins: updated,\r\n      },\r\n    });\r\n    return updated;\r\n  }\r\n\r\n  async updateRolesConversation(\r\n    conversationId: string,\r\n    dto: UpdateRolesConversationDto,\r\n  ) {\r\n    const list = await this.prismaService.conversation.findMany({\r\n      where: {\r\n        OR: [\r\n          {\r\n            creator: dto.creator,\r\n          },\r\n        ],\r\n        AND: {\r\n          id: conversationId,\r\n        },\r\n      },\r\n    });\r\n    if (list.length === 0) {\r\n      return 'You not creator of this conversation';\r\n    }\r\n\r\n    const updated = await this.prismaService.conversation.update({\r\n      where: {\r\n        id: conversationId,\r\n      },\r\n      data: {\r\n        admins: dto.admins,\r\n        members: dto.members,\r\n      },\r\n    });\r\n    return updated;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "prismaService",
                        "type": "PrismaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "prismaService",
                        "type": "PrismaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ErrorsIntereptor",
            "id": "injectable-ErrorsIntereptor-c06bdb025a6da7e0550df540a75735a9a490814baa3d0b41c769ac73cdae7f94c046293f3a5acc473b294df8653dd8c431601d7b49444210e5469de8591b3dbe",
            "file": "src/core/interceptors/exception.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  CallHandler,\r\n  ExecutionContext,\r\n  HttpException,\r\n  HttpStatus,\r\n  Injectable,\r\n  NestInterceptor,\r\n} from '@nestjs/common';\r\nimport { catchError, Observable, throwError } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ErrorsIntereptor implements NestInterceptor {\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\r\n    return next\r\n      .handle()\r\n      .pipe(\r\n        catchError((err) =>\r\n          throwError(\r\n            () => new HttpException('New message', HttpStatus.BAD_GATEWAY),\r\n          ),\r\n        ),\r\n      );\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "LoggerContextMiddleware",
            "id": "injectable-LoggerContextMiddleware-bbb9c6a558c7608f1366b0ef6bc880950b2ef0fd3751441c3eb66cb3c69ddacbdb16b5c16297971587ed405ef7ed977a4a307760140d06f218a89c12efb60a44",
            "file": "src/core/middleware/logger-context.middleware.ts",
            "properties": [],
            "methods": [
                {
                    "name": "use",
                    "args": [
                        {
                            "name": "req",
                            "type": "Request",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "res",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "Request",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "res",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, NestMiddleware } from '@nestjs/common';\nimport type { Request, Response } from 'express';\n\n@Injectable()\nexport class LoggerContextMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: () => void): void {\n    console.log(`Request ${req}...`);\n    console.log(`Response ${res}...`);\n    return next();\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "LoggerService",
            "id": "injectable-LoggerService-7d902d67b14ca308add1431e01f449557980537e5b0891cea738f4fab1bdb79a19a71032d54558a53aca720d0ba8c0bb5fb8005c8aa5588882e17ab04e9172b2",
            "file": "src/core/logger/logger.service.ts",
            "properties": [
                {
                    "name": "prefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "debug",
                    "args": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "trace",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "trace",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "log",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setPrefix",
                    "args": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verbose",
                    "args": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warn",
                    "args": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class LoggerService extends Logger {\n  private prefix?: string;\n\n  setPrefix(prefix: string) {\n    this.prefix = prefix;\n  }\n\n  log(message: string, prefix?: string) {\n    let formattedMessage = message;\n\n    if (this.prefix) {\n      formattedMessage = `[${this.prefix}] ${message}`;\n    }\n    super.log(formattedMessage, prefix);\n  }\n\n  error(message: any, trace?: string, prefix?: string) {\n    super.error(message, trace, prefix);\n  }\n\n  warn(message: any, prefix?: string) {\n    super.warn(message, prefix);\n  }\n\n  debug(message: any, prefix?: string) {\n    super.debug(message, prefix);\n  }\n\n  verbose(message: any, prefix?: string) {\n    super.verbose(message, prefix);\n  }\n}\n",
            "extends": "Logger",
            "type": "injectable"
        },
        {
            "name": "LoggingInterceptor",
            "id": "injectable-LoggingInterceptor-56a28c8beac121b5844f7cc8a298ce312e56fc970946858742c10b9b459c1d4796d7446815f7e20c299b0f0e0b28a981bfb23f7874be43d637d7e3c4bc60af29",
            "file": "src/core/interceptors/logging.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    console.log('Before...');\n\n    console.log('Connecting ' + context.getClass().name);\n    const now = Date.now();\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`After... ${Date.now() - now}ms`)));\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "MessagesService",
            "id": "injectable-MessagesService-439b6df6d13abf162f5e7a430c35121235e06736b40d112374a3486846da21da4f0c5e4ef86b88d679a54a5968eea533aadbfdfdbf8da56ee24b893c15c7bb13",
            "file": "src/infrastructure/messages/messages.service.ts",
            "properties": [
                {
                    "name": "conversations",
                    "defaultValue": "[\r\n    {\r\n      id: '1',\r\n      members: {},\r\n      messages: [\r\n        // {\r\n        //   id: '1',\r\n        //   name: 'John Doe',\r\n        //   text: 'Hello World',\r\n        // },\r\n      ],\r\n    },\r\n    {\r\n      id: '2',\r\n      members: {},\r\n      messages: [\r\n        // {\r\n        //   id: '1',\r\n        //   name: 'Max Mustermann',\r\n        //   text: 'Nice to meet you',\r\n        // },\r\n      ],\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "createMessage",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "createMessageDto",
                            "type": "CreateMessageDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clientId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ id: any; senderId: any; text: any; }",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createMessageDto",
                            "type": "CreateMessageDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clientId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAllMessages",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMember",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clientId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clientId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "joinConversation",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "senderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "clientId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "senderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "clientId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMessage",
                    "args": [
                        {
                            "name": "updateMessageDto",
                            "type": "UpdateMessageDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "updateMessageDto",
                            "type": "UpdateMessageDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@nestjs/common';\r\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n@Injectable()\r\nexport class MessagesService {\r\n  conversations = [\r\n    {\r\n      id: '1',\r\n      members: {},\r\n      messages: [\r\n        // {\r\n        //   id: '1',\r\n        //   name: 'John Doe',\r\n        //   text: 'Hello World',\r\n        // },\r\n      ],\r\n    },\r\n    {\r\n      id: '2',\r\n      members: {},\r\n      messages: [\r\n        // {\r\n        //   id: '1',\r\n        //   name: 'Max Mustermann',\r\n        //   text: 'Nice to meet you',\r\n        // },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  joinConversation(conversationId: string, senderId: string, clientId: string) {\r\n    this.conversations.find((element) => element.id === conversationId).members[\r\n      clientId\r\n    ] = senderId;\r\n    return Object.values(\r\n      this.conversations.find((element) => element.id === conversationId)\r\n        .members,\r\n    );\r\n  }\r\n\r\n  findAllMessages(conversationId: string) {\r\n    return this.conversations.find((element) => element.id === conversationId)\r\n      .messages;\r\n  }\r\n\r\n  getMember(conversationId: string, clientId: string) {\r\n    return this.conversations.find((element) => element.id === conversationId)\r\n      .members[clientId];\r\n  }\r\n\r\n  createMessage(\r\n    conversationId: string,\r\n    createMessageDto: CreateMessageDto,\r\n    clientId: string,\r\n  ) {\r\n    const message = {\r\n      id: uuid(),\r\n      senderId: this.getMember(conversationId, clientId),\r\n      text: createMessageDto.text,\r\n    };\r\n    this.conversations\r\n      .find((element) => element.id === conversationId)\r\n      .messages.push(message);\r\n    return message;\r\n  }\r\n\r\n  updateMessage(updateMessageDto: UpdateMessageDto) {\r\n    this.conversations.forEach((element) => {\r\n      if (element.id === updateMessageDto['conversationId']) {\r\n        element.messages.forEach((item) => {\r\n          if (item.id === updateMessageDto['messageId']) {\r\n            item.text = updateMessageDto['text'];\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this.findAllMessages(updateMessageDto['conversationId']);\r\n  }\r\n\r\n  async remove(message: string) {\r\n    this.conversations.forEach((element) => {\r\n      if (element.id === message['conversationId']) {\r\n        element.messages.forEach((item) => {\r\n          if (item.id === message['messageId']) {\r\n            element.messages.splice(element.messages.indexOf(item), 1);\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return this.findAllMessages(message['conversationId']);\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "ParseIntPipe",
            "id": "injectable-ParseIntPipe-6607b16432633ae16640a85374dd8f1c8b167fe2b698198ea0b57312fa95b69f53f378305f37880da8d5c7396dbbb485d73710c82a6f28eb23b59585193ad6be",
            "file": "src/core/pipes/parse-int.pipe.ts",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metadata",
                            "type": "ArgumentMetadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metadata",
                            "type": "ArgumentMetadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  BadRequestException,\r\n  PipeTransform,\r\n  Injectable,\r\n  ArgumentMetadata,\r\n} from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class ParseIntPipe implements PipeTransform<string> {\r\n  async transform(value: string, metadata: ArgumentMetadata) {\r\n    const val = parseInt(value, 10);\r\n    if (isNaN(val)) {\r\n      throw new BadRequestException('Validation failed');\r\n    }\r\n    return val;\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "PostsService",
            "id": "injectable-PostsService-2bd8421abc013743b51f0e10fc41ff72997e38916a69da6b563692f621c6cc8ecca4a53dab1c135480dda7ce1bdbc0f25cc138c8dd68f076611f8bf1e45a574f",
            "file": "src/infrastructure/posts/posts.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createPost",
                    "args": [
                        {
                            "name": "dto",
                            "type": "CreatePostDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "CreatePostDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deletePost",
                    "args": [
                        {
                            "name": "dto",
                            "type": "DeleteOnePost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "DeleteOnePost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllPostsOfUser",
                    "args": [
                        {
                            "name": "dto",
                            "type": "GetAllPostOfUserDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "GetAllPostOfUserDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllPublicPosts",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOnePostById",
                    "args": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "postId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reactionPost",
                    "args": [
                        {
                            "name": "dto",
                            "type": "ReactionsPost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "ReactionsPost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatePost",
                    "args": [
                        {
                            "name": "dto",
                            "type": "UpdatePostDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "UpdatePostDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  BadRequestException,\r\n  ForbiddenException,\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { PrismaService } from '../prisma/prisma.service';\r\nimport {\r\n  CreatePostDto,\r\n  DeleteOnePost,\r\n  GetAllPostOfUserDto,\r\n  ReactionsPost,\r\n  UpdatePostDto,\r\n} from './dto';\r\n\r\n@Injectable()\r\nexport class PostsService {\r\n  constructor(private prismaService: PrismaService) {}\r\n  async createPost(dto: CreatePostDto) {\r\n    const findUser = await this.prismaService.user.findUnique({\r\n      where: {\r\n        id: dto.authorId,\r\n      },\r\n    });\r\n\r\n    if (!findUser) {\r\n      return new NotFoundException('User not found');\r\n    }\r\n\r\n    const post = await this.prismaService.post.create({\r\n      data: {\r\n        title: dto.title,\r\n        description: dto.description,\r\n        files: dto.files,\r\n        authorId: dto.authorId,\r\n        // categories: {\r\n        //   create: [\r\n        //     {\r\n        //       createAt: new Date(),\r\n        //       category: {\r\n        //         create: {\r\n        //           id: uuid(),\r\n        //           name: 'New category',\r\n        //         },\r\n        //       },\r\n        //     },\r\n        //   ],\r\n        // },\r\n      },\r\n    });\r\n    return post;\r\n  }\r\n\r\n  async getAllPostsOfUser(dto: GetAllPostOfUserDto) {\r\n    const list = await this.prismaService.user.findMany({\r\n      where: {\r\n        id: dto.userId,\r\n      },\r\n      select: {\r\n        writtenPosts: {\r\n          select: {\r\n            id: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n    if (!list) {\r\n      return new NotFoundException('User not found');\r\n    }\r\n    if (list.length === 0) {\r\n      return new NotFoundException('User not have post!');\r\n    }\r\n    return await this.prismaService.post.findMany({\r\n      where: {\r\n        authorId: dto.userId,\r\n      },\r\n      select: {\r\n        id: true,\r\n        title: true,\r\n        description: true,\r\n        files: true,\r\n        authorId: true,\r\n        createdAt: true,\r\n        reactions: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getAllPublicPosts(userId: string) {\r\n    const list = await this.prismaService.user.findMany({\r\n      where: {\r\n        id: userId,\r\n      },\r\n      select: {\r\n        writtenPosts: {\r\n          select: {\r\n            id: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n    if (!list) {\r\n      return new NotFoundException('User not found');\r\n    }\r\n    if (list.length === 0) {\r\n      return new NotFoundException('User not have post!');\r\n    }\r\n    return await this.prismaService.post.findMany({\r\n      where: {\r\n        authorId: userId,\r\n        published: true,\r\n      },\r\n      select: {\r\n        id: true,\r\n        title: true,\r\n        description: true,\r\n        files: true,\r\n        authorId: true,\r\n        createdAt: true,\r\n        reactions: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getOnePostById(postId: string) {\r\n    return await this.prismaService.post.findUnique({\r\n      where: {\r\n        id: postId,\r\n      },\r\n    });\r\n  }\r\n\r\n  async updatePost(dto: UpdatePostDto) {\r\n    const list = await this.getOnePostById(dto.postId);\r\n\r\n    if (!list) {\r\n      return new NotFoundException('Post not found');\r\n    }\r\n\r\n    if (list.authorId !== dto.authorId) {\r\n      return new ForbiddenException('You are not author of this post');\r\n    }\r\n\r\n    return await this.prismaService.post.update({\r\n      where: {\r\n        id: dto.postId,\r\n      },\r\n      data: {\r\n        title: dto.title,\r\n        description: dto.description,\r\n        files: dto.files,\r\n      },\r\n    });\r\n  }\r\n\r\n  async deletePost(dto: DeleteOnePost) {\r\n    const list = await this.prismaService.user.findUnique({\r\n      where: {\r\n        id: dto.authorId,\r\n      },\r\n      select: {\r\n        writtenPosts: {\r\n          select: {\r\n            id: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n    const identify = list.writtenPosts.find((post) => post.id === dto.postId);\r\n    if (!identify) {\r\n      return new NotFoundException('Post not found');\r\n    }\r\n\r\n    await this.prismaService.post.delete({\r\n      where: {\r\n        id: dto.postId,\r\n      },\r\n    });\r\n    return '';\r\n  }\r\n\r\n  async reactionPost(dto: ReactionsPost) {\r\n    const list = await this.getOnePostById(dto.postId);\r\n\r\n    if (!list) {\r\n      return new NotFoundException('Post not found');\r\n    }\r\n\r\n    const checkExist = await this.prismaService.reaction.findMany({\r\n      where: {\r\n        postId: dto.postId,\r\n        userId: dto.favouritorId,\r\n      },\r\n    });\r\n\r\n    if (checkExist.length > 0) {\r\n      return new BadRequestException('You already reacted to this post');\r\n    }\r\n    return this.prismaService.reaction.create({\r\n      data: {\r\n        userId: dto.favouritorId,\r\n        postId: dto.postId,\r\n        type: dto.reactionType,\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "prismaService",
                        "type": "PrismaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "prismaService",
                        "type": "PrismaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PrismaService",
            "id": "injectable-PrismaService-f7bcb35bf7dbb83ccc498c1dff391b5fe81f8dd07de14676eee98cc26cd26945126db79638d6b6fb91f886307f8ca02672f68ef1ba643236811ae31afef75786",
            "file": "src/infrastructure/prisma/prisma.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "enableShutdownHooks",
                    "args": [
                        {
                            "name": "app",
                            "type": "INestApplication",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "app",
                            "type": "INestApplication",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onModuleDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "onModuleInit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  INestApplication,\r\n  Injectable,\r\n  OnModuleDestroy,\r\n  OnModuleInit,\r\n} from '@nestjs/common';\r\nimport { PrismaClient } from '@prisma/client';\r\n\r\n@Injectable()\r\nexport class PrismaService\r\n  extends PrismaClient\r\n  implements OnModuleInit, OnModuleDestroy\r\n{\r\n  constructor() {\r\n    super({\r\n      datasources: {\r\n        db: {\r\n          url: 'postgresql://postgres:123456789@localhost:5432/teneno?schema=public',\r\n          // url: process.env.DATABASE_URL,\r\n        },\r\n      },\r\n    });\r\n  }\n\r\n  async onModuleInit() {\r\n    await this.$connect();\r\n  }\n\r\n  async onModuleDestroy() {\r\n    await this.$disconnect();\r\n  }\r\n\r\n  async enableShutdownHooks(app: INestApplication) {\r\n    this.$on('beforeExit', async () => {\r\n      await app.close();\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "extends": "PrismaClient",
            "type": "injectable"
        },
        {
            "name": "RtStrategy",
            "id": "injectable-RtStrategy-5a8fb8de6dcfdec6457f004b5070d705c40737e5f8c6fa2bedfa12322f4dff7d43a01046b2f1b32c263cac031d934e1949e58d56e483699804373ad2822c849c",
            "file": "src/infrastructure/auth/strategies/rt.strategy.ts",
            "properties": [],
            "methods": [
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "req",
                            "type": "Request",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "Request",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { PassportStrategy } from '@nestjs/passport';\r\nimport { ExtractJwt, Strategy } from 'passport-jwt';\r\nimport { Request } from 'express';\r\nimport { Inject, Injectable } from '@nestjs/common';\r\nimport { ConfigService } from '@nestjs/config';\r\n\r\n@Injectable()\r\nexport class RtStrategy extends PassportStrategy(Strategy, 'jwt-refresh') {\r\n  constructor(\r\n    @Inject(ConfigService)\r\n    private config: ConfigService,\r\n  ) {\r\n    super({\r\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\r\n      secretOrKey: config.get('REFRESH_TOKEN_SECRET'),\r\n      passReqToCallback: true,\r\n    });\r\n  }\n\r\n  validate(req: Request, payload: any) {\r\n    const refreshToken = req.get('authorization').replace('Bearer', '').trim();\r\n    return {\r\n      ...payload,\r\n      refreshToken,\r\n    };\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TimeoutInterceptor",
            "id": "injectable-TimeoutInterceptor-61088a1934a9200d3a55775349dab60694f52273074f803cf2a5d8a6c4e6f5c26b52f69b401ed2d22340f5cb2ccb822b5124c0a55af76834c27aa2a5a9d19733",
            "file": "src/core/interceptors/timeout.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "CallHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  CallHandler,\r\n  ExecutionContext,\r\n  Injectable,\r\n  NestInterceptor,\r\n} from '@nestjs/common';\r\nimport { Observable } from 'rxjs';\r\nimport { timeout } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class TimeoutInterceptor implements NestInterceptor {\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\r\n    return next.handle().pipe(timeout(1000));\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "TransformInterceptor",
            "id": "injectable-TransformInterceptor-16c4034e847673f6d915c65b6177a95d329c65e9933521516b6869e9de997196c7efae4d93995cd9e9a689efbed4c7d420e22bdf26e90f73ef3f8bcfa473aff2",
            "file": "src/core/interceptors/transform.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "CallHandler<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Response<T>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "CallHandler<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport interface Response<T> {\n  data: T;\n}\n\n@Injectable()\nexport class TransformInterceptor<T>\n  implements NestInterceptor<T, Response<T>>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler<T>,\n  ): Observable<Response<T>> {\n    return next.handle().pipe(map((data) => ({ data })));\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "UsersService",
            "id": "injectable-UsersService-2ccea5d10231ef71f4fdff4c5e57eb920ed4ac76ba95a209ae20fc445498bf6ef45659af180251d58f8a5b93d20a2784a1a8c6f59231f1c51cb37ed677a5307f",
            "file": "src/infrastructure/users/users.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteUserByEmail",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "LoginDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "LoginDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteUserById",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllUsers",
                    "args": [
                        {
                            "name": "dto",
                            "type": "PaginationDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "PaginationDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsersByEmailAndName",
                    "args": [
                        {
                            "name": "dto",
                            "type": "GetUserProfileByEmailNameDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "GetUserProfileByEmailNameDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUsersById",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUsersAvatar",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "UserAvatarDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "UserAvatarDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUsersCover",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "UserCoverDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "UserCoverDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUsersProfile",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "UserProfileDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "UserProfileDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ForbiddenException,\r\n  Injectable,\r\n  NotFoundException,\r\n} from '@nestjs/common';\r\nimport { LoginDto } from 'src/infrastructure/auth/dto';\r\nimport { comparePassword } from 'src/core/helpers/hash';\r\nimport { PrismaService } from 'src/infrastructure/prisma/prisma.service';\r\nimport {\r\n  GetUserProfileByEmailNameDto,\r\n  PaginationDto,\r\n  UserAvatarDto,\r\n  UserCoverDto,\r\n  UserProfileDto,\r\n} from './dto';\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n  constructor(private prismaService: PrismaService) {}\r\n\r\n  async getAllUsers(dto: PaginationDto) {\r\n    const total = await this.prismaService.user.count();\r\n    const user = await this.prismaService.user.findMany({\r\n      skip: Number(dto.limit) * (Number(dto.current) - 1),\r\n      take: Number(dto.limit),\r\n      orderBy: {\r\n        id: dto.order as any,\r\n      },\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        username: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n    return {\r\n      total,\r\n      orderBy: dto.order,\r\n      pageItems: user.length,\r\n      pageLimit: Number(dto.limit),\r\n      pageCurrent: Number(dto.current),\r\n      users: user,\r\n    };\r\n  }\r\n\r\n  async getUsersById(userId: string) {\r\n    return await this.prismaService.user.findUnique({\r\n      where: { id: userId },\r\n      select: {\r\n        id: true,\r\n        username: true,\r\n        email: true,\r\n        profile: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n  }\r\n\r\n  async getUsersByEmailAndName(dto: GetUserProfileByEmailNameDto) {\r\n    const user = await this.prismaService.user.findMany({\r\n      where: {\r\n        AND: [\r\n          {\r\n            email: dto.email,\r\n            username: dto.username,\r\n          },\r\n        ],\r\n      },\r\n      select: {\r\n        id: true,\r\n        username: true,\r\n        email: true,\r\n        profile: true,\r\n        createdAt: true,\r\n        updatedAt: true,\r\n      },\r\n    });\r\n    return user;\r\n  }\r\n\r\n  async updateUsersProfile(userId: string, dto: UserProfileDto) {\r\n    await this.prismaService.user.update({\r\n      where: { id: userId },\r\n      data: {\r\n        profile: {\r\n          update: {\r\n            ...dto,\r\n          },\r\n        },\r\n      },\r\n    });\r\n    const newProfile = await this.getUsersById(userId);\r\n    return newProfile;\r\n  }\r\n\r\n  async updateUsersAvatar(userId: string, dto: UserAvatarDto) {\r\n    await this.prismaService.user.update({\r\n      where: { id: userId },\r\n      data: {\r\n        profile: {\r\n          update: {\r\n            ...dto,\r\n          },\r\n        },\r\n      },\r\n    });\r\n    const newProfile = await this.getUsersById(userId);\r\n    return newProfile;\r\n  }\r\n\r\n  async updateUsersCover(userId: string, dto: UserCoverDto) {\r\n    await this.prismaService.user.update({\r\n      where: { id: userId },\r\n      data: {\r\n        profile: {\r\n          update: {\r\n            ...dto,\r\n          },\r\n        },\r\n      },\r\n    });\r\n    const newProfile = await this.getUsersById(userId);\r\n    return newProfile;\r\n  }\r\n\r\n  async deleteUserByEmail(userId: string, dto: LoginDto) {\r\n    const user = await this.prismaService.user.findUnique({\r\n      where: {\r\n        id: userId,\r\n      },\r\n    });\r\n\r\n    if (!user) throw new ForbiddenException('Access denied');\r\n\r\n    const matchPassword = await comparePassword(dto.password, user.password);\r\n\r\n    if (!matchPassword) throw new ForbiddenException('Access denied');\r\n\r\n    await this.prismaService.userProfile.delete({\r\n      where: {\r\n        userId: userId,\r\n      },\r\n    });\r\n    return matchPassword;\r\n  }\r\n\r\n  async deleteUserById(userId: string) {\r\n    const user = await this.prismaService.user.findUnique({\r\n      where: {\r\n        id: userId,\r\n      },\r\n    });\r\n\r\n    if (!user) throw new NotFoundException('Access denied');\r\n\r\n    await this.prismaService.user.delete({\r\n      where: {\r\n        id: userId,\r\n      },\r\n    });\r\n    return user;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "prismaService",
                        "type": "PrismaService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "prismaService",
                        "type": "PrismaService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ValidationPipe",
            "id": "injectable-ValidationPipe-0cc784cbbed2138069e3cf2b526847118847ec58c9bed50be8d5353e718f2acbfe59b7b9bf427299374b4012a69327151c0a298c968011774fcd6f9ec07d9324",
            "file": "src/core/pipes/validation.pipe.ts",
            "properties": [],
            "methods": [
                {
                    "name": "toValidate",
                    "args": [
                        {
                            "name": "metatype",
                            "type": "Type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "metatype",
                            "type": "Type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "metadata",
                            "type": "ArgumentMetadata",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "metadata",
                            "type": "ArgumentMetadata",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  ArgumentMetadata,\r\n  BadRequestException,\r\n  Injectable,\r\n  PipeTransform,\r\n  Type,\r\n} from '@nestjs/common';\r\nimport { plainToClass } from 'class-transformer';\r\nimport { validate } from 'class-validator';\r\n\r\n@Injectable()\r\nexport class ValidationPipe implements PipeTransform {\r\n  async transform(value: any, metadata: ArgumentMetadata) {\r\n    const { metatype } = metadata;\r\n    if (!metatype || !this.toValidate(metatype)) {\r\n      return value;\r\n    }\r\n    const object = plainToClass(metatype, value);\r\n    const errors = await validate(object);\r\n    if (errors.length > 0) {\r\n      throw new BadRequestException('Validation failed');\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private toValidate(metatype: Type): boolean {\r\n    const types = [String, Boolean, Number, Array, Object];\r\n    return !types.find((type) => metatype === type);\r\n  }\r\n}\r\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "RolesGuard",
            "id": "injectable-RolesGuard-6892bb555ad602d1e90ef720d4ae8c45d61553410e99ddb692b543708775c71201e1226b882d545f3f9a7975acd953651bb23bf69bd8573fb91f6dc78276b707",
            "file": "src/core/roles/roles.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "context",
                            "type": "ExecutionContext",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { ROLE } from './roles.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.getAllAndOverride<ROLE[]>('roles', [\n      context.getHandler(),\n      context.getClass(),\n    ]);\n    if (!requiredRoles) {\n      return true;\n    }\n    // return false;\n    const request = context.switchToHttp().getRequest();\n    const user = request.user;\n    const hasRole = () =>\n      user.roles.some((role) => !!requiredRoles.find((item) => item === role));\n\n    return user && user.roles && hasRole();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "reflector",
                        "type": "Reflector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AllExceptionsFilter",
            "id": "class-AllExceptionsFilter-bce7c55f7338bcfbaada8c5d8f4df285cd63660512a40b86591908289c0147a32bd03437404615cc72f3fd68aeed4bc432c93c46a1fc18c72b1a92a3b4d43ac2",
            "file": "src/core/filters/exception.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n  HttpStatus,\n  LoggerService,\n} from '@nestjs/common';\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces/features/arguments-host.interface';\nimport { Response } from 'express';\n\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  constructor(private logger: LoggerService) {}\n\n  catch(exception: HttpException | Error, host: ArgumentsHost): void {\n    const ctx: HttpArgumentsHost = host.switchToHttp();\n    const response: Response = ctx.getResponse();\n\n    this.handleMessage(exception);\n\n    AllExceptionsFilter.handleResponse(response, exception);\n  }\n\n  private handleMessage(exception: HttpException | Error): void {\n    let message = 'Internal Server Error';\n\n    if (exception instanceof HttpException) {\n      message = JSON.stringify(exception.getResponse());\n    } else if (exception instanceof Error) {\n      message = exception.stack.toString();\n    }\n\n    this.logger.error(message, exception);\n  }\n\n  private static handleResponse(\n    response: Response,\n    exception: HttpException | Error,\n  ): void {\n    let responseBody: any = { message: 'Internal server error' };\n    let statusCode = HttpStatus.INTERNAL_SERVER_ERROR;\n\n    if (exception instanceof HttpException) {\n      responseBody = exception.getResponse();\n      statusCode = exception.getStatus();\n    } else if (exception instanceof Error) {\n      responseBody = {\n        statusCode: statusCode,\n        message: exception.stack,\n      };\n    }\n\n    response.status(statusCode).json(responseBody);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "catch",
                    "args": [
                        {
                            "name": "exception",
                            "type": "HttpException | Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "host",
                            "type": "ArgumentsHost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "exception",
                            "type": "HttpException | Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "host",
                            "type": "ArgumentsHost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMessage",
                    "args": [
                        {
                            "name": "exception",
                            "type": "HttpException | Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "exception",
                            "type": "HttpException | Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "exception",
                            "type": "HttpException | Error",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "Response",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "exception",
                            "type": "HttpException | Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "implements": [
                "ExceptionFilter"
            ]
        },
        {
            "name": "ConversationEntity",
            "id": "class-ConversationEntity-b5d2f9700c2d8af477e9b5993490fc6d041630cf1bfa89bbd0f4a49900e6b632147f4d6708049a72e56d2c615368a971ad9cc0bd41dbf0efd9863c03ec1f0791",
            "file": "src/infrastructure/conversations/entities/conversation.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class ConversationEntity {\r\n  @ApiProperty()\r\n  id: string;\r\n\r\n  @ApiProperty()\r\n  name: string;\r\n\r\n  @ApiProperty({ required: false, nullable: true })\r\n  description: string | null;\r\n\r\n  @ApiProperty()\r\n  avatar: string;\r\n\r\n  @ApiProperty()\r\n  createdAt: Date;\r\n\r\n  @ApiProperty()\r\n  updatedAt: Date;\r\n\r\n  @ApiProperty()\r\n  members: string[];\r\n\r\n  @ApiProperty()\r\n  creator: string;\r\n\r\n  @ApiProperty()\r\n  admins: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "admins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "creator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{required: false, nullable: true}"
                        }
                    ]
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateConversationDto",
            "id": "class-CreateConversationDto-887b39c28a09f24f65116f5010fe1363cc0dfca0acc463b3c924cabd4cd76e524db70cab30eb6e6f4cffceec1833290759b4a328054234035046e553c0e24970",
            "file": "src/infrastructure/conversations/dto/create-conversation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\nimport {\r\n  IsAlphanumeric,\r\n  IsArray,\r\n  IsEmail,\r\n  IsNotEmpty,\r\n  IsString,\r\n  Length,\r\n  MaxLength,\r\n  MinLength,\r\n  Validate,\r\n} from 'class-validator';\r\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\r\n\r\nexport class CreateConversationDto {\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'group01',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  @Length(3, 20)\r\n  @MinLength(2, {\r\n    message: 'Name is too short, must be at least 3 characters!',\r\n  })\r\n  @MaxLength(21, {\r\n    message: 'Name is too long, must be at most 20 characters!',\r\n  })\r\n  @Validate(usenameValidator, {\r\n    message: 'Name must be not begin with number!',\r\n  })\r\n  name: string;\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'group01',\r\n    required: false,\r\n    nullable: true,\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  @Length(3, 120)\r\n  @MinLength(2, {\r\n    message: 'Description is too short, must be at least 3 characters!',\r\n  })\r\n  @MaxLength(121, {\r\n    message: 'Description is too long, must be at most 120 characters!',\r\n  })\r\n  @Validate(usenameValidator, {\r\n    message: 'Description must be not begin with number!',\r\n  })\r\n  description?: string;\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: ['user01', 'user02'],\r\n  })\r\n  @IsArray()\r\n  members: string[];\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: ['admin01', 'admin02'],\r\n  })\r\n  @IsArray()\r\n  admins: string[];\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'creator01',\r\n  })\r\n  @IsString()\r\n  creator: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "admins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: undefined}"
                        },
                        {
                            "name": "IsArray",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "creator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'creator01'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'group01', required: false, nullable: true}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Length",
                            "stringifiedArguments": "3, 120"
                        },
                        {
                            "name": "MinLength",
                            "stringifiedArguments": "2, {message: 'Description is too short, must be at least 3 characters!'}"
                        },
                        {
                            "name": "MaxLength",
                            "stringifiedArguments": "121, {message: 'Description is too long, must be at most 120 characters!'}"
                        },
                        {
                            "name": "Validate",
                            "stringifiedArguments": "usenameValidator, {message: 'Description must be not begin with number!'}"
                        }
                    ]
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: undefined}"
                        },
                        {
                            "name": "IsArray",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'group01'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Length",
                            "stringifiedArguments": "3, 20"
                        },
                        {
                            "name": "MinLength",
                            "stringifiedArguments": "2, {message: 'Name is too short, must be at least 3 characters!'}"
                        },
                        {
                            "name": "MaxLength",
                            "stringifiedArguments": "21, {message: 'Name is too long, must be at most 20 characters!'}"
                        },
                        {
                            "name": "Validate",
                            "stringifiedArguments": "usenameValidator, {message: 'Name must be not begin with number!'}"
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreateMessageDto",
            "id": "class-CreateMessageDto-230bd44f82736073f612420d74cc6d7ab30113cf155f0fddc7a26e021e2560a7549d3987a6415ce638f332a99bc6dba04d9c9ec0fbb3d4d9fa141164d9272293",
            "file": "src/infrastructure/messages/dto/create-message.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CreateMessageDto {\r\n  id: string;\r\n  senderId: string;\r\n  text: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "senderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CreatePostDto",
            "id": "class-CreatePostDto-50c8fad30d87640cd89202c371e5c11dfcd9a49abcd6d53e424375041a393308f4e7c78edc2a98414d50b132a95d23f8cc552ae6fdff0cc4e342e32af4281338",
            "file": "src/infrastructure/posts/dto/create-post.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IsArray, IsNotEmpty, IsString } from 'class-validator';\r\n\r\nexport class CreatePostDto {\r\n  @IsString()\r\n  title: string;\r\n\r\n  @IsString()\r\n  description: string;\r\n\r\n  @IsArray()\r\n  files: string[];\r\n\r\n  @IsString()\r\n  authorId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "authorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "IsArray",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteConversationDto",
            "id": "class-DeleteConversationDto-486f728b0d79515ab8e2872bbaf5e4fc56d8a6b9a19cbf90a92ff800282a6adc5e0e2043b295fc896609faf612d0075f2d02e02e32c961e07b586dd041272b4f",
            "file": "src/infrastructure/conversations/dto/delete-conversation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { GetAllConversationDto } from './get-conversation.dto';\r\n\r\nexport class DeleteConversationDto extends GetAllConversationDto {}\r\n",
            "properties": [
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'user-id-123-456-789'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "inheritance": {
                        "file": "GetAllConversationDto"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "GetAllConversationDto",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteOneAdminConversationDto",
            "id": "class-DeleteOneAdminConversationDto-9699bcac836610e32e7d5ef1d3839993c389e46e38aef7b64b4d2daf461826d287a2c64a393d060c09ef928fc9203e12f09912d40f9ed28d94351da22394f588",
            "file": "src/infrastructure/conversations/dto/update-conversation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty, PartialType } from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsString } from 'class-validator';\r\nimport { CreateConversationDto } from './create-conversation.dto';\r\n\r\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\r\n  name?: string;\r\n  description?: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport class UpdateMembersConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  members: string[];\r\n}\r\n\r\nexport class DeleteOneAdminConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  creator: string;\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'user-id-123-456-789',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  userId: string;\r\n}\r\n\r\nexport class UpdateRolesConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  creator: string;\r\n  admins: string[];\r\n  members: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "creator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'user-id-123-456-789'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DeleteOnePost",
            "id": "class-DeleteOnePost-9fa168ccd60f6edab690bb40fb6744e06a09afbc151c6be43c234d0dfa71fadc678b36091880b818bbfc58836861fd6d69b6be2b7fb23e0afc6a94b897aca547",
            "file": "src/infrastructure/posts/dto/delete-post.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IsNotEmpty, IsString } from 'class-validator';\r\n\r\nexport class DeleteOnePost {\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  postId: string;\r\n\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  authorId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "authorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorAcceptableException",
            "id": "class-ErrorAcceptableException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "NotAcceptableException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorBadGatewayException",
            "id": "class-ErrorBadGatewayException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "BadGatewayException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorBadRequestException",
            "id": "class-ErrorBadRequestException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "BadRequestException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorForbiddenException",
            "id": "class-ErrorForbiddenException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "ForbiddenException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorGatewayTimeoutException",
            "id": "class-ErrorGatewayTimeoutException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "GatewayTimeoutException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorInternalServerException",
            "id": "class-ErrorInternalServerException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "InternalServerErrorException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorMethodNotAllowedException",
            "id": "class-ErrorMethodNotAllowedException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 64,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "MethodNotAllowedException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorNotFoundException",
            "id": "class-ErrorNotFoundException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "NotFoundException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorRequestTimeoutException",
            "id": "class-ErrorRequestTimeoutException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 46,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "RequestTimeoutException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorServiceUnavailableException",
            "id": "class-ErrorServiceUnavailableException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 70,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "ServiceUnavailableException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorUnauthorizedException",
            "id": "class-ErrorUnauthorizedException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "ForbiddenException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ErrorUnsupportedMediaTypeException",
            "id": "class-ErrorUnsupportedMediaTypeException-6a8b790f3c9f02ead75b1263d15dd9ef06a853fe30a222228c0a66ff54564e89a9c86f0a0844c9133538ada1f69cc71c7c721924e1ebdde6444427f5f8960418",
            "file": "src/core/filters/custom.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  BadGatewayException,\n  BadRequestException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnsupportedMediaTypeException,\n} from '@nestjs/common';\n\n// Http error\nexport class ErrorNotFoundException extends NotFoundException {\n  constructor(error?: string) {\n    super('Not found - Error: ', error);\n  }\n}\n\nexport class ErrorUnauthorizedException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Unauthorized - Error: ', error);\n  }\n}\n\nexport class ErrorForbiddenException extends ForbiddenException {\n  constructor(error?: string) {\n    super('Forbidden - Error: ', error);\n  }\n}\n\nexport class ErrorBadRequestException extends BadRequestException {\n  constructor(error?: string) {\n    super('Bad request - Error: ', error);\n  }\n}\n\nexport class ErrorAcceptableException extends NotAcceptableException {\n  constructor(error?: string) {\n    super('Not acceptable - Error: ', error);\n  }\n}\n\nexport class ErrorRequestTimeoutException extends RequestTimeoutException {\n  constructor(error?: string) {\n    super('Request timeout - Error: ', error);\n  }\n}\n\nexport class ErrorUnsupportedMediaTypeException extends UnsupportedMediaTypeException {\n  constructor(error?: string) {\n    super('Unsupported media type - Error: ', error);\n  }\n}\n\nexport class ErrorInternalServerException extends InternalServerErrorException {\n  constructor(error?: string) {\n    super('Internal server error - Error: ', error);\n  }\n}\n\nexport class ErrorMethodNotAllowedException extends MethodNotAllowedException {\n  constructor(error?: string) {\n    super('Method not allowed - Error: ', error);\n  }\n}\n\nexport class ErrorServiceUnavailableException extends ServiceUnavailableException {\n  constructor(error?: string) {\n    super('Service unavailable - Error: ', error);\n  }\n}\n\n// Gateway error\nexport class ErrorBadGatewayException extends BadGatewayException {\n  constructor(error?: string) {\n    super('Bad gateway - Error: ', error);\n  }\n}\n\nexport class ErrorGatewayTimeoutException extends GatewayTimeoutException {\n  constructor(error?: string) {\n    super('Gateway timeout - Error: ', error);\n  }\n}\n\n// ConflictException\n// GoneException\n// PayloadTooLargeException\n// UnprocessableEntityException\n// NotImplementedException\n// ImATeapotException\n\n// https://github.dev/NarHakobyan/awesome-nest-boilerplate\n// https://viblo.asia/p/framework-nestjs-exception-filters-bWrZn7qrlxw\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "extends": "UnsupportedMediaTypeException",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FilesService",
            "id": "class-FilesService-bac427ae6734cb8f34e1ddd49e53af25639cf76bacf4ab7bc51476f1064fb23b5fb557dc87465c482d54366b9c17fa36ae00790f5bedb8bc4ca3f0fe919a3a55",
            "file": "src/infrastructure/files/files.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ISingleFile, IArrayFile } from './interfaces';\n\nexport class FilesService {\n  async uploadAvatar(file: Express.Multer.File): Promise<ISingleFile> {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadCover(file: Express.Multer.File): Promise<ISingleFile> {\n    return {\n      originalName: file.originalname,\n      fileName: file.filename,\n      size: file.size,\n    };\n  }\n\n  async uploadPosts(files: Array<Express.Multer.File>): Promise<IArrayFile> {\n    return {\n      files: files.map((file) => {\n        return {\n          originalName: file.originalname,\n          fileName: file.filename,\n          size: file.size,\n        };\n      }),\n    };\n  }\n\n  async uploadMulti(files: Express.Multer.File[]): Promise<any> {\n    return { files: files };\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "uploadAvatar",
                    "args": [
                        {
                            "name": "file",
                            "type": "Express.Multer.File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ISingleFile>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "Express.Multer.File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadCover",
                    "args": [
                        {
                            "name": "file",
                            "type": "Express.Multer.File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ISingleFile>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "Express.Multer.File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadMulti",
                    "args": [
                        {
                            "name": "files",
                            "type": "Express.Multer.File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "Express.Multer.File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadPosts",
                    "args": [
                        {
                            "name": "files",
                            "type": "Array<Express.Multer.File>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<IArrayFile>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "Array<Express.Multer.File>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "fullNameValidator",
            "id": "class-fullNameValidator-2eaacc18f01dbd8740a185c68e9436fd91c52f43e9830bad874bbd3e4df43ae6751c5320ef77416e964f875e1d97156161e64c5f641825735301e97d06387861",
            "file": "src/core/validators/fullName.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  ValidatorConstraint,\r\n  ValidatorConstraintInterface,\r\n  ValidationArguments,\r\n} from 'class-validator';\r\n\r\nconst pattern = /^[a-z]\\w/;\r\n\r\n@ValidatorConstraint({ name: 'customText', async: false })\r\nexport class fullNameValidator implements ValidatorConstraintInterface {\r\n  validate(text: string, args: ValidationArguments) {\r\n    return pattern.test(text);\r\n  }\r\n\r\n  defaultMessage(args: ValidationArguments) {\r\n    return 'Full name has must filled !' + args;\r\n  }\r\n}\r\n",
            "properties": [],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "defaultMessage",
                    "args": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "implements": [
                "ValidatorConstraintInterface"
            ]
        },
        {
            "name": "GetAllConversationDto",
            "id": "class-GetAllConversationDto-cc804e4ad9a98ba218dcad1cfba50990fbc252f200591ad0eafd1f7b7e3608101645f1aad12580965faac183bbfcdc597b3a83ea603d66de0f0ed2e9a7ca9792",
            "file": "src/infrastructure/conversations/dto/get-conversation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsString } from 'class-validator';\r\n\r\nexport class GetAllConversationDto {\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'user-id-123-456-789',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  userId: string;\r\n}\r\n\r\nexport class GetOneConversationDto extends GetAllConversationDto {}\r\n",
            "properties": [
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'user-id-123-456-789'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetAllPostOfUserDto",
            "id": "class-GetAllPostOfUserDto-b29aef15c42046e76b3c63b172deff8302aa903ccce43d85700ff75059c2ddfc4fc8a688917057cc5c121c103f146ea4818f5617a76b8553f88fdf3bebc0d1a2",
            "file": "src/infrastructure/posts/dto/get-post.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { IsNotEmpty, IsString } from 'class-validator';\r\n\r\nexport class GetAllPostOfUserDto {\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  userId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetOneConversationDto",
            "id": "class-GetOneConversationDto-cc804e4ad9a98ba218dcad1cfba50990fbc252f200591ad0eafd1f7b7e3608101645f1aad12580965faac183bbfcdc597b3a83ea603d66de0f0ed2e9a7ca9792",
            "file": "src/infrastructure/conversations/dto/get-conversation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsString } from 'class-validator';\r\n\r\nexport class GetAllConversationDto {\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'user-id-123-456-789',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  userId: string;\r\n}\r\n\r\nexport class GetOneConversationDto extends GetAllConversationDto {}\r\n",
            "properties": [
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'user-id-123-456-789'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ],
                    "inheritance": {
                        "file": "GetAllConversationDto"
                    }
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "GetAllConversationDto",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GetUserProfileByEmailNameDto",
            "id": "class-GetUserProfileByEmailNameDto-f70f6b2225876bb20738450c1d078f65d444d41adaf722feb83353ca7c792f768f471531c3ba2c219cd50ef71cf8b45672ebec2b6804cf84777f312935eda548",
            "file": "src/infrastructure/users/dto/get-user.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/swagger';\r\nimport { UserProfileDto } from '.';\r\n\r\nexport class GetUserProfileByEmailNameDto extends PartialType(UserProfileDto) {\r\n  email: string;\r\n  username: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "HttpExceptionFilter",
            "id": "class-HttpExceptionFilter-db95e0f2bc363f9a9d9cd729ff9207ca6c6cea2fb7d22f0b2ccd9a6ab7c760e658965e68be4daa14d424a550ab0fbfcf6541520609357e0f1610620c73daa974",
            "file": "src/core/filters/http.filter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter<HttpException> {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse<Response>();\n    const request = ctx.getRequest<Request>();\n    const status = exception.getStatus();\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n    });\n  }\n}\n",
            "properties": [],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "catch",
                    "args": [
                        {
                            "name": "exception",
                            "type": "HttpException",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "host",
                            "type": "ArgumentsHost",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "exception",
                            "type": "HttpException",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "host",
                            "type": "ArgumentsHost",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "implements": [
                "ExceptionFilter"
            ]
        },
        {
            "name": "LoggerModule",
            "id": "class-LoggerModule-7503f91e24f19f67cf9921a589a10273164258beaf6c6942709e4faf0e5c0bb9f328a9ee61687c2d7e628d54f56f0d31f984766325fd5d3e564185a797c6405f",
            "file": "src/core/logger/logger.module.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DynamicModule } from '@nestjs/common';\nimport { createLoggerProviders } from './logger.provider';\nimport { LoggerService } from './logger.service';\n\nexport class LoggerModule {\n  static forRoot(): DynamicModule {\n    const prefixedLoggerProviders = createLoggerProviders();\n    return {\n      module: LoggerModule,\n      providers: [LoggerService, ...prefixedLoggerProviders],\n      exports: [LoggerService, ...prefixedLoggerProviders],\n    };\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "forRoot",
                    "args": [],
                    "optional": false,
                    "returnType": "DynamicModule",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginDto",
            "id": "class-LoginDto-f370ca8ed2af297ecb8b8ca0120ad7b2612c334773912efaaaa8c76c0bb337f8b4a471a4760616862ad952942e5b1091949f6c97cace0b5114ad29a3b13efd18",
            "file": "src/infrastructure/auth/dto/sigin.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\r\n\r\nexport class LoginDto {\r\n  @IsNotEmpty()\r\n  @IsEmail()\r\n  @ApiProperty({\r\n    type: String,\r\n    description: 'This is a required property',\r\n    example: 'example@gmail.com',\r\n  })\r\n  email: string;\r\n\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  @ApiProperty({\r\n    type: String,\r\n    description: 'This is a required property',\r\n    example: 'password123',\r\n  })\r\n  password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsEmail",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, description: 'This is a required property', example: 'example@gmail.com'}"
                        }
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, description: 'This is a required property', example: 'password123'}"
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MessagesGateway",
            "id": "class-MessagesGateway-38b6c1c53fa030733e7b056275bbae0d50cd769277a5182cb74ab6c02fedfcff13831905a885e168ab6899d5a958f743a71cd3742a36b5d206b5dd5bc3f6580a",
            "file": "src/infrastructure/messages/messages.gateway.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  WebSocketGateway,\r\n  SubscribeMessage,\r\n  MessageBody,\r\n  WebSocketServer,\r\n  ConnectedSocket,\r\n} from '@nestjs/websockets';\r\nimport { MessagesService } from './messages.service';\r\nimport { Server } from 'http';\r\nimport { Socket } from 'socket.io';\r\nimport { CreateMessageDto, UpdateMessageDto } from './dto';\r\n\r\n@WebSocketGateway({ cors: { origin: '*' } })\r\nexport class MessagesGateway {\r\n  @WebSocketServer() server: Server;\r\n  constructor(private readonly messagesService: MessagesService) {}\r\n\r\n  @SubscribeMessage('joinConversation')\r\n  joinConversation(\r\n    @MessageBody('conversationId') conversationId: string,\r\n    @MessageBody('senderId') senderId: string,\r\n    @ConnectedSocket() client: Socket,\r\n  ) {\r\n    return this.messagesService.joinConversation(\r\n      conversationId,\r\n      senderId,\r\n      client.id,\r\n    );\r\n  }\r\n\r\n  @SubscribeMessage('findAllMessages')\r\n  findAllMessages(@MessageBody('conversationId') conversationId: string) {\r\n    return this.messagesService.findAllMessages(conversationId);\r\n  }\r\n\r\n  @SubscribeMessage('createMessage')\r\n  async createMessage(\r\n    @MessageBody('conversationId') conversationId: string,\r\n    @MessageBody() createMessageDto: CreateMessageDto,\r\n    @ConnectedSocket() client: Socket,\r\n  ) {\r\n    const message = await this.messagesService.createMessage(\r\n      conversationId,\r\n      createMessageDto,\r\n      client.id,\r\n    );\r\n    this.server.emit('message', message);\r\n    return message;\r\n  }\r\n\r\n  @SubscribeMessage('typing')\r\n  async typing(\r\n    @MessageBody('conversationId') conversationId: string,\r\n    @MessageBody('isTyping') isTyping: boolean,\r\n    @ConnectedSocket() client: Socket,\r\n  ) {\r\n    const name = await this.messagesService.getMember(\r\n      conversationId,\r\n      client.id,\r\n    );\r\n\r\n    client.broadcast.emit('typing', { senderId: name, isTyping });\r\n  }\r\n\r\n  @SubscribeMessage('updateMessage')\r\n  updateMessage(@MessageBody() updateMessageDto: UpdateMessageDto) {\r\n    const refresh = this.messagesService.updateMessage(updateMessageDto);\r\n    this.server.emit('refresh', refresh);\r\n    return refresh;\r\n  }\r\n\r\n  @SubscribeMessage('removeMessage')\r\n  async remove(@MessageBody() message: string) {\r\n    const refresh = await this.messagesService.remove(message);\r\n    this.server.emit('refresh', refresh);\r\n    return refresh;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messagesService",
                        "type": "MessagesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "messagesService",
                        "type": "MessagesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "server",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Server",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "WebSocketServer",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "createMessage",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "createMessageDto",
                            "type": "CreateMessageDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "client",
                            "type": "Socket",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "SubscribeMessage",
                            "stringifiedArguments": "'createMessage'"
                        }
                    ],
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "createMessageDto",
                            "type": "CreateMessageDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "client",
                            "type": "Socket",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findAllMessages",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "SubscribeMessage",
                            "stringifiedArguments": "'findAllMessages'"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "joinConversation",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "senderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "client",
                            "type": "Socket",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "SubscribeMessage",
                            "stringifiedArguments": "'joinConversation'"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "senderId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "client",
                            "type": "Socket",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "SubscribeMessage",
                            "stringifiedArguments": "'removeMessage'"
                        }
                    ],
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "typing",
                    "args": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isTyping",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "client",
                            "type": "Socket",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "SubscribeMessage",
                            "stringifiedArguments": "'typing'"
                        }
                    ],
                    "modifierKind": [
                        131
                    ],
                    "jsdoctags": [
                        {
                            "name": "conversationId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isTyping",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "client",
                            "type": "Socket",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMessage",
                    "args": [
                        {
                            "name": "updateMessageDto",
                            "type": "UpdateMessageDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "SubscribeMessage",
                            "stringifiedArguments": "'updateMessage'"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "updateMessageDto",
                            "type": "UpdateMessageDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": []
        },
        {
            "name": "PaginationDto",
            "id": "class-PaginationDto-41519be753351ae9fdd562ca9e6d60fc5c12d7a4a0830a1cb435a39b30ccb24c7ffa8dc32185c04d7c52b15d4f1b76338cd87ca47424d769d74a3cf9adedda02",
            "file": "src/infrastructure/users/dto/pagination.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport class PaginationDto {\r\n  @IsString()\r\n  @ApiProperty({ type: Number, example: 1 })\r\n  current: string;\r\n\r\n  @IsString()\r\n  @ApiProperty({ type: Number, example: 3 })\r\n  limit: string;\r\n\r\n  @IsString()\r\n  @ApiProperty({ type: String, description: 'asc, desc', example: 'asc' })\r\n  order: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "current",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: Number, example: 1}"
                        }
                    ]
                },
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: Number, example: 3}"
                        }
                    ]
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, description: 'asc, desc', example: 'asc'}"
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "passwordValidator",
            "id": "class-passwordValidator-03b96f7aa0da847ed5955a574948f4f35cc64e521cf7c25c318e1419b61aaba4b1867e499ecffe8558a96f1e5f5ac91b381ca68df0582a09fcbd3ebda7ac40f8",
            "file": "src/core/validators/password.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  ValidatorConstraint,\r\n  ValidatorConstraintInterface,\r\n  ValidationArguments,\r\n} from 'class-validator';\r\n\r\nconst pattern =\r\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/;\r\n\r\n@ValidatorConstraint({ name: 'customText', async: false })\r\nexport class passwordValidator implements ValidatorConstraintInterface {\r\n  validate(text: string, args: ValidationArguments) {\r\n    return pattern.test(text);\r\n  }\r\n\r\n  defaultMessage(args: ValidationArguments) {\r\n    return 'Username has must filled !';\r\n  }\r\n}\r\n",
            "properties": [],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "defaultMessage",
                    "args": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "implements": [
                "ValidatorConstraintInterface"
            ]
        },
        {
            "name": "phoneNumberValidator",
            "id": "class-phoneNumberValidator-b57edd4ccc1fff38f03be193ab08e1f122f549978786e7461fe68e3d3806b5891a3079d5188cd2d7a37ebafb8dd543a77780df7518c4749a64e1cce3b55862e6",
            "file": "src/core/validators/phoneNumber.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  ValidatorConstraint,\r\n  ValidatorConstraintInterface,\r\n  ValidationArguments,\r\n} from 'class-validator';\r\n\r\nconst pattern = /^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/;\r\n\r\n@ValidatorConstraint({ name: 'customText', async: false })\r\nexport class phoneNumberValidator implements ValidatorConstraintInterface {\r\n  validate(text: string, args: ValidationArguments) {\r\n    return pattern.test(text);\r\n  }\r\n\r\n  defaultMessage(args: ValidationArguments) {\r\n    return 'Phone number has must filled !';\r\n  }\r\n}\r\n",
            "properties": [],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "defaultMessage",
                    "args": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "implements": [
                "ValidatorConstraintInterface"
            ]
        },
        {
            "name": "Post",
            "id": "class-Post-59617000aa2c9f596acb1473a12779c6a61f3271e120e14be213b8f2910974171717116565ab1bdfea2a246ce95c1ef0f3486b3cff74b9cb478729064bdf2de4",
            "file": "src/infrastructure/posts/entities/post.entity.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Post {}\r\n",
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ReactionsPost",
            "id": "class-ReactionsPost-50002256a73ab6177bd87d55ebf06dea469d1c812fe701613b287382c536ebc7e69676fd16a53115d0ba087d5e861622437f671b91885e9b52b65ee29eb3ff34",
            "file": "src/infrastructure/posts/dto/update-post.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/swagger';\r\nimport { IsJSON, IsNotEmpty, IsNumber, IsString } from 'class-validator';\r\nimport { CreatePostDto } from './create-post.dto';\r\n\r\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\r\n  title?: string;\r\n  description?: string;\r\n  files?: string[];\r\n  authorId: string;\r\n\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  postId: string;\r\n}\r\n\r\nexport class ReactionsPost {\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  postId: string;\r\n\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  favouritorId: string;\r\n\r\n  @IsNumber()\r\n  @IsNotEmpty()\r\n  reactionType: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "favouritorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "reactionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "IsNumber",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "RtGuard",
            "id": "class-RtGuard-a03631941d53caba64914d4614ef1c2651d803255de96e970e1ed3201ef25e7e4167b7a423b9bbb5fc048058566752c9d5edfb05653b8f65336d14ea4d392a36",
            "file": "src/infrastructure/auth/guards/rt.guard.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AuthGuard } from '@nestjs/passport';\n\nexport class RtGuard extends AuthGuard('jwt-refresh') {\n  constructor() {\n    super();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 3
            },
            "properties": [],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SignupDto",
            "id": "class-SignupDto-6250dd818bf00a3c60e2a81e5fe5dd5f72124d673641a589b20b3235cf0593097c558695725b8c8d0c35c139c691a17041a23b19a96d18cafd06de46f07c2a24",
            "file": "src/infrastructure/auth/dto/signup.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\r\nimport {\r\n  IsAlphanumeric,\r\n  IsEmail,\r\n  IsNotEmpty,\r\n  IsString,\r\n  Length,\r\n  MaxLength,\r\n  MinLength,\r\n  Validate,\r\n} from 'class-validator';\r\nimport { passwordValidator, usenameValidator } from 'src/core/validators';\r\n\r\nexport class SignupDto {\r\n  @IsNotEmpty()\r\n  @IsEmail()\r\n  @ApiProperty({\r\n    type: String,\r\n    description: 'This is a required property',\r\n    example: 'example@gmail.com',\r\n  })\r\n  email: string;\r\n\r\n  @IsNotEmpty()\r\n  @ApiProperty({\r\n    type: String,\r\n    description: 'This is a required property',\r\n    example: 'password123',\r\n  })\r\n  @Length(8, 21)\r\n  @MinLength(7, {\r\n    message: 'Password is too short, must be at least 8 characters!',\r\n  })\r\n  @MaxLength(21, {\r\n    message: 'Password is too long, must be at most 20 characters!',\r\n  })\r\n  @Validate(passwordValidator, {\r\n    message:\r\n      'Password must be at contain at least one number, one uppercase letter and one special character',\r\n  })\r\n  password: string;\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'username123',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  @IsAlphanumeric()\r\n  @Length(3, 20)\r\n  @MinLength(2, {\r\n    message: 'Name is too short, must be at least 3 characters!',\r\n  })\r\n  @MaxLength(21, {\r\n    message: 'Name is too long, must be at most 20 characters!',\r\n  })\r\n  @Validate(usenameValidator, {\r\n    message: 'Username must be not begin with number!',\r\n  })\r\n  username: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsEmail",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, description: 'This is a required property', example: 'example@gmail.com'}"
                        }
                    ]
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, description: 'This is a required property', example: 'password123'}"
                        },
                        {
                            "name": "Length",
                            "stringifiedArguments": "8, 21"
                        },
                        {
                            "name": "MinLength",
                            "stringifiedArguments": "7, {message: 'Password is too short, must be at least 8 characters!'}"
                        },
                        {
                            "name": "MaxLength",
                            "stringifiedArguments": "21, {message: 'Password is too long, must be at most 20 characters!'}"
                        },
                        {
                            "name": "Validate",
                            "stringifiedArguments": "passwordValidator, {message: 'Password must be at contain at least one number, one uppercase letter and one special character'}"
                        }
                    ]
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'username123'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsAlphanumeric",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Length",
                            "stringifiedArguments": "3, 20"
                        },
                        {
                            "name": "MinLength",
                            "stringifiedArguments": "2, {message: 'Name is too short, must be at least 3 characters!'}"
                        },
                        {
                            "name": "MaxLength",
                            "stringifiedArguments": "21, {message: 'Name is too long, must be at most 20 characters!'}"
                        },
                        {
                            "name": "Validate",
                            "stringifiedArguments": "usenameValidator, {message: 'Username must be not begin with number!'}"
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateConversationDto",
            "id": "class-UpdateConversationDto-9699bcac836610e32e7d5ef1d3839993c389e46e38aef7b64b4d2daf461826d287a2c64a393d060c09ef928fc9203e12f09912d40f9ed28d94351da22394f588",
            "file": "src/infrastructure/conversations/dto/update-conversation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty, PartialType } from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsString } from 'class-validator';\r\nimport { CreateConversationDto } from './create-conversation.dto';\r\n\r\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\r\n  name?: string;\r\n  description?: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport class UpdateMembersConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  members: string[];\r\n}\r\n\r\nexport class DeleteOneAdminConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  creator: string;\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'user-id-123-456-789',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  userId: string;\r\n}\r\n\r\nexport class UpdateRolesConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  creator: string;\r\n  admins: string[];\r\n  members: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateMembersConversationDto",
            "id": "class-UpdateMembersConversationDto-9699bcac836610e32e7d5ef1d3839993c389e46e38aef7b64b4d2daf461826d287a2c64a393d060c09ef928fc9203e12f09912d40f9ed28d94351da22394f588",
            "file": "src/infrastructure/conversations/dto/update-conversation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty, PartialType } from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsString } from 'class-validator';\r\nimport { CreateConversationDto } from './create-conversation.dto';\r\n\r\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\r\n  name?: string;\r\n  description?: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport class UpdateMembersConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  members: string[];\r\n}\r\n\r\nexport class DeleteOneAdminConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  creator: string;\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'user-id-123-456-789',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  userId: string;\r\n}\r\n\r\nexport class UpdateRolesConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  creator: string;\r\n  admins: string[];\r\n  members: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateMessageDto",
            "id": "class-UpdateMessageDto-5e55f1981162c8689094fd9c262ade9cc0aa47b1153adcc104fa97816e92f0f56b9b5d6adef07ab0daf9861cfbf4ab8637b4b1302039d92b9fb64b772f800117",
            "file": "src/infrastructure/messages/dto/update-message.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/mapped-types';\r\nimport { CreateMessageDto } from './create-message.dto';\r\n\r\nexport class UpdateMessageDto extends PartialType<CreateMessageDto>(\r\n  CreateMessageDto,\r\n) {\r\n  id: string;\r\n  conversationId: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "conversationId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdatePasswordDto",
            "id": "class-UpdatePasswordDto-c831caa74b57fa314c8b945d0ad97b9dd977632e88ebd808dd23d8e072da12fb7dafb8590845f2c01fb90b46c697d9a37186b2479c678776b747ed403826ef3e",
            "file": "src/infrastructure/auth/dto/password.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class UpdatePasswordDto {\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'example@gmail.com',\n  })\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    type: String,\n    description: 'This is a required property',\n    example: 'password123',\n  })\n  newPassword: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsEmail",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, description: 'This is a required property', example: 'example@gmail.com'}"
                        }
                    ]
                },
                {
                    "name": "newPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, description: 'This is a required property', example: 'password123'}"
                        }
                    ]
                },
                {
                    "name": "oldPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, description: 'This is a required property', example: 'password123'}"
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdatePostDto",
            "id": "class-UpdatePostDto-50002256a73ab6177bd87d55ebf06dea469d1c812fe701613b287382c536ebc7e69676fd16a53115d0ba087d5e861622437f671b91885e9b52b65ee29eb3ff34",
            "file": "src/infrastructure/posts/dto/update-post.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { PartialType } from '@nestjs/swagger';\r\nimport { IsJSON, IsNotEmpty, IsNumber, IsString } from 'class-validator';\r\nimport { CreatePostDto } from './create-post.dto';\r\n\r\nexport class UpdatePostDto extends PartialType(CreatePostDto) {\r\n  title?: string;\r\n  description?: string;\r\n  files?: string[];\r\n  authorId: string;\r\n\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  postId: string;\r\n}\r\n\r\nexport class ReactionsPost {\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  postId: string;\r\n\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  favouritorId: string;\r\n\r\n  @IsNumber()\r\n  @IsNotEmpty()\r\n  reactionType: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "authorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "postId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "IsNotEmpty",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UpdateRolesConversationDto",
            "id": "class-UpdateRolesConversationDto-9699bcac836610e32e7d5ef1d3839993c389e46e38aef7b64b4d2daf461826d287a2c64a393d060c09ef928fc9203e12f09912d40f9ed28d94351da22394f588",
            "file": "src/infrastructure/conversations/dto/update-conversation.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty, PartialType } from '@nestjs/swagger';\r\nimport { IsNotEmpty, IsString } from 'class-validator';\r\nimport { CreateConversationDto } from './create-conversation.dto';\r\n\r\nexport class UpdateConversationDto extends PartialType(CreateConversationDto) {\r\n  name?: string;\r\n  description?: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport class UpdateMembersConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  members: string[];\r\n}\r\n\r\nexport class DeleteOneAdminConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  creator: string;\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'user-id-123-456-789',\r\n  })\r\n  @IsString()\r\n  @IsNotEmpty()\r\n  userId: string;\r\n}\r\n\r\nexport class UpdateRolesConversationDto extends PartialType(\r\n  CreateConversationDto,\r\n) {\r\n  creator: string;\r\n  admins: string[];\r\n  members: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "admins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "creator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "usenameValidator",
            "id": "class-usenameValidator-c3ce9092dd7c31d478893180f2db453c521d111d0d32958f600ce24ec2e3de492372bc3f01f40df558b7345b38be738f1b933c47a018c85b4985f9e38f07ea55",
            "file": "src/core/validators/username.validator.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  ValidatorConstraint,\r\n  ValidatorConstraintInterface,\r\n  ValidationArguments,\r\n} from 'class-validator';\r\n\r\nconst pattern = /^[a-z]\\w/;\r\n\r\n@ValidatorConstraint({ name: 'customText', async: false })\r\nexport class usenameValidator implements ValidatorConstraintInterface {\r\n  validate(text: string, args: ValidationArguments) {\r\n    return pattern.test(text);\r\n  }\r\n\r\n  defaultMessage(args: ValidationArguments) {\r\n    return 'Username has must filled !';\r\n  }\r\n}\r\n",
            "properties": [],
            "rawdescription": "\n",
            "methods": [
                {
                    "name": "defaultMessage",
                    "args": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "ValidationArguments",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "implements": [
                "ValidatorConstraintInterface"
            ]
        },
        {
            "name": "UserAvatarDto",
            "id": "class-UserAvatarDto-6e34710cdc66a5e8049f591c843f598d7f9a8ddb7f243090a98bba57d0c6a6b4d46263d78e5dfbdae9977cd18708a7ddb37a346e44caf8fa5b46d58c685f8698",
            "file": "src/infrastructure/users/dto/user-avatar.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport class UserAvatarDto {\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'Avatar example 1 url',\r\n  })\r\n  @IsString()\r\n  avatar: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'Avatar example 1 url'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserCoverDto",
            "id": "class-UserCoverDto-38e9a9b217efa5dcb42d98317de5b6bcdc058e1527eb856d15c38a6c6b30d098cd3fd3fdfd3df574706613e85d56778ebacb3afdb373aefc5595086073c75543",
            "file": "src/infrastructure/users/dto/user-cover.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\r\nimport { IsString } from 'class-validator';\r\n\r\nexport class UserCoverDto {\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'Cover example 1 url',\r\n  })\r\n  @IsString()\r\n  cover: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "cover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'Cover example 1 url'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserProfileDto",
            "id": "class-UserProfileDto-18e0289ec1c571f98414ab58776fd26294bba12fdd3f6f6ccb79d0f2710cecf3834ffcf3db91b2ef97726865730c78650587607daf81ac38a04661afd18bc854",
            "file": "src/infrastructure/users/dto/users-profile.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ApiProperty } from '@nestjs/swagger';\r\nimport { Type } from 'class-transformer';\r\nimport {\r\n  IsAlphanumeric,\r\n  IsArray,\r\n  IsDate,\r\n  IsNumber,\r\n  IsString,\r\n  Length,\r\n  Max,\r\n  MaxLength,\r\n  Min,\r\n  MinLength,\r\n  Validate,\r\n} from 'class-validator';\r\nimport {\r\n  fullNameValidator,\r\n  phoneNumberValidator,\r\n} from '../../../core/validators';\r\n\r\nexport class UserProfileDto {\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'Hello ABC',\r\n  })\r\n  @IsString()\r\n  @Length(3, 45)\r\n  @MinLength(2, {\r\n    message: 'Full name is too short, must be at least 3 characters!',\r\n  })\r\n  @MaxLength(46, {\r\n    message: 'Name is too long, must be at most 45 characters!',\r\n  })\r\n  @Validate(fullNameValidator, {\r\n    message: 'Full name must be not begin with number!',\r\n  })\r\n  fullName: string;\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'Avatar example 1 url',\r\n  })\r\n  @IsString()\r\n  avatar: string;\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'Cover example 1 url',\r\n  })\r\n  @IsString()\r\n  cover: string;\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'Single',\r\n  })\r\n  @IsString()\r\n  marriageStatus: string;\r\n\r\n  @ApiProperty({\r\n    type: [],\r\n    example: ['Music', 'Sport', 'Travel'],\r\n  })\r\n  @IsArray()\r\n  interests: [];\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: '123, Address A, City B, Country C',\r\n  })\r\n  @IsString()\r\n  @MaxLength(101, {\r\n    message: 'Address is too long, must be at most 100 characters!',\r\n  })\r\n  address: string;\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: '09999999999',\r\n  })\r\n  @IsString()\r\n  @Validate(phoneNumberValidator, { message: 'Phone number is invalid!' })\r\n  phone: string;\r\n\r\n  @ApiProperty({ example: '2021-07-02T05:01:03.938Z' })\r\n  @Type(() => Date)\r\n  @IsDate()\r\n  birthdate: Date;\r\n\r\n  @ApiProperty({\r\n    type: Number,\r\n    example: 19,\r\n  })\r\n  @IsNumber()\r\n  @Min(17, {\r\n    message: 'You must be at least 18 years old!',\r\n  })\r\n  @Max(101, {\r\n    message: 'You must be at most 100 years old!',\r\n  })\r\n  age: number;\r\n\r\n  @ApiProperty({\r\n    type: String,\r\n    example: 'This is bio of Hello ABC account',\r\n  })\r\n  @IsString()\r\n  @MaxLength(151, {\r\n    message: 'Bio is too long, must be at most 150 characters!',\r\n  })\r\n  bio: string;\r\n\r\n  @ApiProperty({\r\n    type: Number,\r\n    description: '1: male, 2: female, 0: other',\r\n    example: 1,\r\n  })\r\n  @IsNumber()\r\n  @Min(0)\r\n  @Max(2)\r\n  gender: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: '123, Address A, City B, Country C'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "MaxLength",
                            "stringifiedArguments": "101, {message: 'Address is too long, must be at most 100 characters!'}"
                        }
                    ]
                },
                {
                    "name": "age",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: Number, example: 19}"
                        },
                        {
                            "name": "IsNumber",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Min",
                            "stringifiedArguments": "17, {message: 'You must be at least 18 years old!'}"
                        },
                        {
                            "name": "Max",
                            "stringifiedArguments": "101, {message: 'You must be at most 100 years old!'}"
                        }
                    ]
                },
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'Avatar example 1 url'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "bio",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'This is bio of Hello ABC account'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "MaxLength",
                            "stringifiedArguments": "151, {message: 'Bio is too long, must be at most 150 characters!'}"
                        }
                    ]
                },
                {
                    "name": "birthdate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{example: '2021-07-02T05:01:03.938Z'}"
                        },
                        {
                            "name": "Type",
                            "stringifiedArguments": "undefined"
                        },
                        {
                            "name": "IsDate",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "cover",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'Cover example 1 url'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "fullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'Hello ABC'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Length",
                            "stringifiedArguments": "3, 45"
                        },
                        {
                            "name": "MinLength",
                            "stringifiedArguments": "2, {message: 'Full name is too short, must be at least 3 characters!'}"
                        },
                        {
                            "name": "MaxLength",
                            "stringifiedArguments": "46, {message: 'Name is too long, must be at most 45 characters!'}"
                        },
                        {
                            "name": "Validate",
                            "stringifiedArguments": "fullNameValidator, {message: 'Full name must be not begin with number!'}"
                        }
                    ]
                },
                {
                    "name": "gender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: Number, description: '1: male, 2: female, 0: other', example: 1}"
                        },
                        {
                            "name": "IsNumber",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Min",
                            "stringifiedArguments": "0"
                        },
                        {
                            "name": "Max",
                            "stringifiedArguments": "2"
                        }
                    ]
                },
                {
                    "name": "interests",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: undefined, example: undefined}"
                        },
                        {
                            "name": "IsArray",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "marriageStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: 'Single'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "phone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "ApiProperty",
                            "stringifiedArguments": "{type: String, example: '09999999999'}"
                        },
                        {
                            "name": "IsString",
                            "stringifiedArguments": ""
                        },
                        {
                            "name": "Validate",
                            "stringifiedArguments": "phoneNumberValidator, {message: 'Phone number is invalid!'}"
                        }
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-9535f8b9d1561cb68ecd68e8f63785b46db2b3f22588b519d41afe8997c3066c5d40d71e44e71e723548e0afd1d0759b49e7796add5f653cf9b610a9e6430f1f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app.module.ts",
            "methods": [
                {
                    "name": "configure",
                    "args": [
                        {
                            "name": "consumer",
                            "type": "MiddlewareConsumer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "consumer",
                            "type": "MiddlewareConsumer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { APP_GUARD } from '@nestjs/core';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { AuthModule } from './infrastructure/auth/auth.module';\nimport { AtGuard } from './infrastructure/auth/guards';\nimport { PrismaModule } from './infrastructure/prisma/prisma.module';\nimport { UsersModule } from './infrastructure/users/users.module';\nimport { FilesModule } from './infrastructure/files/files.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { InterceptorModule } from './core/interceptors/interceptor.module';\nimport { LoggerContextMiddleware } from './core/middleware/logger-context.middleware';\nimport { MessagesModule } from './infrastructure/messages/messages.module';\nimport { ConversationsModule } from './infrastructure/conversations/conversations.module';\nimport { PostsModule } from './infrastructure/posts/posts.module';\nimport { LoggerModule } from './core/logger/logger.module';\n\n@Module({\n  imports: [\n    InterceptorModule,\n    AuthModule,\n    PrismaModule,\n    UsersModule,\n    FilesModule,\n    PostsModule,\n    ConversationsModule,\n    MessagesModule,\n    ConfigModule.forRoot({\n      isGlobal: true,\n      // envFilePath: ['.env'],\n    }),\n    LoggerModule.forRoot(),\n    // ServeStaticModule.forRoot({\n    //   rootPath: `${__dirname}/../public`,\n    //   renderPath: '/',\n    //   exclude: ['/api*'],\n    // }),\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    // the same app.useGlobalGuards(new AtGuard(new Reflector())); in main.ts\n    {\n      provide: APP_GUARD,\n      useClass: AtGuard,\n    },\n  ],\n})\nexport class AppModule implements NestModule {\n  public configure(consumer: MiddlewareConsumer): void {\n    consumer.apply(LoggerContextMiddleware).forRoutes('*');\n    //   .exclude({ path: 'users', method: RequestMethod.GET }, 'users/(.*)')\n    //   .forRoutes(UsersController);\n    // .forRoutes('users');\n    // .forRoutes({ path: 'auth', method: RequestMethod.GET });  // apply middleware for GET request at router /auth\n    // .forRoutes({ path: 'ab*cd', method: RequestMethod.ALL });  // apply middleware for all requesta matching pattern ab*cd\n  }\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AppService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "ConversationsModule"
                        },
                        {
                            "name": "FilesModule"
                        },
                        {
                            "name": "InterceptorModule"
                        },
                        {
                            "name": "MessagesModule"
                        },
                        {
                            "name": "PostsModule"
                        },
                        {
                            "name": "PrismaModule"
                        },
                        {
                            "name": "UsersModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-1576e9fa7f2d8f26b07d997d45b4468b7ddf5c14e22a7b2b8519e0fe0288f5003e2636ced649c2993f10a28b62a7a32a3dfad106241beefe12eb9d03a6cf2426",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/infrastructure/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { AtStrategy, RtStrategy } from './strategies';\nimport { JwtModule } from '@nestjs/jwt';\n\n@Module({\n  imports: [PrismaModule, JwtModule],\n  controllers: [AuthController],\n  providers: [AuthService, AtStrategy, RtStrategy],\n})\nexport class AuthModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AtStrategy"
                        },
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "RtStrategy"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PrismaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConversationsModule",
            "id": "module-ConversationsModule-fce8f63a5231991ae9864d26bffd34651e508cd2932a95378b14e0578e0f75c9016fd60ba070a50f2b2c338ea3a9d4d13c73f15ef388329a56def186423e9f31",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/infrastructure/conversations/conversations.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\r\nimport { ConversationsService } from './conversations.service';\r\nimport { ConversationsController } from './conversations.controller';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { PrismaModule } from '../prisma/prisma.module';\r\n\r\n@Module({\r\n  imports: [PrismaModule, UsersModule],\r\n  controllers: [ConversationsController],\r\n  providers: [ConversationsService],\r\n})\r\nexport class ConversationsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ConversationsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PrismaModule"
                        },
                        {
                            "name": "UsersModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FilesModule",
            "id": "module-FilesModule-e321d0be76c9a8f5323288371a714e9a7e88cfcdce7e6f8c52322cd8f4a4ff0ded0a93122ddfe7859698123bd864ec2baee0d2f7ffa557dfc7aeb3da92ed8702",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/infrastructure/files/files.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\r\nimport { FileController } from './files.controller';\r\nimport { FilesService } from './files.service';\r\n\r\n@Module({\r\n  imports: [FilesService],\r\n  controllers: [FileController],\r\n  providers: [FilesService],\r\n})\r\nexport class FilesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FilesService"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "InterceptorModule",
            "id": "module-InterceptorModule-e51f18ae9e3ff2464a3de430a8b9daf1ef4b22a79b7f5a35c2fadb1a328d70212567e59ad9b2c4641186ab44e04bdd1632662ea635f3ac49ab1ec09959719e05",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/core/interceptors/interceptor.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { LoggingInterceptor } from 'src/core/interceptors/logging.interceptor';\nimport { TransformInterceptor } from 'src/core/interceptors/transform.interceptor';\n\n@Module({\n  providers: [\n    { provide: APP_INTERCEPTOR, useClass: TransformInterceptor },\n    { provide: APP_INTERCEPTOR, useClass: LoggingInterceptor },\n  ],\n})\nexport class InterceptorModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MessagesModule",
            "id": "module-MessagesModule-c93441b19f123f46537007de876b4d68040f54ae5acfed9ac5c1c38d60328888d78ac30c7479525903b97c4d6992902fe559fe804440c1ab7400aabea87eb73f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/infrastructure/messages/messages.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\r\nimport { MessagesGateway } from './messages.gateway';\r\nimport { MessagesService } from './messages.service';\r\n\r\n@Module({\r\n  providers: [MessagesGateway, MessagesService],\r\n})\r\nexport class MessagesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "MessagesService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PostsModule",
            "id": "module-PostsModule-803ae0ad5032b155d941d778adf66a55c7e81ddd40cd61a478d4e303f5330ddb668e786ced23c973621ec196c767c7d8ee8426d66c8665aeda096b960b327a04",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/infrastructure/posts/posts.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\r\nimport { PostsService } from './posts.service';\r\nimport { PostsController } from './posts.controller';\r\nimport { PrismaModule } from '../prisma/prisma.module';\r\nimport { UsersModule } from '../users/users.module';\r\n\r\n@Module({\r\n  imports: [PrismaModule, UsersModule],\r\n  controllers: [PostsController],\r\n  providers: [PostsService],\r\n})\r\nexport class PostsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PostsService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PrismaModule"
                        },
                        {
                            "name": "UsersModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PrismaModule",
            "id": "module-PrismaModule-9aae7134160e44a2bd1dc274b0fcc94bed43d4bd90c19d00a1fb6363443567b53304459f4affdf60f8c6f28263cf8ac5bed712abb3f22f4ba3a00ba7d80487ff",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/infrastructure/prisma/prisma.module.ts",
            "methods": [],
            "sourceCode": "import { Global, Module } from '@nestjs/common';\r\nimport { ConfigModule } from '@nestjs/config';\r\nimport { PrismaService } from './prisma.service';\r\n\r\n@Global()\r\n@Module({\r\n  providers: [PrismaService, ConfigModule],\r\n  exports: [PrismaService],\r\n})\r\nexport class PrismaModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "PrismaService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "PrismaService"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersModule",
            "id": "module-UsersModule-c27c6b3d00c0ec78e770d27e3de2936613388c7f0164a154260dfc73b88168ff2887ac315fa8d59a1b7e1c227d5ead84d315f7e0bbcaf92a3422f232d5ea15df",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/infrastructure/users/users.module.ts",
            "methods": [],
            "sourceCode": "import { Module } from '@nestjs/common';\r\nimport { AuthModule } from 'src/infrastructure/auth/auth.module';\r\nimport { PrismaModule } from 'src/infrastructure/prisma/prisma.module';\r\nimport { UsersController } from './users.controller';\r\nimport { UsersService } from './users.service';\r\n\r\n@Module({\r\n  imports: [PrismaModule, AuthModule],\r\n  controllers: [UsersController],\r\n  providers: [UsersService],\r\n})\r\nexport class UsersModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UsersService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "PrismaModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "comparePassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/helpers/hash.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: string, hash: string) =>\r\n  bcrypt.compare(data, hash)"
            },
            {
                "name": "corsOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/configs/cors.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "function (req: any, callback: any) {\r\n  let option;\r\n\r\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\r\n    option = { origin: true };\r\n  } else {\r\n    option = { origin: false };\r\n  }\r\n  callback(null, option);\r\n}"
            },
            {
                "name": "GetCurrentUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/infrastructure/auth/decorators/get-current-user.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)"
            },
            {
                "name": "GetCurrentUserId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/infrastructure/auth/decorators/get-current-user-id.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)"
            },
            {
                "name": "hashPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/helpers/hash.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(data: string) => bcrypt.hash(data, SALT_ROUNDS)"
            },
            {
                "name": "initSwagger",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/configs/swagger.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(app: INestApplication) => {\n  const config: ConfigService = app.get(ConfigService);\n\n  const swaggerConfig = new DocumentBuilder()\n    .setTitle('Teneno API')\n    .setDescription(\n      \"This is CRUD API for Teneno - the webapp project builded with NestJS. View the source at <a href='https://github.com/thuongtruong1009/teneno-api'>teneno-api</a>\",\n    )\n    .setContact(\n      'Thuong Truong',\n      'https://github.com/thuongtruong1009',\n      'ititiu19228@student.hcmiu.edu.vn',\n    )\n    .addServer(config.get<string>('HOST_URL'))\n    .addServer(config.get<string>('BASE_URL'))\n    .setVersion('1.4')\n    .addTag('cats', 'default description')\n    .addBearerAuth({\n      type: 'http',\n      scheme: 'Bearer',\n      bearerFormat: 'JWT',\n      description: 'Paste a valid access token here.',\n      in: 'Header',\n    })\n    .addSecurity('api_key', {\n      type: 'apiKey',\n      name: 'api_key',\n      in: 'header',\n    })\n    .build();\n\n  const options: ISwaggerOptions = {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  };\n  const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n  SwaggerModule.setup('api', app, document, {\n    swaggerOptions: {\n      persistAuthorization: true,\n    },\n  });\n}"
            },
            {
                "name": "pattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/validators/fullName.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[a-z]\\w/"
            },
            {
                "name": "pattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/validators/password.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/"
            },
            {
                "name": "pattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/validators/phoneNumber.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/"
            },
            {
                "name": "pattern",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/validators/username.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^[a-z]\\w/"
            },
            {
                "name": "prefixesForLoggers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/logger/logger.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string[]",
                "defaultValue": "new Array<string>()"
            },
            {
                "name": "Public",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/infrastructure/auth/decorators/public.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): CustomDecorator => SetMetadata('isPublic', true)"
            },
            {
                "name": "RoleDecorator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/roles/roles.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(...roles: ROLE[]) => SetMetadata('roles', roles)"
            },
            {
                "name": "SALT_ROUNDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/helpers/hash.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "10"
            },
            {
                "name": "whiteList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/core/configs/cors.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "process.env.WHITE_LIST"
            }
        ],
        "functions": [
            {
                "name": "ArrayFieldDecorator",
                "file": "src/infrastructure/files/decorators/array-field.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "fieldName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "required",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxCount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "fieldName",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "required",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "maxCount",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "bootstrap",
                "file": "src/main.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "createLoggerProvider",
                "file": "src/core/logger/logger.provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "prefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Provider<LoggerService>",
                "jsdoctags": [
                    {
                        "name": "prefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createLoggerProviders",
                "file": "src/core/logger/logger.provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "Array<Provider<LoggerService>>"
            },
            {
                "name": "Logger",
                "file": "src/core/logger/logger.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "prefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "prefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "loggerFactory",
                "file": "src/core/logger/logger.provider.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "logger",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "prefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "logger",
                        "type": "LoggerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "prefix",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "middleware",
                "file": "src/core/middleware/app.middleware.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "app",
                        "type": "INestApplication",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "INestApplication",
                "jsdoctags": [
                    {
                        "name": "app",
                        "type": "INestApplication",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "MultiFieldDecorator",
                "file": "src/infrastructure/files/decorators/multi-field.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "uploadFields",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "uploadFields",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "SingleFieldDecorator",
                "file": "src/infrastructure/files/decorators/single-field.decorator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "path",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "UploadFields",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/infrastructure/files/decorators/multi-field.decorator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 187
            }
        ],
        "enumerations": [
            {
                "name": "ROLE",
                "childs": [
                    {
                        "name": "USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "USER"
                    },
                    {
                        "name": "ADMIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ADMIN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/core/roles/roles.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/core/helpers/hash.ts": [
                {
                    "name": "comparePassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/helpers/hash.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: string, hash: string) =>\r\n  bcrypt.compare(data, hash)"
                },
                {
                    "name": "hashPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/helpers/hash.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(data: string) => bcrypt.hash(data, SALT_ROUNDS)"
                },
                {
                    "name": "SALT_ROUNDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/helpers/hash.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "10"
                }
            ],
            "src/core/configs/cors.config.ts": [
                {
                    "name": "corsOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/configs/cors.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "function (req: any, callback: any) {\r\n  let option;\r\n\r\n  if (Array(whiteList).indexOf(req.header('Origin')) !== -1) {\r\n    option = { origin: true };\r\n  } else {\r\n    option = { origin: false };\r\n  }\r\n  callback(null, option);\r\n}"
                },
                {
                    "name": "whiteList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/configs/cors.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "process.env.WHITE_LIST"
                }
            ],
            "src/infrastructure/auth/decorators/get-current-user.decorator.ts": [
                {
                    "name": "GetCurrentUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/infrastructure/auth/decorators/get-current-user.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createParamDecorator(\n  (data: string | undefined, context: ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    if (!data) return request.user;\n    return request.user[data];\n  },\n)"
                }
            ],
            "src/infrastructure/auth/decorators/get-current-user-id.decorator.ts": [
                {
                    "name": "GetCurrentUserId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/infrastructure/auth/decorators/get-current-user-id.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createParamDecorator(\n  (data: undefined, context: ExecutionContext): number => {\n    const request = context.switchToHttp().getRequest();\n    return request.user['sub'];\n  },\n)"
                }
            ],
            "src/core/configs/swagger.ts": [
                {
                    "name": "initSwagger",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/configs/swagger.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(app: INestApplication) => {\n  const config: ConfigService = app.get(ConfigService);\n\n  const swaggerConfig = new DocumentBuilder()\n    .setTitle('Teneno API')\n    .setDescription(\n      \"This is CRUD API for Teneno - the webapp project builded with NestJS. View the source at <a href='https://github.com/thuongtruong1009/teneno-api'>teneno-api</a>\",\n    )\n    .setContact(\n      'Thuong Truong',\n      'https://github.com/thuongtruong1009',\n      'ititiu19228@student.hcmiu.edu.vn',\n    )\n    .addServer(config.get<string>('HOST_URL'))\n    .addServer(config.get<string>('BASE_URL'))\n    .setVersion('1.4')\n    .addTag('cats', 'default description')\n    .addBearerAuth({\n      type: 'http',\n      scheme: 'Bearer',\n      bearerFormat: 'JWT',\n      description: 'Paste a valid access token here.',\n      in: 'Header',\n    })\n    .addSecurity('api_key', {\n      type: 'apiKey',\n      name: 'api_key',\n      in: 'header',\n    })\n    .build();\n\n  const options: ISwaggerOptions = {\n    operationIdFactory: (controllerKey: string, methodKey: string) => methodKey,\n  };\n  const document = SwaggerModule.createDocument(app, swaggerConfig, options);\n  SwaggerModule.setup('api', app, document, {\n    swaggerOptions: {\n      persistAuthorization: true,\n    },\n  });\n}"
                }
            ],
            "src/core/validators/fullName.validator.ts": [
                {
                    "name": "pattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/validators/fullName.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[a-z]\\w/"
                }
            ],
            "src/core/validators/password.validator.ts": [
                {
                    "name": "pattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/validators/password.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,20}$/"
                }
            ],
            "src/core/validators/phoneNumber.validator.ts": [
                {
                    "name": "pattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/validators/phoneNumber.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^(^\\+[0-9]|^0)?[0-9]\\d{9,15}$/"
                }
            ],
            "src/core/validators/username.validator.ts": [
                {
                    "name": "pattern",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/validators/username.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^[a-z]\\w/"
                }
            ],
            "src/core/logger/logger.decorator.ts": [
                {
                    "name": "prefixesForLoggers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/logger/logger.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "defaultValue": "new Array<string>()"
                }
            ],
            "src/infrastructure/auth/decorators/public.decorator.ts": [
                {
                    "name": "Public",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/infrastructure/auth/decorators/public.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): CustomDecorator => SetMetadata('isPublic', true)"
                }
            ],
            "src/core/roles/roles.decorator.ts": [
                {
                    "name": "RoleDecorator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/core/roles/roles.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(...roles: ROLE[]) => SetMetadata('roles', roles)"
                }
            ]
        },
        "groupedFunctions": {
            "src/infrastructure/files/decorators/array-field.decorator.ts": [
                {
                    "name": "ArrayFieldDecorator",
                    "file": "src/infrastructure/files/decorators/array-field.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "required",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "required",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxCount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/main.ts": [
                {
                    "name": "bootstrap",
                    "file": "src/main.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "src/core/logger/logger.provider.ts": [
                {
                    "name": "createLoggerProvider",
                    "file": "src/core/logger/logger.provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Provider<LoggerService>",
                    "jsdoctags": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLoggerProviders",
                    "file": "src/core/logger/logger.provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "Array<Provider<LoggerService>>"
                },
                {
                    "name": "loggerFactory",
                    "file": "src/core/logger/logger.provider.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "logger",
                            "type": "LoggerService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "logger",
                            "type": "LoggerService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/core/logger/logger.decorator.ts": [
                {
                    "name": "Logger",
                    "file": "src/core/logger/logger.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "prefix",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/core/middleware/app.middleware.ts": [
                {
                    "name": "middleware",
                    "file": "src/core/middleware/app.middleware.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "app",
                            "type": "INestApplication",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "INestApplication",
                    "jsdoctags": [
                        {
                            "name": "app",
                            "type": "INestApplication",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/infrastructure/files/decorators/multi-field.decorator.ts": [
                {
                    "name": "MultiFieldDecorator",
                    "file": "src/infrastructure/files/decorators/multi-field.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "uploadFields",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "uploadFields",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/infrastructure/files/decorators/single-field.decorator.ts": [
                {
                    "name": "SingleFieldDecorator",
                    "file": "src/infrastructure/files/decorators/single-field.decorator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/core/roles/roles.enum.ts": [
                {
                    "name": "ROLE",
                    "childs": [
                        {
                            "name": "USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "USER"
                        },
                        {
                            "name": "ADMIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ADMIN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/core/roles/roles.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/infrastructure/files/decorators/multi-field.decorator.ts": [
                {
                    "name": "UploadFields",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/infrastructure/files/decorators/multi-field.decorator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 187
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "AppController",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/core/configs/cors.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "corsOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/configs/cors.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "whiteList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/configs/interfaces/option.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISwaggerOptions",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/core/configs/swagger.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initSwagger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorAcceptableException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorBadGatewayException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorBadRequestException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorForbiddenException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorGatewayTimeoutException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorInternalServerException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorMethodNotAllowedException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorNotFoundException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorRequestTimeoutException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorServiceUnavailableException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorUnauthorizedException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/custom.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ErrorUnsupportedMediaTypeException",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/exception.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AllExceptionsFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/core/filters/http.filter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "HttpExceptionFilter",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/helpers/hash.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "comparePassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/helpers/hash.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "hashPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/helpers/hash.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SALT_ROUNDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/interceptors/exception.interceptor.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorsIntereptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/interceptors/logging.interceptor.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoggingInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/interceptors/timeout.interceptor.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TimeoutInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/interceptors/transform.interceptor.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TransformInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/interceptors/transform.interceptor.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Response",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/logger/logger.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "Logger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/logger/logger.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prefixesForLoggers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/logger/logger.module.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoggerModule",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/logger/logger.provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createLoggerProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/logger/logger.provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createLoggerProviders",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/logger/logger.provider.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "loggerFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/logger/logger.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoggerService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/core/middleware/app.middleware.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "middleware",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/middleware/logger-context.middleware.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoggerContextMiddleware",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/pipes/parse-int.pipe.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ParseIntPipe",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/core/pipes/validation.pipe.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidationPipe",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/core/roles/roles.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RoleDecorator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/roles/roles.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RolesGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/core/validators/fullName.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "fullNameValidator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/core/validators/fullName.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/validators/password.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "passwordValidator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/core/validators/password.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/validators/phoneNumber.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "phoneNumberValidator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/core/validators/phoneNumber.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/core/validators/username.validator.ts",
                "type": "class",
                "linktype": "classe",
                "name": "usenameValidator",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/core/validators/username.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pattern",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/auth.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "AuthController",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/decorators/get-current-user-id.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetCurrentUserId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/decorators/get-current-user.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GetCurrentUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/decorators/public.decorator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Public",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/dto/password.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdatePasswordDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/dto/sigin.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/dto/signup.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignupDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/guards/at.guard.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AtGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/guards/rt.guard.ts",
                "type": "class",
                "linktype": "classe",
                "name": "RtGuard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/strategies/at.strategy.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AtStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/auth/strategies/rt.strategy.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RtStrategy",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/conversations.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "ConversationsController",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/conversations.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConversationsService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/dto/create-conversation.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateConversationDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/dto/delete-conversation.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteConversationDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/dto/get-conversation.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetAllConversationDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/dto/get-conversation.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetOneConversationDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/dto/update-conversation.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteOneAdminConversationDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/dto/update-conversation.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateConversationDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/dto/update-conversation.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMembersConversationDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/dto/update-conversation.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateRolesConversationDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/conversations/entities/conversation.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ConversationEntity",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/files/decorators/array-field.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "ArrayFieldDecorator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/files/decorators/multi-field.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "MultiFieldDecorator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/files/decorators/single-field.decorator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "SingleFieldDecorator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/files/files.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "FileController",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/files/files.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FilesService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/messages/dto/create-message.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreateMessageDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/messages/dto/update-message.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateMessageDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/messages/messages.gateway.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MessagesGateway",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/messages/messages.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MessagesService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/posts/dto/create-post.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CreatePostDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/posts/dto/delete-post.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteOnePost",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/posts/dto/get-post.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetAllPostOfUserDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/posts/dto/update-post.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ReactionsPost",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/posts/dto/update-post.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdatePostDto",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/posts/entities/post.entity.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Post",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/posts/posts.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "PostsController",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/posts/posts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PostsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/prisma/prisma.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PrismaService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/users/dto/get-user.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetUserProfileByEmailNameDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/users/dto/pagination.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PaginationDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/users/dto/user-avatar.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserAvatarDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/users/dto/user-cover.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserCoverDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/users/dto/users-profile.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserProfileDto",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/users/users.controller.ts",
                "type": "controller",
                "linktype": "controller",
                "name": "UsersController",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/infrastructure/users/users.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/main.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}